{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>A modern Python datetime library with fluent API, immutable design, and comprehensive timezone support.</p>"},{"location":"#overview","title":"Overview","text":"<p>Carbonic is a datetime library designed for modern Python applications that need powerful, type-safe datetime manipulation. Built with dataclasses and Python's standard library <code>zoneinfo</code>, it provides an intuitive, fluent API for working with dates, times, durations, and intervals.</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#fluent-immutable","title":"\u2728 Fluent &amp; Immutable","text":"<p>Chain operations naturally with a fluent API while maintaining immutability for safety:</p> <pre><code>from carbonic import DateTime, now\n\n# Fluent chaining\nresult = now().add(days=7).end_of(\"month\").to_date_string()\n\n# All operations return new instances\ndt = DateTime(2024, 1, 15, 14, 30)\nnew_dt = dt.add(hours=2)  # Original dt is unchanged\n</code></pre>"},{"location":"#type-safe","title":"\ud83d\udd12 Type Safe","text":"<p>Full type annotations and PEP 561 compliance for excellent IDE support:</p> <pre><code>from carbonic import DateTime, Duration\n\ndt: DateTime = DateTime.now()\nduration: Duration = Duration(hours=2, minutes=30)\nfuture: DateTime = dt + duration  # Type checked!\n</code></pre>"},{"location":"#timezone-aware","title":"\ud83c\udf0d Timezone Aware","text":"<p>Built-in timezone support using Python's standard <code>zoneinfo</code>:</p> <pre><code>from carbonic import DateTime\n\n# Create timezone-aware datetime\nutc_time = DateTime.now()  # UTC by default\nny_time = DateTime.now(\"America/New_York\")\n\n# Convert between timezones would require timezone conversion methods\n# (Note: timezone conversion methods may need to be implemented)\n</code></pre>"},{"location":"#rich-date-operations","title":"\ud83d\udcc5 Rich Date Operations","text":"<p>Comprehensive date and time manipulation:</p> <pre><code>from carbonic import DateTime, Period\n\ndt = DateTime(2024, 1, 15)\n\n# Date arithmetic\nnext_month = dt.add(months=1)\n# Note: Additional methods like previous(), next_business_day() may need implementation\n\n# Date boundaries\nstart_of_week = dt.start_of(\"week\")\nend_of_month = dt.end_of(\"month\")\n\n# Duration calculations\nother_dt = DateTime(2024, 2, 15)\ndiff = dt.diff(other_dt)\n</code></pre>"},{"location":"#localization-support","title":"\ud83c\udf10 Localization Support","text":"<p>Multi-language formatting and humanization:</p> <pre><code>from carbonic import DateTime\n\ndt = DateTime(2024, 1, 15, 14, 30)\n\n# English (default) formatting\nformatted_en = dt.format(\"l, F j, Y\")  # \"Monday, January 15, 2024\"\n\n# Polish localization formatting\nformatted_pl = dt.format(\"l, j F Y\", locale=\"pl\")  # \"poniedzia\u0142ek, 15 stycznia 2024\"\n\n# Date string formatting\ndate_string = dt.to_date_string()  # \"2024-01-15\"\n</code></pre>"},{"location":"#performance-optimized","title":"\u26a1 Performance Optimized","text":"<ul> <li>Zero-copy operations where possible</li> <li>Lazy evaluation for expensive formatting</li> <li>Memory-efficient immutable design with <code>__slots__</code></li> <li>Optional fast parsing with <code>ciso8601</code></li> </ul>"},{"location":"#framework-integration","title":"\ud83d\udd17 Framework Integration","text":"<ul> <li>Pydantic: Custom field types for validation and serialization</li> <li>JSON Schema: Automatic schema generation for APIs</li> <li>FastAPI: Seamless integration with modern web frameworks</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code># Install from PyPI\npip install carbonic\n\n# With optional fast parsing\npip install carbonic[performance]\n\n# With Pydantic integration for validation\npip install carbonic[pydantic]\n\n# Development installation\npip install carbonic[dev]\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>from carbonic import DateTime, Date, Duration, now, today\n\n# Current time\ncurrent = now()                    # UTC by default\nlocal = now(\"America/New_York\")    # Specific timezone\n\n# Create specific datetime\ndt = DateTime(2024, 1, 15, 14, 30, 0, tz=\"UTC\")\n\n# Date-only operations\ndate = Date(2024, 1, 15)\ntoday_date = today()\n\n# Duration arithmetic\nduration = Duration(hours=2, minutes=30)\nfuture = dt + duration\n\n# Formatting\niso_string = dt.to_iso_string()         # \"2024-01-15T14:30:00+00:00\"\nreadable = dt.format(\"Y-m-d H:i:s\")    # \"2024-01-15 14:30:00\"\n\n# Pydantic integration (requires: pip install carbonic[pydantic])\nfrom pydantic import BaseModel\nfrom carbonic.integrations.pydantic import DateTimeField\n\nclass Event(BaseModel):\n    name: str\n    start_time: DateTimeField\n\nevent = Event(name=\"Meeting\", start_time=\"2024-01-15T14:30:00Z\")\nprint(event.start_time)  # DateTime(2024, 1, 15, 14, 30, 0, tz='UTC')\n</code></pre>"},{"location":"#core-classes","title":"Core Classes","text":"Class Purpose Example Usage DateTime Full datetime with timezone <code>DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")</code> Date Date-only operations <code>Date(2024, 1, 15)</code> Duration Time differences <code>Duration(hours=2, minutes=30)</code> Period Named time periods <code>Period.MONTH</code>, <code>Period.FRIDAY</code> Interval Time ranges <code>Interval(start_dt, end_dt)</code>"},{"location":"#why-carbonic","title":"Why Carbonic?","text":""},{"location":"#designed-for-modern-python","title":"Designed for Modern Python","text":"<ul> <li>Python 3.12+: Leverages latest Python features</li> <li>Type Safety: Full mypy compatibility</li> <li>Immutability: Prevents bugs and enables safe concurrency</li> <li>Standard Library: No external dependencies for core functionality</li> </ul>"},{"location":"#developer-experience","title":"Developer Experience","text":"<ul> <li>Intuitive API: Natural, readable method names</li> <li>Excellent IDE Support: Complete type annotations</li> <li>Comprehensive Testing: 100% test coverage</li> <li>Clear Documentation: Detailed guides and examples</li> </ul>"},{"location":"#production-ready","title":"Production Ready","text":"<ul> <li>Timezone Correct: Proper timezone handling with <code>zoneinfo</code></li> <li>Business Logic: Built-in business day calculations</li> <li>Localization: Multi-language support architecture</li> <li>Performance: Optimized for real-world usage patterns</li> </ul>"},{"location":"#learn-more","title":"Learn More","text":"<ul> <li> <p> Getting Started</p> <p>New to Carbonic? Start here for installation and basic concepts.</p> <p> Quick Start</p> </li> <li> <p> User Guide</p> <p>Comprehensive guides for each feature and class.</p> <p> Browse Guides</p> </li> <li> <p> API Reference</p> <p>Complete API documentation with examples.</p> <p> API Docs</p> </li> <li> <p> Examples</p> <p>Real-world examples and common use cases.</p> <p> See Examples</p> </li> </ul>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li>GitHub: marepilc/carbonic</li> <li>Issues: Bug Reports &amp; Feature Requests</li> <li>PyPI: python.org/project/carbonic</li> </ul>"},{"location":"#license","title":"License","text":"<p>Carbonic is released under the MIT License. See the LICENSE file for details.</p>"},{"location":"api/","title":"API Reference","text":"<p>Complete API documentation for all Carbonic classes and functions.</p>"},{"location":"api/#overview","title":"Overview","text":"<p>Carbonic provides a comprehensive set of classes for working with dates, times, durations, and intervals. All classes are immutable and provide fluent APIs for chaining operations.</p>"},{"location":"api/#core-classes","title":"Core Classes","text":""},{"location":"api/#datetime","title":"DateTime","text":"<p>The main datetime class with timezone support and comprehensive date/time operations.</p> <pre><code>from carbonic import DateTime, now\n\n# Current time\ncurrent = now()\n\n# Specific datetime\ndt = DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")\n\n# Fluent operations\nresult = dt.add(days=7).end_of(\"month\")\n# Note: timezone conversion methods may need implementation\n</code></pre>"},{"location":"api/#date","title":"Date","text":"<p>Date-only operations without time components.</p> <pre><code>from carbonic import Date, today\n\n# Today's date\ntoday_date = today()\n\n# Specific date\nbirthday = Date(1990, 5, 15)\n\n# Date arithmetic\nnext_month = birthday.add(months=1)\n</code></pre>"},{"location":"api/#duration","title":"Duration","text":"<p>Represents spans of time that can be added to or subtracted from datetime objects.</p> <pre><code>from carbonic import DateTime, Duration\n\n# Create duration\nduration = Duration(hours=2, minutes=30)\n\n# Use with datetime\ndt = DateTime.now()\nfuture = dt + duration\n</code></pre>"},{"location":"api/#period","title":"Period","text":"<p>Named time periods and weekday constants.</p> <pre><code>from carbonic import DateTime, Period\n\ndt = DateTime.now()\n\n# Add time periods using Period constants\nnext_month = Period.MONTH.add_to(dt)\nnext_week = Period.WEEK.add_to(dt)\n\n# Time period constants\nmonthly_period = Period.MONTH\n</code></pre>"},{"location":"api/#interval","title":"Interval","text":"<p>Represents time ranges between two datetime points.</p> <pre><code>from carbonic import DateTime, Interval\n\n# Create interval\nstart_dt = DateTime.now()\nend_dt = start_dt.add(hours=2)\nmeeting = Interval(start_dt, end_dt)\n\n# Check overlaps\nother_start = start_dt.add(hours=1)\nother_end = other_start.add(hours=2)\nother_meeting = Interval(other_start, other_end)\nis_conflicting = meeting.overlaps(other_meeting)\n</code></pre>"},{"location":"api/#factory-functions","title":"Factory Functions","text":""},{"location":"api/#now","title":"now()","text":"<pre><code>from carbonic import now\n\n# Get current time in UTC (default)\ncurrent_utc = now()\n\n# Get current time in specific timezone\ncurrent_ny = now(\"America/New_York\")\n</code></pre> <p>Create a DateTime instance for the current moment in the specified timezone.</p> <p>Parameters: - <code>tz</code>: Timezone string (IANA timezone name) or None for naive datetime</p> <p>Returns: - DateTime object representing the current moment</p>"},{"location":"api/#today","title":"today()","text":"<pre><code>from carbonic import today\n\n# Get today's date\ntoday_date = today()\n\n# Get today's date in specific timezone\ntoday_tokyo = today(\"Asia/Tokyo\")\n</code></pre> <p>Create a Date instance for today in the specified timezone.</p> <p>Parameters: - <code>tz</code>: Timezone string for determining \"today\" or None for system timezone</p> <p>Returns: - Date object representing today</p>"},{"location":"api/#exception-classes","title":"Exception Classes","text":""},{"location":"api/#exceptions","title":"Exceptions","text":"<p>Custom exceptions for error handling.</p> <pre><code>from carbonic.core.exceptions import (\n    CarbonicError,\n    ParseError\n)\n\n# Example usage\ntry:\n    from carbonic import DateTime\n    dt = DateTime.parse(\"invalid-date-string\")\nexcept ParseError as e:\n    print(f\"Failed to parse: {e}\")\n</code></pre>"},{"location":"api/#locale-support","title":"Locale Support","text":""},{"location":"api/#locale","title":"Locale","text":"<p>Localization and internationalization support.</p> <pre><code>from carbonic import DateTime\nfrom carbonic.locale import get_locale\n\n# Get locale for formatting\nlocale = get_locale(\"pl\")  # Polish\n\n# Create datetime and format with locale\ndt = DateTime(2024, 1, 15, 14, 30)\nformatted = dt.format(\"l, j F Y\", locale=\"pl\")  # \"poniedzia\u0142ek, 15 stycznia 2024\"\n</code></pre>"},{"location":"api/#type-system","title":"Type System","text":"<p>Carbonic is fully typed and supports PEP 561. All classes and functions include comprehensive type annotations for excellent IDE support and static type checking.</p>"},{"location":"api/#import-structure","title":"Import Structure","text":"<pre><code># Main classes and functions\nfrom carbonic import DateTime, Date, Duration, Period, Interval, now, today\n\n# Exceptions\nfrom carbonic.core.exceptions import CarbonicError, ParseError\n\n# Locale support\nfrom carbonic.locale import get_locale\n\n# Example usage\ndt = DateTime.now()\ntoday_date = today()\nduration = Duration(hours=2)\n</code></pre>"},{"location":"api/#design-principles","title":"Design Principles","text":""},{"location":"api/#immutability","title":"Immutability","text":"<p>All objects are immutable dataclasses with <code>frozen=True</code> and <code>slots=True</code> for memory efficiency and thread safety.</p>"},{"location":"api/#fluent-api","title":"Fluent API","text":"<p>Methods are designed to chain naturally while maintaining readability:</p> <pre><code>from carbonic import DateTime\n\nresult = (DateTime.now()\n    .add(days=1)\n    .start_of(\"day\")\n    .format(\"Y-m-d H:i:s\")\n)\n</code></pre>"},{"location":"api/#type-safety","title":"Type Safety","text":"<p>Comprehensive type annotations throughout:</p> <pre><code>from carbonic import DateTime, Duration\n\ndef schedule_meeting(\n    start: DateTime,\n    duration: Duration,\n    attendee_count: int\n) -&gt; list[DateTime]:\n    return [\n        start.add(hours=i)\n        for i in range(attendee_count)\n    ]\n\n# Example usage\nstart_time = DateTime.now()\nduration = Duration(hours=2)\nmeetings = schedule_meeting(start_time, duration, 3)\n</code></pre>"},{"location":"api/#timezone-awareness","title":"Timezone Awareness","text":"<p>Strong emphasis on timezone-aware operations:</p> <pre><code>from carbonic import DateTime\n\n# Encouraged: explicit timezone\ndt = DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")\n\n# Discouraged: naive datetime\nnaive = DateTime(2024, 1, 15, 14, 30, tz=None)\n</code></pre>"},{"location":"api/#performance-characteristics","title":"Performance Characteristics","text":"<ul> <li>Memory Efficient: <code>__slots__</code> usage reduces memory overhead</li> <li>Fast Operations: Leverages Python's datetime internally</li> <li>Optional Acceleration: Fast ISO parsing with <code>ciso8601</code></li> <li>Lazy Evaluation: Expensive formatting operations are deferred</li> </ul>"},{"location":"api/#version-compatibility","title":"Version Compatibility","text":"<p>Current version: 0.2.0</p> <ul> <li>Python: 3.12+</li> <li>Dependencies: None (stdlib only)</li> <li>Optional Dependencies: <code>ciso8601</code></li> </ul>"},{"location":"api/#navigation","title":"Navigation","text":"<p>Browse the detailed API documentation for each component:</p> <ul> <li>DateTime - Main datetime class</li> <li>Date - Date-only operations</li> <li>Duration - Time spans and intervals</li> <li>Period - Named time periods</li> <li>Interval - Time ranges</li> <li>Exceptions - Error handling</li> <li>Locale - Internationalization</li> </ul> <p>Each page includes comprehensive method documentation with examples, parameters, return types, and usage notes.</p>"},{"location":"api/carbonic/","title":"carbonic","text":"<p>Main module providing core datetime functionality.</p>"},{"location":"api/carbonic/#carbonic","title":"carbonic","text":"<p>Carbonic - A modern Python datetime library with fluent API and immutable design.</p> <p>A fluent, immutable datetime library built with dataclasses and stdlib zoneinfo.</p>"},{"location":"api/carbonic/#carbonic-classes","title":"Classes","text":""},{"location":"api/carbonic/#carbonic.DateTime","title":"DateTime  <code>dataclass</code>","text":"<pre><code>DateTime(\n    year: int,\n    month: int,\n    day: int,\n    hour: int = 0,\n    minute: int = 0,\n    second: int = 0,\n    microsecond: int = 0,\n    tz: str | None = \"UTC\",\n)\n</code></pre> <p>Immutable datetime object with fluent API and timezone support.</p> <p>The DateTime class provides a modern, type-safe wrapper around Python's datetime with comprehensive datetime manipulation. All operations return new instances, maintaining immutability.</p> <p>Attributes:</p> Name Type Description <code>_dt</code> <code>datetime</code> <p>Internal datetime.datetime object storing the actual datetime value</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dt = DateTime(2024, 1, 15, 14, 30, 0, tz=\"UTC\")\n&gt;&gt;&gt; dt.add(hours=2).format(\"Y-m-d H:i:s\")\n'2024-01-15 16:30:00'\n</code></pre> <pre><code>&gt;&gt;&gt; now = DateTime.now(\"America/New_York\")\n&gt;&gt;&gt; now.to_date_string()\n'2024-01-15'\n</code></pre> <p>Initialize a new DateTime instance.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int</code> <p>Year (e.g., 2024)</p> required <code>month</code> <code>int</code> <p>Month (1-12)</p> required <code>day</code> <code>int</code> <p>Day of month (1-31)</p> required <code>hour</code> <code>int</code> <p>Hour (0-23, default: 0)</p> <code>0</code> <code>minute</code> <code>int</code> <p>Minute (0-59, default: 0)</p> <code>0</code> <code>second</code> <code>int</code> <p>Second (0-59, default: 0)</p> <code>0</code> <code>microsecond</code> <code>int</code> <p>Microsecond (0-999999, default: 0)</p> <code>0</code> <code>tz</code> <code>str | None</code> <p>Timezone string (default: \"UTC\", None for naive datetime)</p> <code>'UTC'</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If any datetime component is invalid</p> <code>ZoneInfoNotFoundError</code> <p>If timezone string is invalid</p>"},{"location":"api/carbonic/#carbonic.DateTime-attributes","title":"Attributes","text":""},{"location":"api/carbonic/#carbonic.DateTime.year","title":"year  <code>property</code>","text":"<pre><code>year: int\n</code></pre> <p>The year component (e.g., 2024).</p>"},{"location":"api/carbonic/#carbonic.DateTime.month","title":"month  <code>property</code>","text":"<pre><code>month: int\n</code></pre> <p>The month component (1-12).</p>"},{"location":"api/carbonic/#carbonic.DateTime.day","title":"day  <code>property</code>","text":"<pre><code>day: int\n</code></pre> <p>The day of month component (1-31).</p>"},{"location":"api/carbonic/#carbonic.DateTime.hour","title":"hour  <code>property</code>","text":"<pre><code>hour: int\n</code></pre> <p>The hour component (0-23).</p>"},{"location":"api/carbonic/#carbonic.DateTime.minute","title":"minute  <code>property</code>","text":"<pre><code>minute: int\n</code></pre> <p>The minute component (0-59).</p>"},{"location":"api/carbonic/#carbonic.DateTime.second","title":"second  <code>property</code>","text":"<pre><code>second: int\n</code></pre> <p>The second component (0-59).</p>"},{"location":"api/carbonic/#carbonic.DateTime.microsecond","title":"microsecond  <code>property</code>","text":"<pre><code>microsecond: int\n</code></pre> <p>The microsecond component (0-999999).</p>"},{"location":"api/carbonic/#carbonic.DateTime.tzinfo","title":"tzinfo  <code>property</code>","text":"<pre><code>tzinfo: tzinfo | None\n</code></pre> <p>The timezone info, or None for naive datetime.</p>"},{"location":"api/carbonic/#carbonic.DateTime-functions","title":"Functions","text":""},{"location":"api/carbonic/#carbonic.DateTime.now","title":"now  <code>classmethod</code>","text":"<pre><code>now(tz: str | None = 'UTC') -&gt; DateTime\n</code></pre> <p>Create a DateTime instance for the current moment.</p> <p>Parameters:</p> Name Type Description Default <code>tz</code> <code>str | None</code> <p>Timezone string (default: \"UTC\", None for system local time)</p> <code>'UTC'</code> <p>Returns:</p> Type Description <code>DateTime</code> <p>DateTime instance representing the current moment</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DateTime.now()  # Current time in UTC\n&gt;&gt;&gt; DateTime.now(\"America/New_York\")  # Current time in NY timezone\n&gt;&gt;&gt; DateTime.now(None)  # Current local time (naive)\n</code></pre>"},{"location":"api/carbonic/#carbonic.DateTime.today","title":"today  <code>classmethod</code>","text":"<pre><code>today(tz: str | None = 'UTC') -&gt; DateTime\n</code></pre> <p>Get the current date at 00:00:00 in the specified timezone.</p> <p>Parameters:</p> Name Type Description Default <code>tz</code> <code>str | None</code> <p>Timezone string (default: \"UTC\")</p> <code>'UTC'</code> <p>Returns:</p> Type Description <code>DateTime</code> <p>DateTime object representing today at midnight</p>"},{"location":"api/carbonic/#carbonic.DateTime.tomorrow","title":"tomorrow  <code>classmethod</code>","text":"<pre><code>tomorrow(tz: str | None = 'UTC') -&gt; DateTime\n</code></pre> <p>Get tomorrow's date at 00:00:00 in the specified timezone.</p> <p>Parameters:</p> Name Type Description Default <code>tz</code> <code>str | None</code> <p>Timezone string (default: \"UTC\")</p> <code>'UTC'</code> <p>Returns:</p> Type Description <code>DateTime</code> <p>DateTime object representing tomorrow at midnight</p>"},{"location":"api/carbonic/#carbonic.DateTime.yesterday","title":"yesterday  <code>classmethod</code>","text":"<pre><code>yesterday(tz: str | None = 'UTC') -&gt; DateTime\n</code></pre> <p>Get yesterday's date at 00:00:00 in the specified timezone.</p> <p>Parameters:</p> Name Type Description Default <code>tz</code> <code>str | None</code> <p>Timezone string (default: \"UTC\")</p> <code>'UTC'</code> <p>Returns:</p> Type Description <code>DateTime</code> <p>DateTime object representing yesterday at midnight</p>"},{"location":"api/carbonic/#carbonic.DateTime.next","title":"next  <code>classmethod</code>","text":"<pre><code>next(unit: str, count: int = 1, tz: str | None = 'UTC') -&gt; DateTime\n</code></pre> <p>Get a datetime in the future relative to now.</p> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>str</code> <p>Time unit (\"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\")</p> required <code>count</code> <code>int</code> <p>Number of units to add (default: 1)</p> <code>1</code> <code>tz</code> <code>str | None</code> <p>Timezone string (default: \"UTC\")</p> <code>'UTC'</code> <p>Returns:</p> Type Description <code>DateTime</code> <p>DateTime object in the future</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DateTime.next(\"day\")      # Tomorrow\n&gt;&gt;&gt; DateTime.next(\"week\", 2)  # 2 weeks from now\n&gt;&gt;&gt; DateTime.next(\"month\")    # Next month\n</code></pre>"},{"location":"api/carbonic/#carbonic.DateTime.previous","title":"previous  <code>classmethod</code>","text":"<pre><code>previous(unit: str, count: int = 1, tz: str | None = 'UTC') -&gt; DateTime\n</code></pre> <p>Get a datetime in the past relative to now.</p> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>str</code> <p>Time unit (\"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\")</p> required <code>count</code> <code>int</code> <p>Number of units to subtract (default: 1)</p> <code>1</code> <code>tz</code> <code>str | None</code> <p>Timezone string (default: \"UTC\")</p> <code>'UTC'</code> <p>Returns:</p> Type Description <code>DateTime</code> <p>DateTime object in the past</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DateTime.previous(\"day\")      # Yesterday\n&gt;&gt;&gt; DateTime.previous(\"week\", 2)  # 2 weeks ago\n&gt;&gt;&gt; DateTime.previous(\"month\")    # Last month\n</code></pre>"},{"location":"api/carbonic/#carbonic.DateTime.parse","title":"parse  <code>classmethod</code>","text":"<pre><code>parse(s: str, fmt: str | None = None, tz: str | None = None) -&gt; DateTime\n</code></pre> <p>Parse a datetime string into a DateTime object.</p> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>str</code> <p>The datetime string to parse. Supports: - ISO 8601 formats (2024-01-15T14:30:00Z) - Custom formats when fmt is provided</p> required <code>fmt</code> <code>str | None</code> <p>Optional format string. If None, auto-detect format. Supports both strftime (%Y-%m-%d %H:%M:%S) and Carbon (Y-m-d H:i:s) formats.</p> <code>None</code> <code>tz</code> <code>str | None</code> <p>Optional timezone. If provided, applies to naive parsed datetimes.</p> <code>None</code> <p>Returns:</p> Type Description <code>DateTime</code> <p>DateTime object</p> <p>Raises:</p> Type Description <code>ParseError</code> <p>If the string cannot be parsed</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DateTime.parse(\"2024-01-15T14:30:00Z\")\n</code></pre>"},{"location":"api/carbonic/#carbonic.DateTime.strftime","title":"strftime","text":"<pre><code>strftime(fmt: str) -&gt; str\n</code></pre> <p>Format datetime using strftime format string.</p>"},{"location":"api/carbonic/#carbonic.DateTime.format","title":"format","text":"<pre><code>format(fmt: str, *, locale: str | None = None) -&gt; str\n</code></pre> <p>Format datetime using Carbon-style format string.</p> <p>Parameters:</p> Name Type Description Default <code>fmt</code> <code>str</code> <p>Carbon-style format string</p> required <code>locale</code> <code>str | None</code> <p>Locale code for localized month/day names (default: English)</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>Formatted datetime string</p>"},{"location":"api/carbonic/#carbonic.DateTime.to_iso_string","title":"to_iso_string","text":"<pre><code>to_iso_string() -&gt; str\n</code></pre> <p>Return ISO 8601 string (2025-09-23T14:30:45+00:00).</p> <p>Returns:</p> Type Description <code>str</code> <p>ISO 8601 formatted datetime string with timezone</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dt = DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")\n&gt;&gt;&gt; dt.to_iso_string()\n'2024-01-15T14:30:00+00:00'\n</code></pre>"},{"location":"api/carbonic/#carbonic.DateTime.to_date_string","title":"to_date_string","text":"<pre><code>to_date_string() -&gt; str\n</code></pre> <p>Return date string (2025-09-23).</p> <p>Returns:</p> Type Description <code>str</code> <p>Date portion formatted as YYYY-MM-DD</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dt = DateTime(2024, 1, 15, 14, 30)\n&gt;&gt;&gt; dt.to_date_string()\n'2024-01-15'\n</code></pre>"},{"location":"api/carbonic/#carbonic.DateTime.to_time_string","title":"to_time_string","text":"<pre><code>to_time_string() -&gt; str\n</code></pre> <p>Return time string (14:30:45).</p> <p>Returns:</p> Type Description <code>str</code> <p>Time portion formatted as HH:MM:SS</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dt = DateTime(2024, 1, 15, 14, 30, 45)\n&gt;&gt;&gt; dt.to_time_string()\n'14:30:45'\n</code></pre>"},{"location":"api/carbonic/#carbonic.DateTime.to_datetime_string","title":"to_datetime_string","text":"<pre><code>to_datetime_string() -&gt; str\n</code></pre> <p>Return datetime string (2025-09-23 14:30:45).</p> <p>Returns:</p> Type Description <code>str</code> <p>Datetime formatted as YYYY-MM-DD HH:MM:SS (no timezone)</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dt = DateTime(2024, 1, 15, 14, 30, 45)\n&gt;&gt;&gt; dt.to_datetime_string()\n'2024-01-15 14:30:45'\n</code></pre>"},{"location":"api/carbonic/#carbonic.DateTime.to_atom_string","title":"to_atom_string","text":"<pre><code>to_atom_string() -&gt; str\n</code></pre> <p>Return Atom/RSS datetime string (ISO 8601).</p> <p>Returns:</p> Type Description <code>str</code> <p>ISO 8601 formatted string suitable for Atom/RSS feeds</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dt = DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")\n&gt;&gt;&gt; dt.to_atom_string()\n'2024-01-15T14:30:00+00:00'\n</code></pre>"},{"location":"api/carbonic/#carbonic.DateTime.to_cookie_string","title":"to_cookie_string","text":"<pre><code>to_cookie_string() -&gt; str\n</code></pre> <p>Return cookie datetime string (Tue, 23-Sep-2025 14:30:45 UTC).</p> <p>Returns:</p> Type Description <code>str</code> <p>Cookie-compatible datetime string format</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dt = DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")\n&gt;&gt;&gt; dt.to_cookie_string()\n'Mon, 15-Jan-2024 14:30:00 UTC'\n</code></pre>"},{"location":"api/carbonic/#carbonic.DateTime.from_datetime","title":"from_datetime  <code>classmethod</code>","text":"<pre><code>from_datetime(dt: datetime) -&gt; DateTime\n</code></pre> <p>Create a DateTime from a standard Python datetime object.</p> <p>Parameters:</p> Name Type Description Default <code>dt</code> <code>datetime</code> <p>Python datetime.datetime object to convert</p> required <p>Returns:</p> Type Description <code>DateTime</code> <p>New DateTime instance preserving timezone information</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; dt = datetime.datetime(2024, 1, 15, 14, 30)\n&gt;&gt;&gt; carbonic_dt = DateTime.from_datetime(dt)\n</code></pre>"},{"location":"api/carbonic/#carbonic.DateTime.add","title":"add","text":"<pre><code>add(\n    *,\n    days: int = 0,\n    hours: int = 0,\n    minutes: int = 0,\n    seconds: int = 0,\n    months: int = 0,\n    years: int = 0,\n) -&gt; DateTime\n</code></pre> <p>Add time components to this datetime.</p>"},{"location":"api/carbonic/#carbonic.DateTime.subtract","title":"subtract","text":"<pre><code>subtract(**kwargs: int) -&gt; DateTime\n</code></pre> <p>Subtract time components from this datetime.</p>"},{"location":"api/carbonic/#carbonic.DateTime.diff","title":"diff","text":"<pre><code>diff(other: DateTime, *, absolute: bool = False) -&gt; Duration\n</code></pre> <p>Calculate difference between this datetime and another datetime.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>DateTime</code> <p>The other datetime to compare with</p> required <code>absolute</code> <code>bool</code> <p>If True, return absolute difference (always positive)</p> <code>False</code> <p>Returns:</p> Type Description <code>Duration</code> <p>Duration representing the difference</p>"},{"location":"api/carbonic/#carbonic.DateTime.add_duration","title":"add_duration","text":"<pre><code>add_duration(duration: Duration) -&gt; DateTime\n</code></pre> <p>Add a Duration to this DateTime.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>Duration</code> <p>The Duration to add</p> required <p>Returns:</p> Type Description <code>DateTime</code> <p>New DateTime with the duration added</p>"},{"location":"api/carbonic/#carbonic.DateTime.subtract_duration","title":"subtract_duration","text":"<pre><code>subtract_duration(duration: Duration) -&gt; DateTime\n</code></pre> <p>Subtract a Duration from this DateTime.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>Duration</code> <p>The Duration to subtract</p> required <p>Returns:</p> Type Description <code>DateTime</code> <p>New DateTime with the duration subtracted</p>"},{"location":"api/carbonic/#carbonic.DateTime.start_of","title":"start_of","text":"<pre><code>start_of(\n    unit: Literal[\"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\"],\n) -&gt; DateTime\n</code></pre> <p>Return the start of the specified time period.</p>"},{"location":"api/carbonic/#carbonic.DateTime.end_of","title":"end_of","text":"<pre><code>end_of(\n    unit: Literal[\"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\"],\n) -&gt; DateTime\n</code></pre> <p>Return the end of the specified time period.</p>"},{"location":"api/carbonic/#carbonic.DateTime.to_date","title":"to_date","text":"<pre><code>to_date() -&gt; Date\n</code></pre> <p>Convert to carbonic Date object.</p>"},{"location":"api/carbonic/#carbonic.DateTime.to_datetime","title":"to_datetime","text":"<pre><code>to_datetime() -&gt; datetime.datetime\n</code></pre> <p>Return a copy of the underlying datetime.datetime object.</p>"},{"location":"api/carbonic/#carbonic.Date","title":"Date  <code>dataclass</code>","text":"<pre><code>Date(year: int, month: int, day: int)\n</code></pre> <p>Immutable date object with fluent API and comprehensive date operations.</p> <p>The Date class provides a modern, type-safe wrapper around Python's date with additional functionality for date manipulation and formatting. All operations return new instances, maintaining immutability.</p> <p>Attributes:</p> Name Type Description <code>_date</code> <code>date</code> <p>Internal datetime.date object storing the actual date value</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; date = Date(2024, 1, 15)\n&gt;&gt;&gt; date.add(days=10).format(\"Y-m-d\")\n'2024-01-25'\n</code></pre> <pre><code>&gt;&gt;&gt; today = Date.today()\n&gt;&gt;&gt; today.start_of(\"month\").format(\"F j, Y\")\n'January 1, 2024'\n</code></pre> <p>Initialize a new Date instance.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int</code> <p>Year (e.g., 2024)</p> required <code>month</code> <code>int</code> <p>Month (1-12)</p> required <code>day</code> <code>int</code> <p>Day of month (1-31)</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If any date component is invalid</p>"},{"location":"api/carbonic/#carbonic.Date-attributes","title":"Attributes","text":""},{"location":"api/carbonic/#carbonic.Date.weekday","title":"weekday  <code>property</code>","text":"<pre><code>weekday: int\n</code></pre> <p>Monday=0, Sunday=6</p>"},{"location":"api/carbonic/#carbonic.Date.iso_week","title":"iso_week  <code>property</code>","text":"<pre><code>iso_week: tuple[int, int]\n</code></pre> <p>Return (year, week) tuple.</p>"},{"location":"api/carbonic/#carbonic.Date-functions","title":"Functions","text":""},{"location":"api/carbonic/#carbonic.Date.today","title":"today  <code>classmethod</code>","text":"<pre><code>today(tz: str | None = None) -&gt; Date\n</code></pre> <p>Create a Date instance for today.</p>"},{"location":"api/carbonic/#carbonic.Date.tomorrow","title":"tomorrow  <code>classmethod</code>","text":"<pre><code>tomorrow() -&gt; Date\n</code></pre> <p>Get tomorrow's date.</p> <p>Returns:</p> Type Description <code>Date</code> <p>Date object representing tomorrow</p>"},{"location":"api/carbonic/#carbonic.Date.yesterday","title":"yesterday  <code>classmethod</code>","text":"<pre><code>yesterday() -&gt; Date\n</code></pre> <p>Get yesterday's date.</p> <p>Returns:</p> Type Description <code>Date</code> <p>Date object representing yesterday</p>"},{"location":"api/carbonic/#carbonic.Date.next","title":"next  <code>classmethod</code>","text":"<pre><code>next(unit: str, count: int = 1) -&gt; Date\n</code></pre> <p>Get a date in the future relative to today.</p> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>str</code> <p>Time unit (\"day\", \"week\", \"month\", \"quarter\", \"year\")</p> required <code>count</code> <code>int</code> <p>Number of units to add (default: 1)</p> <code>1</code> <p>Returns:</p> Type Description <code>Date</code> <p>Date object in the future</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Date.next(\"day\")      # Tomorrow\n&gt;&gt;&gt; Date.next(\"week\", 2)  # 2 weeks from today\n&gt;&gt;&gt; Date.next(\"month\")    # Next month\n</code></pre>"},{"location":"api/carbonic/#carbonic.Date.previous","title":"previous  <code>classmethod</code>","text":"<pre><code>previous(unit: str, count: int = 1) -&gt; Date\n</code></pre> <p>Get a date in the past relative to today.</p> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>str</code> <p>Time unit (\"day\", \"week\", \"month\", \"quarter\", \"year\")</p> required <code>count</code> <code>int</code> <p>Number of units to subtract (default: 1)</p> <code>1</code> <p>Returns:</p> Type Description <code>Date</code> <p>Date object in the past</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Date.previous(\"day\")      # Yesterday\n&gt;&gt;&gt; Date.previous(\"week\", 2)  # 2 weeks ago\n&gt;&gt;&gt; Date.previous(\"month\")    # Last month\n</code></pre>"},{"location":"api/carbonic/#carbonic.Date.parse","title":"parse  <code>classmethod</code>","text":"<pre><code>parse(s: str, fmt: str | None = None) -&gt; Date\n</code></pre> <p>Parse a date string into a Date object.</p> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>str</code> <p>The date string to parse. Supports: - ISO date formats (2024-01-15) - Custom formats when fmt is provided</p> required <code>fmt</code> <code>str | None</code> <p>Optional format string. If None, auto-detect format. Supports both strftime (%Y-%m-%d) and Carbon (Y-m-d) formats.</p> <code>None</code> <p>Returns:</p> Type Description <code>Date</code> <p>Date object</p> <p>Raises:</p> Type Description <code>ParseError</code> <p>If the string cannot be parsed</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Date.parse(\"2024-01-15\")\n</code></pre>"},{"location":"api/carbonic/#carbonic.Date.from_date","title":"from_date  <code>classmethod</code>","text":"<pre><code>from_date(d: date) -&gt; Date\n</code></pre> <p>Create a Date instance from datetime.date.</p>"},{"location":"api/carbonic/#carbonic.Date.add","title":"add","text":"<pre><code>add(*, years: int = 0, months: int = 0, days: int = 0) -&gt; Date\n</code></pre> <p>Add years, months, and/or days to this date.</p>"},{"location":"api/carbonic/#carbonic.Date.subtract","title":"subtract","text":"<pre><code>subtract(*, years: int = 0, months: int = 0, days: int = 0) -&gt; Date\n</code></pre> <p>Subtract years, months, and/or days from this date.</p>"},{"location":"api/carbonic/#carbonic.Date.diff","title":"diff","text":"<pre><code>diff(other: Date, *, absolute: bool = False) -&gt; Duration\n</code></pre> <p>Calculate difference between this date and another date.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Date</code> <p>The other date to compare with</p> required <code>absolute</code> <code>bool</code> <p>If True, return absolute difference (always positive)</p> <code>False</code> <p>Returns:</p> Type Description <code>Duration</code> <p>Duration representing the difference</p>"},{"location":"api/carbonic/#carbonic.Date.add_duration","title":"add_duration","text":"<pre><code>add_duration(duration: Duration) -&gt; Date\n</code></pre> <p>Add a Duration to this Date.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>Duration</code> <p>The Duration to add</p> required <p>Returns:</p> Type Description <code>Date</code> <p>New Date with the duration added</p>"},{"location":"api/carbonic/#carbonic.Date.subtract_duration","title":"subtract_duration","text":"<pre><code>subtract_duration(duration: Duration) -&gt; Date\n</code></pre> <p>Subtract a Duration from this Date.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>Duration</code> <p>The Duration to subtract</p> required <p>Returns:</p> Type Description <code>Date</code> <p>New Date with the duration subtracted</p>"},{"location":"api/carbonic/#carbonic.Date.start_of","title":"start_of","text":"<pre><code>start_of(unit: Literal['day', 'month', 'year', 'quarter', 'week']) -&gt; Date\n</code></pre> <p>Return the start of the specified time period.</p>"},{"location":"api/carbonic/#carbonic.Date.end_of","title":"end_of","text":"<pre><code>end_of(unit: Literal['day', 'month', 'year', 'quarter', 'week']) -&gt; Date\n</code></pre> <p>Return the end of the specified time period.</p>"},{"location":"api/carbonic/#carbonic.Date.is_weekday","title":"is_weekday","text":"<pre><code>is_weekday() -&gt; bool\n</code></pre> <p>Return True if this date is a weekday (Monday-Friday).</p>"},{"location":"api/carbonic/#carbonic.Date.is_weekend","title":"is_weekend","text":"<pre><code>is_weekend() -&gt; bool\n</code></pre> <p>Return True if this date is a weekend (Saturday-Sunday).</p>"},{"location":"api/carbonic/#carbonic.Date.add_business_days","title":"add_business_days","text":"<pre><code>add_business_days(days: int) -&gt; Date\n</code></pre> <p>Add business days to this date, skipping weekends.</p> <p>Parameters:</p> Name Type Description Default <code>days</code> <code>int</code> <p>Number of business days to add (can be negative)</p> required <p>Returns:</p> Type Description <code>Date</code> <p>New Date with business days added</p> <p>Examples:</p> <p>Date(2023, 12, 25).add_business_days(1)  # Monday -&gt; Tuesday Date(2023, 12, 29).add_business_days(1)  # Friday -&gt; Monday (skip weekend)</p>"},{"location":"api/carbonic/#carbonic.Date.subtract_business_days","title":"subtract_business_days","text":"<pre><code>subtract_business_days(days: int) -&gt; Date\n</code></pre> <p>Subtract business days from this date, skipping weekends.</p> <p>Parameters:</p> Name Type Description Default <code>days</code> <code>int</code> <p>Number of business days to subtract (can be negative)</p> required <p>Returns:</p> Type Description <code>Date</code> <p>New Date with business days subtracted</p> <p>Examples:</p> <p>Date(2023, 12, 26).subtract_business_days(1)  # Tuesday -&gt; Monday Date(2024, 1, 1).subtract_business_days(1)    # Monday -&gt; Friday (skip weekend)</p>"},{"location":"api/carbonic/#carbonic.Date.to_datetime","title":"to_datetime","text":"<pre><code>to_datetime(tz: str | None = 'UTC') -&gt; datetime.datetime\n</code></pre> <p>Convert to datetime.datetime with timezone (default UTC).</p>"},{"location":"api/carbonic/#carbonic.Date.to_date","title":"to_date","text":"<pre><code>to_date() -&gt; datetime.date\n</code></pre> <p>Return a copy of the underlying datetime.date object.</p>"},{"location":"api/carbonic/#carbonic.Date.strftime","title":"strftime","text":"<pre><code>strftime(fmt: str) -&gt; str\n</code></pre> <p>Format date using strftime format string.</p>"},{"location":"api/carbonic/#carbonic.Date.format","title":"format","text":"<pre><code>format(fmt: str, *, locale: str | None = None) -&gt; str\n</code></pre> <p>Format date using Carbon-style format string.</p> <p>Parameters:</p> Name Type Description Default <code>fmt</code> <code>str</code> <p>Carbon-style format string</p> required <code>locale</code> <code>str | None</code> <p>Locale code for localized month/day names (default: English)</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>Formatted date string</p>"},{"location":"api/carbonic/#carbonic.Date.to_iso_string","title":"to_iso_string","text":"<pre><code>to_iso_string() -&gt; str\n</code></pre> <p>Return ISO date string (YYYY-MM-DD).</p>"},{"location":"api/carbonic/#carbonic.Date.to_datetime_string","title":"to_datetime_string","text":"<pre><code>to_datetime_string() -&gt; str\n</code></pre> <p>Return date with default time (YYYY-MM-DD 00:00:00).</p>"},{"location":"api/carbonic/#carbonic.Duration","title":"Duration  <code>dataclass</code>","text":"<pre><code>Duration(\n    *,\n    days: int = 0,\n    hours: int = 0,\n    minutes: int = 0,\n    seconds: int = 0,\n    microseconds: int = 0,\n    milliseconds: int = 0,\n    weeks: int = 0,\n    months: int = 0,\n    years: int = 0,\n)\n</code></pre> <p>Immutable duration object representing a span of time.</p> <p>Duration handles both calendar-aware components (months, years) and precise time components (days, hours, minutes, seconds, microseconds). All operations return new instances, maintaining immutability.</p> <p>Attributes:</p> Name Type Description <code>_days</code> <code>int</code> <p>Number of days (aligned with datetime.timedelta)</p> <code>_seconds</code> <code>int</code> <p>Number of seconds within the day (0-86399)</p> <code>_microseconds</code> <code>int</code> <p>Number of microseconds within the second (0-999999)</p> <code>_calendar_months</code> <code>int</code> <p>Calendar months component (for display/parsing)</p> <code>_calendar_years</code> <code>int</code> <p>Calendar years component (for display/parsing)</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; duration = Duration(hours=2, minutes=30)\n&gt;&gt;&gt; duration.total_seconds()\n9000.0\n</code></pre> <pre><code>&gt;&gt;&gt; long_duration = Duration(years=1, months=6, days=15)\n&gt;&gt;&gt; long_duration.humanize(max_units=3)\n'1 year 6 months 15 days'\n</code></pre> <p>Create a Duration from individual time components.</p>"},{"location":"api/carbonic/#carbonic.Duration-attributes","title":"Attributes","text":""},{"location":"api/carbonic/#carbonic.Duration.days","title":"days  <code>property</code>","text":"<pre><code>days: int\n</code></pre> <p>The number of days in this duration.</p> <p>Returns:</p> Type Description <code>int</code> <p>Number of days as integer</p>"},{"location":"api/carbonic/#carbonic.Duration.storage_seconds","title":"storage_seconds  <code>property</code>","text":"<pre><code>storage_seconds: int\n</code></pre> <p>Get seconds component of storage (0-86399, representing seconds within a day).</p> <p>Returns:</p> Type Description <code>int</code> <p>Seconds within the current day (internal storage format)</p>"},{"location":"api/carbonic/#carbonic.Duration.microseconds","title":"microseconds  <code>property</code>","text":"<pre><code>microseconds: int\n</code></pre> <p>The microseconds component of this duration.</p> <p>Returns:</p> Type Description <code>int</code> <p>Number of microseconds (0-999999)</p>"},{"location":"api/carbonic/#carbonic.Duration.milliseconds","title":"milliseconds  <code>property</code>","text":"<pre><code>milliseconds: int\n</code></pre> <p>Get milliseconds component.</p> <p>Returns:</p> Type Description <code>int</code> <p>Number of milliseconds derived from microseconds</p>"},{"location":"api/carbonic/#carbonic.Duration.hours","title":"hours  <code>property</code>","text":"<pre><code>hours: int\n</code></pre> <p>Get total hours for this duration (excluding calendar components).</p>"},{"location":"api/carbonic/#carbonic.Duration.weeks","title":"weeks  <code>property</code>","text":"<pre><code>weeks: int\n</code></pre> <p>Get total weeks for this duration.</p>"},{"location":"api/carbonic/#carbonic.Duration.months","title":"months  <code>property</code>","text":"<pre><code>months: int\n</code></pre> <p>Get calendar months component (for display purposes only).</p>"},{"location":"api/carbonic/#carbonic.Duration.years","title":"years  <code>property</code>","text":"<pre><code>years: int\n</code></pre> <p>Get calendar years component (for display purposes only).</p>"},{"location":"api/carbonic/#carbonic.Duration-functions","title":"Functions","text":""},{"location":"api/carbonic/#carbonic.Duration.parse","title":"parse  <code>classmethod</code>","text":"<pre><code>parse(s: str) -&gt; Duration\n</code></pre> <p>Parse ISO 8601 duration string or custom format.</p> <p>Supports the following ISO 8601 duration formats: - P[n]Y[n]M[n]DT[n]H[n]M[n]S (full format) - P[n]Y[n]M[n]D (date only) - PT[n]H[n]M[n]S (time only) - P[n]W (weeks) - -P... (negative durations)</p> <p>Examples:</p> <p>Duration.parse(\"P1Y2M3DT4H5M6S\")  # 1 year, 2 months, 3 days, 4 hours, 5 minutes, 6 seconds Duration.parse(\"PT2H30M\")         # 2 hours, 30 minutes Duration.parse(\"P2W\")             # 2 weeks Duration.parse(\"-P1DT2H\")         # negative 1 day, 2 hours</p>"},{"location":"api/carbonic/#carbonic.Duration.total_seconds","title":"total_seconds","text":"<pre><code>total_seconds() -&gt; float\n</code></pre> <p>Get total seconds for this duration (excluding calendar components).</p> <p>Returns:</p> Type Description <code>float</code> <p>Total number of seconds as float, including fractional seconds</p> <code>float</code> <p>from microseconds. Calendar components (months, years) are not</p> <code>float</code> <p>included as they have variable length.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; duration = Duration(hours=2, minutes=30, seconds=15)\n&gt;&gt;&gt; duration.total_seconds()\n9015.0\n</code></pre>"},{"location":"api/carbonic/#carbonic.Duration.in_seconds","title":"in_seconds","text":"<pre><code>in_seconds(*, whole: Literal[True]) -&gt; int\n</code></pre><pre><code>in_seconds(*, whole: Literal[False] = False) -&gt; float\n</code></pre> <pre><code>in_seconds(*, whole: bool = False) -&gt; int | float\n</code></pre> <p>Get total duration expressed as seconds.</p> <p>Parameters:</p> Name Type Description Default <code>whole</code> <code>bool</code> <p>If True, return integer (floor). If False, return float.</p> <code>False</code>"},{"location":"api/carbonic/#carbonic.Duration.in_minutes","title":"in_minutes","text":"<pre><code>in_minutes(*, whole: Literal[True]) -&gt; int\n</code></pre><pre><code>in_minutes(*, whole: Literal[False] = False) -&gt; float\n</code></pre> <pre><code>in_minutes(*, whole: bool = False) -&gt; int | float\n</code></pre> <p>Get total duration expressed as minutes.</p> <p>Parameters:</p> Name Type Description Default <code>whole</code> <code>bool</code> <p>If True, return integer (floor). If False, return float.</p> <code>False</code>"},{"location":"api/carbonic/#carbonic.Duration.in_hours","title":"in_hours","text":"<pre><code>in_hours(*, whole: Literal[True]) -&gt; int\n</code></pre><pre><code>in_hours(*, whole: Literal[False] = False) -&gt; float\n</code></pre> <pre><code>in_hours(*, whole: bool = False) -&gt; int | float\n</code></pre> <p>Get total duration expressed as hours.</p> <p>Parameters:</p> Name Type Description Default <code>whole</code> <code>bool</code> <p>If True, return integer (floor). If False, return float.</p> <code>False</code>"},{"location":"api/carbonic/#carbonic.Duration.in_days","title":"in_days","text":"<pre><code>in_days(*, whole: Literal[True]) -&gt; int\n</code></pre><pre><code>in_days(*, whole: Literal[False] = False) -&gt; float\n</code></pre> <pre><code>in_days(*, whole: bool = False) -&gt; int | float\n</code></pre> <p>Get total duration expressed as days.</p> <p>Parameters:</p> Name Type Description Default <code>whole</code> <code>bool</code> <p>If True, return integer (floor). If False, return float.</p> <code>False</code>"},{"location":"api/carbonic/#carbonic.Duration.in_weeks","title":"in_weeks","text":"<pre><code>in_weeks(*, whole: Literal[True]) -&gt; int\n</code></pre><pre><code>in_weeks(*, whole: Literal[False] = False) -&gt; float\n</code></pre> <pre><code>in_weeks(*, whole: bool = False) -&gt; int | float\n</code></pre> <p>Get total duration expressed as weeks.</p> <p>Parameters:</p> Name Type Description Default <code>whole</code> <code>bool</code> <p>If True, return integer (floor). If False, return float.</p> <code>False</code>"},{"location":"api/carbonic/#carbonic.Duration.in_milliseconds","title":"in_milliseconds","text":"<pre><code>in_milliseconds(*, whole: Literal[True]) -&gt; int\n</code></pre><pre><code>in_milliseconds(*, whole: Literal[False] = False) -&gt; float\n</code></pre> <pre><code>in_milliseconds(*, whole: bool = False) -&gt; int | float\n</code></pre> <p>Get total duration expressed as milliseconds.</p> <p>Parameters:</p> Name Type Description Default <code>whole</code> <code>bool</code> <p>If True, return integer (floor). If False, return float.</p> <code>False</code>"},{"location":"api/carbonic/#carbonic.Duration.in_microseconds","title":"in_microseconds","text":"<pre><code>in_microseconds(*, whole: Literal[True]) -&gt; int\n</code></pre><pre><code>in_microseconds(*, whole: Literal[False] = False) -&gt; float\n</code></pre> <pre><code>in_microseconds(*, whole: bool = False) -&gt; int | float\n</code></pre> <p>Get total duration expressed as microseconds.</p> <p>Parameters:</p> Name Type Description Default <code>whole</code> <code>bool</code> <p>If True, return integer (floor). If False, return float.</p> <code>False</code>"},{"location":"api/carbonic/#carbonic.Duration.humanize","title":"humanize","text":"<pre><code>humanize(*, max_units: int = 2, locale: str | None = None) -&gt; str\n</code></pre> <p>Return human-readable duration string.</p> <p>Parameters:</p> Name Type Description Default <code>max_units</code> <code>int</code> <p>Maximum number of time units to display (default: 2)</p> <code>2</code> <code>locale</code> <code>str | None</code> <p>Locale for localization (default: None for English)</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>Human-readable string like \"2 days 3 hours\" or \"1 year 6 months\"</p> <p>Examples:</p> <p>Duration(days=2, hours=3).humanize()  # \"2 days 3 hours\" Duration(minutes=90).humanize(max_units=1)  # \"1 hour\" Duration(seconds=45).humanize(locale=\"pl\")  # \"45 sekund\" (if implemented)</p>"},{"location":"api/carbonic/#carbonic.Period","title":"Period  <code>dataclass</code>","text":"<pre><code>Period(\n    name: str,\n    _type: Literal[\"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\"],\n)\n</code></pre> <p>Represents a named time period for semantic datetime operations.</p> <p>Provides named constants like Period.DAY, Period.MONTH, etc. for more readable and semantic datetime arithmetic operations.</p> <p>Examples:</p> <p>Period.MONTH.add_to(date)           # Add 1 month to date Period.WEEK.subtract_from(date)     # Subtract 1 week from date Period.QUARTER.start_of(date)       # Start of current quarter Period.YEAR.end_of(date)            # End of current year Period.DAY.add_to(date, count=5)    # Add 5 days to date</p>"},{"location":"api/carbonic/#carbonic.Period-functions","title":"Functions","text":""},{"location":"api/carbonic/#carbonic.Period.add_to","title":"add_to","text":"<pre><code>add_to(dt: Date | DateTime, *, count: int = 1) -&gt; Date | DateTime\n</code></pre> <p>Add this period to a Date or DateTime.</p> <p>Parameters:</p> Name Type Description Default <code>dt</code> <code>Date | DateTime</code> <p>The Date or DateTime to add to</p> required <code>count</code> <code>int</code> <p>Number of periods to add (default: 1)</p> <code>1</code> <p>Returns:</p> Type Description <code>Date | DateTime</code> <p>New Date or DateTime with the period added</p>"},{"location":"api/carbonic/#carbonic.Period.subtract_from","title":"subtract_from","text":"<pre><code>subtract_from(dt: Date | DateTime, *, count: int = 1) -&gt; Date | DateTime\n</code></pre> <p>Subtract this period from a Date or DateTime.</p> <p>Parameters:</p> Name Type Description Default <code>dt</code> <code>Date | DateTime</code> <p>The Date or DateTime to subtract from</p> required <code>count</code> <code>int</code> <p>Number of periods to subtract (default: 1)</p> <code>1</code> <p>Returns:</p> Type Description <code>Date | DateTime</code> <p>New Date or DateTime with the period subtracted</p>"},{"location":"api/carbonic/#carbonic.Period.start_of","title":"start_of","text":"<pre><code>start_of(dt: Date | DateTime) -&gt; Date | DateTime\n</code></pre> <p>Get the start of this period for the given date/datetime.</p> <p>Parameters:</p> Name Type Description Default <code>dt</code> <code>Date | DateTime</code> <p>The Date or DateTime to get the period start for</p> required <p>Returns:</p> Type Description <code>Date | DateTime</code> <p>New Date or DateTime at the start of the period</p>"},{"location":"api/carbonic/#carbonic.Period.end_of","title":"end_of","text":"<pre><code>end_of(dt: Date | DateTime) -&gt; Date | DateTime\n</code></pre> <p>Get the end of this period for the given date/datetime.</p> <p>Parameters:</p> Name Type Description Default <code>dt</code> <code>Date | DateTime</code> <p>The Date or DateTime to get the period end for</p> required <p>Returns:</p> Type Description <code>Date | DateTime</code> <p>New Date or DateTime at the end of the period</p>"},{"location":"api/carbonic/#carbonic.Interval","title":"Interval  <code>dataclass</code>","text":"<pre><code>Interval(start: Date | DateTime, end: Date | DateTime)\n</code></pre> <p>Represents a time interval with start and end points.</p> <p>Intervals are half-open: [start, end) - inclusive start, exclusive end. Supports both Date and DateTime intervals with comprehensive operations.</p> <p>Examples:</p>"},{"location":"api/carbonic/#carbonic.Interval--create-intervals","title":"Create intervals","text":"<p>meeting = Interval(start=DateTime(2024, 1, 15, 9, 0), end=DateTime(2024, 1, 15, 10, 30)) vacation = Interval(start=Date(2024, 7, 1), end=Date(2024, 7, 15))</p>"},{"location":"api/carbonic/#carbonic.Interval--operations","title":"Operations","text":"<p>meeting.contains(DateTime(2024, 1, 15, 9, 30))  # True meeting.overlaps(lunch_interval)                # True/False meeting.intersection(lunch_interval)            # Overlapping part meeting.union(lunch_interval)                   # Combined intervals meeting.duration()                              # Duration object</p>"},{"location":"api/carbonic/#carbonic.Interval-functions","title":"Functions","text":""},{"location":"api/carbonic/#carbonic.Interval.duration","title":"duration","text":"<pre><code>duration() -&gt; Duration\n</code></pre> <p>Get the Duration of this interval.</p> <p>Returns:</p> Type Description <code>Duration</code> <p>Duration object representing the time span</p>"},{"location":"api/carbonic/#carbonic.Interval.is_empty","title":"is_empty","text":"<pre><code>is_empty() -&gt; bool\n</code></pre> <p>Check if this interval is empty (zero duration).</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if start == end, False otherwise</p>"},{"location":"api/carbonic/#carbonic.Interval.contains","title":"contains","text":"<pre><code>contains(point: Date | DateTime) -&gt; bool\n</code></pre> <p>Check if this interval contains a time point.</p> <p>Uses half-open interval logic: [start, end) - start is inclusive - end is exclusive</p> <p>Parameters:</p> Name Type Description Default <code>point</code> <code>Date | DateTime</code> <p>Date or DateTime to check</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if point is within the interval</p>"},{"location":"api/carbonic/#carbonic.Interval.overlaps","title":"overlaps","text":"<pre><code>overlaps(other: Interval) -&gt; bool\n</code></pre> <p>Check if this interval overlaps with another interval.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Interval</code> <p>Another Interval to check</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if intervals overlap, False otherwise</p>"},{"location":"api/carbonic/#carbonic.Interval.intersection","title":"intersection","text":"<pre><code>intersection(other: Interval) -&gt; Interval | None\n</code></pre> <p>Get the intersection (overlapping part) of two intervals.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Interval</code> <p>Another Interval to intersect with</p> required <p>Returns:</p> Type Description <code>Interval | None</code> <p>Interval representing the overlap, or None if no overlap</p>"},{"location":"api/carbonic/#carbonic.Interval.union","title":"union","text":"<pre><code>union(other: Interval) -&gt; Interval | list[Interval]\n</code></pre> <p>Get the union of two intervals.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Interval</code> <p>Another Interval to union with</p> required <p>Returns:</p> Type Description <code>Interval | list[Interval]</code> <p>Single Interval if they overlap or are adjacent,</p> <code>Interval | list[Interval]</code> <p>List of Intervals if they are separate</p>"},{"location":"api/carbonic/#carbonic-functions","title":"Functions","text":""},{"location":"api/carbonic/#carbonic.now","title":"now","text":"<pre><code>now(tz: str | None = 'UTC') -&gt; DateTime\n</code></pre> <p>Create a DateTime instance for the current moment.</p>"},{"location":"api/carbonic/#carbonic.today","title":"today","text":"<pre><code>today(tz: str | None = None) -&gt; Date\n</code></pre> <p>Create a Date instance for today.</p>"},{"location":"api/date/","title":"Date","text":"<p>The Date class provides date-only operations without time components.</p>"},{"location":"api/date/#carbonic.core.date.Date","title":"carbonic.core.date.Date  <code>dataclass</code>","text":"<pre><code>Date(year: int, month: int, day: int)\n</code></pre> <p>Immutable date object with fluent API and comprehensive date operations.</p> <p>The Date class provides a modern, type-safe wrapper around Python's date with additional functionality for date manipulation and formatting. All operations return new instances, maintaining immutability.</p> <p>Attributes:</p> Name Type Description <code>_date</code> <code>date</code> <p>Internal datetime.date object storing the actual date value</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; date = Date(2024, 1, 15)\n&gt;&gt;&gt; date.add(days=10).format(\"Y-m-d\")\n'2024-01-25'\n</code></pre> <pre><code>&gt;&gt;&gt; today = Date.today()\n&gt;&gt;&gt; today.start_of(\"month\").format(\"F j, Y\")\n'January 1, 2024'\n</code></pre> <p>Initialize a new Date instance.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int</code> <p>Year (e.g., 2024)</p> required <code>month</code> <code>int</code> <p>Month (1-12)</p> required <code>day</code> <code>int</code> <p>Day of month (1-31)</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If any date component is invalid</p>"},{"location":"api/date/#carbonic.core.date.Date-attributes","title":"Attributes","text":""},{"location":"api/date/#carbonic.core.date.Date.weekday","title":"weekday  <code>property</code>","text":"<pre><code>weekday: int\n</code></pre> <p>Monday=0, Sunday=6</p>"},{"location":"api/date/#carbonic.core.date.Date.iso_week","title":"iso_week  <code>property</code>","text":"<pre><code>iso_week: tuple[int, int]\n</code></pre> <p>Return (year, week) tuple.</p>"},{"location":"api/date/#carbonic.core.date.Date-functions","title":"Functions","text":""},{"location":"api/date/#carbonic.core.date.Date.today","title":"today  <code>classmethod</code>","text":"<pre><code>today(tz: str | None = None) -&gt; Date\n</code></pre> <p>Create a Date instance for today.</p>"},{"location":"api/date/#carbonic.core.date.Date.tomorrow","title":"tomorrow  <code>classmethod</code>","text":"<pre><code>tomorrow() -&gt; Date\n</code></pre> <p>Get tomorrow's date.</p> <p>Returns:</p> Type Description <code>Date</code> <p>Date object representing tomorrow</p>"},{"location":"api/date/#carbonic.core.date.Date.yesterday","title":"yesterday  <code>classmethod</code>","text":"<pre><code>yesterday() -&gt; Date\n</code></pre> <p>Get yesterday's date.</p> <p>Returns:</p> Type Description <code>Date</code> <p>Date object representing yesterday</p>"},{"location":"api/date/#carbonic.core.date.Date.next","title":"next  <code>classmethod</code>","text":"<pre><code>next(unit: str, count: int = 1) -&gt; Date\n</code></pre> <p>Get a date in the future relative to today.</p> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>str</code> <p>Time unit (\"day\", \"week\", \"month\", \"quarter\", \"year\")</p> required <code>count</code> <code>int</code> <p>Number of units to add (default: 1)</p> <code>1</code> <p>Returns:</p> Type Description <code>Date</code> <p>Date object in the future</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Date.next(\"day\")      # Tomorrow\n&gt;&gt;&gt; Date.next(\"week\", 2)  # 2 weeks from today\n&gt;&gt;&gt; Date.next(\"month\")    # Next month\n</code></pre>"},{"location":"api/date/#carbonic.core.date.Date.previous","title":"previous  <code>classmethod</code>","text":"<pre><code>previous(unit: str, count: int = 1) -&gt; Date\n</code></pre> <p>Get a date in the past relative to today.</p> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>str</code> <p>Time unit (\"day\", \"week\", \"month\", \"quarter\", \"year\")</p> required <code>count</code> <code>int</code> <p>Number of units to subtract (default: 1)</p> <code>1</code> <p>Returns:</p> Type Description <code>Date</code> <p>Date object in the past</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Date.previous(\"day\")      # Yesterday\n&gt;&gt;&gt; Date.previous(\"week\", 2)  # 2 weeks ago\n&gt;&gt;&gt; Date.previous(\"month\")    # Last month\n</code></pre>"},{"location":"api/date/#carbonic.core.date.Date.parse","title":"parse  <code>classmethod</code>","text":"<pre><code>parse(s: str, fmt: str | None = None) -&gt; Date\n</code></pre> <p>Parse a date string into a Date object.</p> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>str</code> <p>The date string to parse. Supports: - ISO date formats (2024-01-15) - Custom formats when fmt is provided</p> required <code>fmt</code> <code>str | None</code> <p>Optional format string. If None, auto-detect format. Supports both strftime (%Y-%m-%d) and Carbon (Y-m-d) formats.</p> <code>None</code> <p>Returns:</p> Type Description <code>Date</code> <p>Date object</p> <p>Raises:</p> Type Description <code>ParseError</code> <p>If the string cannot be parsed</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Date.parse(\"2024-01-15\")\n</code></pre>"},{"location":"api/date/#carbonic.core.date.Date.from_date","title":"from_date  <code>classmethod</code>","text":"<pre><code>from_date(d: date) -&gt; Date\n</code></pre> <p>Create a Date instance from datetime.date.</p>"},{"location":"api/date/#carbonic.core.date.Date.add","title":"add","text":"<pre><code>add(*, years: int = 0, months: int = 0, days: int = 0) -&gt; Date\n</code></pre> <p>Add years, months, and/or days to this date.</p>"},{"location":"api/date/#carbonic.core.date.Date.subtract","title":"subtract","text":"<pre><code>subtract(*, years: int = 0, months: int = 0, days: int = 0) -&gt; Date\n</code></pre> <p>Subtract years, months, and/or days from this date.</p>"},{"location":"api/date/#carbonic.core.date.Date.diff","title":"diff","text":"<pre><code>diff(other: Date, *, absolute: bool = False) -&gt; Duration\n</code></pre> <p>Calculate difference between this date and another date.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Date</code> <p>The other date to compare with</p> required <code>absolute</code> <code>bool</code> <p>If True, return absolute difference (always positive)</p> <code>False</code> <p>Returns:</p> Type Description <code>Duration</code> <p>Duration representing the difference</p>"},{"location":"api/date/#carbonic.core.date.Date.add_duration","title":"add_duration","text":"<pre><code>add_duration(duration: Duration) -&gt; Date\n</code></pre> <p>Add a Duration to this Date.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>Duration</code> <p>The Duration to add</p> required <p>Returns:</p> Type Description <code>Date</code> <p>New Date with the duration added</p>"},{"location":"api/date/#carbonic.core.date.Date.subtract_duration","title":"subtract_duration","text":"<pre><code>subtract_duration(duration: Duration) -&gt; Date\n</code></pre> <p>Subtract a Duration from this Date.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>Duration</code> <p>The Duration to subtract</p> required <p>Returns:</p> Type Description <code>Date</code> <p>New Date with the duration subtracted</p>"},{"location":"api/date/#carbonic.core.date.Date.start_of","title":"start_of","text":"<pre><code>start_of(unit: Literal['day', 'month', 'year', 'quarter', 'week']) -&gt; Date\n</code></pre> <p>Return the start of the specified time period.</p>"},{"location":"api/date/#carbonic.core.date.Date.end_of","title":"end_of","text":"<pre><code>end_of(unit: Literal['day', 'month', 'year', 'quarter', 'week']) -&gt; Date\n</code></pre> <p>Return the end of the specified time period.</p>"},{"location":"api/date/#carbonic.core.date.Date.is_weekday","title":"is_weekday","text":"<pre><code>is_weekday() -&gt; bool\n</code></pre> <p>Return True if this date is a weekday (Monday-Friday).</p>"},{"location":"api/date/#carbonic.core.date.Date.is_weekend","title":"is_weekend","text":"<pre><code>is_weekend() -&gt; bool\n</code></pre> <p>Return True if this date is a weekend (Saturday-Sunday).</p>"},{"location":"api/date/#carbonic.core.date.Date.add_business_days","title":"add_business_days","text":"<pre><code>add_business_days(days: int) -&gt; Date\n</code></pre> <p>Add business days to this date, skipping weekends.</p> <p>Parameters:</p> Name Type Description Default <code>days</code> <code>int</code> <p>Number of business days to add (can be negative)</p> required <p>Returns:</p> Type Description <code>Date</code> <p>New Date with business days added</p> <p>Examples:</p> <p>Date(2023, 12, 25).add_business_days(1)  # Monday -&gt; Tuesday Date(2023, 12, 29).add_business_days(1)  # Friday -&gt; Monday (skip weekend)</p>"},{"location":"api/date/#carbonic.core.date.Date.subtract_business_days","title":"subtract_business_days","text":"<pre><code>subtract_business_days(days: int) -&gt; Date\n</code></pre> <p>Subtract business days from this date, skipping weekends.</p> <p>Parameters:</p> Name Type Description Default <code>days</code> <code>int</code> <p>Number of business days to subtract (can be negative)</p> required <p>Returns:</p> Type Description <code>Date</code> <p>New Date with business days subtracted</p> <p>Examples:</p> <p>Date(2023, 12, 26).subtract_business_days(1)  # Tuesday -&gt; Monday Date(2024, 1, 1).subtract_business_days(1)    # Monday -&gt; Friday (skip weekend)</p>"},{"location":"api/date/#carbonic.core.date.Date.to_datetime","title":"to_datetime","text":"<pre><code>to_datetime(tz: str | None = 'UTC') -&gt; datetime.datetime\n</code></pre> <p>Convert to datetime.datetime with timezone (default UTC).</p>"},{"location":"api/date/#carbonic.core.date.Date.to_date","title":"to_date","text":"<pre><code>to_date() -&gt; datetime.date\n</code></pre> <p>Return a copy of the underlying datetime.date object.</p>"},{"location":"api/date/#carbonic.core.date.Date.strftime","title":"strftime","text":"<pre><code>strftime(fmt: str) -&gt; str\n</code></pre> <p>Format date using strftime format string.</p>"},{"location":"api/date/#carbonic.core.date.Date.format","title":"format","text":"<pre><code>format(fmt: str, *, locale: str | None = None) -&gt; str\n</code></pre> <p>Format date using Carbon-style format string.</p> <p>Parameters:</p> Name Type Description Default <code>fmt</code> <code>str</code> <p>Carbon-style format string</p> required <code>locale</code> <code>str | None</code> <p>Locale code for localized month/day names (default: English)</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>Formatted date string</p>"},{"location":"api/date/#carbonic.core.date.Date.to_iso_string","title":"to_iso_string","text":"<pre><code>to_iso_string() -&gt; str\n</code></pre> <p>Return ISO date string (YYYY-MM-DD).</p>"},{"location":"api/date/#carbonic.core.date.Date.to_datetime_string","title":"to_datetime_string","text":"<pre><code>to_datetime_string() -&gt; str\n</code></pre> <p>Return date with default time (YYYY-MM-DD 00:00:00).</p>"},{"location":"api/datetime/","title":"DateTime","text":"<p>The DateTime class provides comprehensive datetime functionality with timezone support.</p>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime","title":"carbonic.core.datetime.DateTime  <code>dataclass</code>","text":"<pre><code>DateTime(\n    year: int,\n    month: int,\n    day: int,\n    hour: int = 0,\n    minute: int = 0,\n    second: int = 0,\n    microsecond: int = 0,\n    tz: str | None = \"UTC\",\n)\n</code></pre> <p>Immutable datetime object with fluent API and timezone support.</p> <p>The DateTime class provides a modern, type-safe wrapper around Python's datetime with comprehensive datetime manipulation. All operations return new instances, maintaining immutability.</p> <p>Attributes:</p> Name Type Description <code>_dt</code> <code>datetime</code> <p>Internal datetime.datetime object storing the actual datetime value</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dt = DateTime(2024, 1, 15, 14, 30, 0, tz=\"UTC\")\n&gt;&gt;&gt; dt.add(hours=2).format(\"Y-m-d H:i:s\")\n'2024-01-15 16:30:00'\n</code></pre> <pre><code>&gt;&gt;&gt; now = DateTime.now(\"America/New_York\")\n&gt;&gt;&gt; now.to_date_string()\n'2024-01-15'\n</code></pre> <p>Initialize a new DateTime instance.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int</code> <p>Year (e.g., 2024)</p> required <code>month</code> <code>int</code> <p>Month (1-12)</p> required <code>day</code> <code>int</code> <p>Day of month (1-31)</p> required <code>hour</code> <code>int</code> <p>Hour (0-23, default: 0)</p> <code>0</code> <code>minute</code> <code>int</code> <p>Minute (0-59, default: 0)</p> <code>0</code> <code>second</code> <code>int</code> <p>Second (0-59, default: 0)</p> <code>0</code> <code>microsecond</code> <code>int</code> <p>Microsecond (0-999999, default: 0)</p> <code>0</code> <code>tz</code> <code>str | None</code> <p>Timezone string (default: \"UTC\", None for naive datetime)</p> <code>'UTC'</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If any datetime component is invalid</p> <code>ZoneInfoNotFoundError</code> <p>If timezone string is invalid</p>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime-attributes","title":"Attributes","text":""},{"location":"api/datetime/#carbonic.core.datetime.DateTime.year","title":"year  <code>property</code>","text":"<pre><code>year: int\n</code></pre> <p>The year component (e.g., 2024).</p>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.month","title":"month  <code>property</code>","text":"<pre><code>month: int\n</code></pre> <p>The month component (1-12).</p>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.day","title":"day  <code>property</code>","text":"<pre><code>day: int\n</code></pre> <p>The day of month component (1-31).</p>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.hour","title":"hour  <code>property</code>","text":"<pre><code>hour: int\n</code></pre> <p>The hour component (0-23).</p>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.minute","title":"minute  <code>property</code>","text":"<pre><code>minute: int\n</code></pre> <p>The minute component (0-59).</p>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.second","title":"second  <code>property</code>","text":"<pre><code>second: int\n</code></pre> <p>The second component (0-59).</p>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.microsecond","title":"microsecond  <code>property</code>","text":"<pre><code>microsecond: int\n</code></pre> <p>The microsecond component (0-999999).</p>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.tzinfo","title":"tzinfo  <code>property</code>","text":"<pre><code>tzinfo: tzinfo | None\n</code></pre> <p>The timezone info, or None for naive datetime.</p>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime-functions","title":"Functions","text":""},{"location":"api/datetime/#carbonic.core.datetime.DateTime.now","title":"now  <code>classmethod</code>","text":"<pre><code>now(tz: str | None = 'UTC') -&gt; DateTime\n</code></pre> <p>Create a DateTime instance for the current moment.</p> <p>Parameters:</p> Name Type Description Default <code>tz</code> <code>str | None</code> <p>Timezone string (default: \"UTC\", None for system local time)</p> <code>'UTC'</code> <p>Returns:</p> Type Description <code>DateTime</code> <p>DateTime instance representing the current moment</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DateTime.now()  # Current time in UTC\n&gt;&gt;&gt; DateTime.now(\"America/New_York\")  # Current time in NY timezone\n&gt;&gt;&gt; DateTime.now(None)  # Current local time (naive)\n</code></pre>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.today","title":"today  <code>classmethod</code>","text":"<pre><code>today(tz: str | None = 'UTC') -&gt; DateTime\n</code></pre> <p>Get the current date at 00:00:00 in the specified timezone.</p> <p>Parameters:</p> Name Type Description Default <code>tz</code> <code>str | None</code> <p>Timezone string (default: \"UTC\")</p> <code>'UTC'</code> <p>Returns:</p> Type Description <code>DateTime</code> <p>DateTime object representing today at midnight</p>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.tomorrow","title":"tomorrow  <code>classmethod</code>","text":"<pre><code>tomorrow(tz: str | None = 'UTC') -&gt; DateTime\n</code></pre> <p>Get tomorrow's date at 00:00:00 in the specified timezone.</p> <p>Parameters:</p> Name Type Description Default <code>tz</code> <code>str | None</code> <p>Timezone string (default: \"UTC\")</p> <code>'UTC'</code> <p>Returns:</p> Type Description <code>DateTime</code> <p>DateTime object representing tomorrow at midnight</p>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.yesterday","title":"yesterday  <code>classmethod</code>","text":"<pre><code>yesterday(tz: str | None = 'UTC') -&gt; DateTime\n</code></pre> <p>Get yesterday's date at 00:00:00 in the specified timezone.</p> <p>Parameters:</p> Name Type Description Default <code>tz</code> <code>str | None</code> <p>Timezone string (default: \"UTC\")</p> <code>'UTC'</code> <p>Returns:</p> Type Description <code>DateTime</code> <p>DateTime object representing yesterday at midnight</p>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.next","title":"next  <code>classmethod</code>","text":"<pre><code>next(unit: str, count: int = 1, tz: str | None = 'UTC') -&gt; DateTime\n</code></pre> <p>Get a datetime in the future relative to now.</p> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>str</code> <p>Time unit (\"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\")</p> required <code>count</code> <code>int</code> <p>Number of units to add (default: 1)</p> <code>1</code> <code>tz</code> <code>str | None</code> <p>Timezone string (default: \"UTC\")</p> <code>'UTC'</code> <p>Returns:</p> Type Description <code>DateTime</code> <p>DateTime object in the future</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DateTime.next(\"day\")      # Tomorrow\n&gt;&gt;&gt; DateTime.next(\"week\", 2)  # 2 weeks from now\n&gt;&gt;&gt; DateTime.next(\"month\")    # Next month\n</code></pre>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.previous","title":"previous  <code>classmethod</code>","text":"<pre><code>previous(unit: str, count: int = 1, tz: str | None = 'UTC') -&gt; DateTime\n</code></pre> <p>Get a datetime in the past relative to now.</p> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>str</code> <p>Time unit (\"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\")</p> required <code>count</code> <code>int</code> <p>Number of units to subtract (default: 1)</p> <code>1</code> <code>tz</code> <code>str | None</code> <p>Timezone string (default: \"UTC\")</p> <code>'UTC'</code> <p>Returns:</p> Type Description <code>DateTime</code> <p>DateTime object in the past</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DateTime.previous(\"day\")      # Yesterday\n&gt;&gt;&gt; DateTime.previous(\"week\", 2)  # 2 weeks ago\n&gt;&gt;&gt; DateTime.previous(\"month\")    # Last month\n</code></pre>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.parse","title":"parse  <code>classmethod</code>","text":"<pre><code>parse(s: str, fmt: str | None = None, tz: str | None = None) -&gt; DateTime\n</code></pre> <p>Parse a datetime string into a DateTime object.</p> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>str</code> <p>The datetime string to parse. Supports: - ISO 8601 formats (2024-01-15T14:30:00Z) - Custom formats when fmt is provided</p> required <code>fmt</code> <code>str | None</code> <p>Optional format string. If None, auto-detect format. Supports both strftime (%Y-%m-%d %H:%M:%S) and Carbon (Y-m-d H:i:s) formats.</p> <code>None</code> <code>tz</code> <code>str | None</code> <p>Optional timezone. If provided, applies to naive parsed datetimes.</p> <code>None</code> <p>Returns:</p> Type Description <code>DateTime</code> <p>DateTime object</p> <p>Raises:</p> Type Description <code>ParseError</code> <p>If the string cannot be parsed</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DateTime.parse(\"2024-01-15T14:30:00Z\")\n</code></pre>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.strftime","title":"strftime","text":"<pre><code>strftime(fmt: str) -&gt; str\n</code></pre> <p>Format datetime using strftime format string.</p>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.format","title":"format","text":"<pre><code>format(fmt: str, *, locale: str | None = None) -&gt; str\n</code></pre> <p>Format datetime using Carbon-style format string.</p> <p>Parameters:</p> Name Type Description Default <code>fmt</code> <code>str</code> <p>Carbon-style format string</p> required <code>locale</code> <code>str | None</code> <p>Locale code for localized month/day names (default: English)</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>Formatted datetime string</p>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.to_iso_string","title":"to_iso_string","text":"<pre><code>to_iso_string() -&gt; str\n</code></pre> <p>Return ISO 8601 string (2025-09-23T14:30:45+00:00).</p> <p>Returns:</p> Type Description <code>str</code> <p>ISO 8601 formatted datetime string with timezone</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dt = DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")\n&gt;&gt;&gt; dt.to_iso_string()\n'2024-01-15T14:30:00+00:00'\n</code></pre>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.to_date_string","title":"to_date_string","text":"<pre><code>to_date_string() -&gt; str\n</code></pre> <p>Return date string (2025-09-23).</p> <p>Returns:</p> Type Description <code>str</code> <p>Date portion formatted as YYYY-MM-DD</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dt = DateTime(2024, 1, 15, 14, 30)\n&gt;&gt;&gt; dt.to_date_string()\n'2024-01-15'\n</code></pre>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.to_time_string","title":"to_time_string","text":"<pre><code>to_time_string() -&gt; str\n</code></pre> <p>Return time string (14:30:45).</p> <p>Returns:</p> Type Description <code>str</code> <p>Time portion formatted as HH:MM:SS</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dt = DateTime(2024, 1, 15, 14, 30, 45)\n&gt;&gt;&gt; dt.to_time_string()\n'14:30:45'\n</code></pre>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.to_datetime_string","title":"to_datetime_string","text":"<pre><code>to_datetime_string() -&gt; str\n</code></pre> <p>Return datetime string (2025-09-23 14:30:45).</p> <p>Returns:</p> Type Description <code>str</code> <p>Datetime formatted as YYYY-MM-DD HH:MM:SS (no timezone)</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dt = DateTime(2024, 1, 15, 14, 30, 45)\n&gt;&gt;&gt; dt.to_datetime_string()\n'2024-01-15 14:30:45'\n</code></pre>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.to_atom_string","title":"to_atom_string","text":"<pre><code>to_atom_string() -&gt; str\n</code></pre> <p>Return Atom/RSS datetime string (ISO 8601).</p> <p>Returns:</p> Type Description <code>str</code> <p>ISO 8601 formatted string suitable for Atom/RSS feeds</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dt = DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")\n&gt;&gt;&gt; dt.to_atom_string()\n'2024-01-15T14:30:00+00:00'\n</code></pre>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.to_cookie_string","title":"to_cookie_string","text":"<pre><code>to_cookie_string() -&gt; str\n</code></pre> <p>Return cookie datetime string (Tue, 23-Sep-2025 14:30:45 UTC).</p> <p>Returns:</p> Type Description <code>str</code> <p>Cookie-compatible datetime string format</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dt = DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")\n&gt;&gt;&gt; dt.to_cookie_string()\n'Mon, 15-Jan-2024 14:30:00 UTC'\n</code></pre>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.from_datetime","title":"from_datetime  <code>classmethod</code>","text":"<pre><code>from_datetime(dt: datetime) -&gt; DateTime\n</code></pre> <p>Create a DateTime from a standard Python datetime object.</p> <p>Parameters:</p> Name Type Description Default <code>dt</code> <code>datetime</code> <p>Python datetime.datetime object to convert</p> required <p>Returns:</p> Type Description <code>DateTime</code> <p>New DateTime instance preserving timezone information</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; dt = datetime.datetime(2024, 1, 15, 14, 30)\n&gt;&gt;&gt; carbonic_dt = DateTime.from_datetime(dt)\n</code></pre>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.add","title":"add","text":"<pre><code>add(\n    *,\n    days: int = 0,\n    hours: int = 0,\n    minutes: int = 0,\n    seconds: int = 0,\n    months: int = 0,\n    years: int = 0,\n) -&gt; DateTime\n</code></pre> <p>Add time components to this datetime.</p>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.subtract","title":"subtract","text":"<pre><code>subtract(**kwargs: int) -&gt; DateTime\n</code></pre> <p>Subtract time components from this datetime.</p>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.diff","title":"diff","text":"<pre><code>diff(other: DateTime, *, absolute: bool = False) -&gt; Duration\n</code></pre> <p>Calculate difference between this datetime and another datetime.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>DateTime</code> <p>The other datetime to compare with</p> required <code>absolute</code> <code>bool</code> <p>If True, return absolute difference (always positive)</p> <code>False</code> <p>Returns:</p> Type Description <code>Duration</code> <p>Duration representing the difference</p>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.add_duration","title":"add_duration","text":"<pre><code>add_duration(duration: Duration) -&gt; DateTime\n</code></pre> <p>Add a Duration to this DateTime.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>Duration</code> <p>The Duration to add</p> required <p>Returns:</p> Type Description <code>DateTime</code> <p>New DateTime with the duration added</p>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.subtract_duration","title":"subtract_duration","text":"<pre><code>subtract_duration(duration: Duration) -&gt; DateTime\n</code></pre> <p>Subtract a Duration from this DateTime.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>Duration</code> <p>The Duration to subtract</p> required <p>Returns:</p> Type Description <code>DateTime</code> <p>New DateTime with the duration subtracted</p>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.start_of","title":"start_of","text":"<pre><code>start_of(\n    unit: Literal[\"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\"],\n) -&gt; DateTime\n</code></pre> <p>Return the start of the specified time period.</p>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.end_of","title":"end_of","text":"<pre><code>end_of(\n    unit: Literal[\"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\"],\n) -&gt; DateTime\n</code></pre> <p>Return the end of the specified time period.</p>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.to_date","title":"to_date","text":"<pre><code>to_date() -&gt; Date\n</code></pre> <p>Convert to carbonic Date object.</p>"},{"location":"api/datetime/#carbonic.core.datetime.DateTime.to_datetime","title":"to_datetime","text":"<pre><code>to_datetime() -&gt; datetime.datetime\n</code></pre> <p>Return a copy of the underlying datetime.datetime object.</p>"},{"location":"api/duration/","title":"Duration","text":"<p>The Duration class represents spans of time and time differences.</p>"},{"location":"api/duration/#carbonic.core.duration.Duration","title":"carbonic.core.duration.Duration  <code>dataclass</code>","text":"<pre><code>Duration(\n    *,\n    days: int = 0,\n    hours: int = 0,\n    minutes: int = 0,\n    seconds: int = 0,\n    microseconds: int = 0,\n    milliseconds: int = 0,\n    weeks: int = 0,\n    months: int = 0,\n    years: int = 0,\n)\n</code></pre> <p>Immutable duration object representing a span of time.</p> <p>Duration handles both calendar-aware components (months, years) and precise time components (days, hours, minutes, seconds, microseconds). All operations return new instances, maintaining immutability.</p> <p>Attributes:</p> Name Type Description <code>_days</code> <code>int</code> <p>Number of days (aligned with datetime.timedelta)</p> <code>_seconds</code> <code>int</code> <p>Number of seconds within the day (0-86399)</p> <code>_microseconds</code> <code>int</code> <p>Number of microseconds within the second (0-999999)</p> <code>_calendar_months</code> <code>int</code> <p>Calendar months component (for display/parsing)</p> <code>_calendar_years</code> <code>int</code> <p>Calendar years component (for display/parsing)</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; duration = Duration(hours=2, minutes=30)\n&gt;&gt;&gt; duration.total_seconds()\n9000.0\n</code></pre> <pre><code>&gt;&gt;&gt; long_duration = Duration(years=1, months=6, days=15)\n&gt;&gt;&gt; long_duration.humanize(max_units=3)\n'1 year 6 months 15 days'\n</code></pre> <p>Create a Duration from individual time components.</p>"},{"location":"api/duration/#carbonic.core.duration.Duration-attributes","title":"Attributes","text":""},{"location":"api/duration/#carbonic.core.duration.Duration.days","title":"days  <code>property</code>","text":"<pre><code>days: int\n</code></pre> <p>The number of days in this duration.</p> <p>Returns:</p> Type Description <code>int</code> <p>Number of days as integer</p>"},{"location":"api/duration/#carbonic.core.duration.Duration.storage_seconds","title":"storage_seconds  <code>property</code>","text":"<pre><code>storage_seconds: int\n</code></pre> <p>Get seconds component of storage (0-86399, representing seconds within a day).</p> <p>Returns:</p> Type Description <code>int</code> <p>Seconds within the current day (internal storage format)</p>"},{"location":"api/duration/#carbonic.core.duration.Duration.microseconds","title":"microseconds  <code>property</code>","text":"<pre><code>microseconds: int\n</code></pre> <p>The microseconds component of this duration.</p> <p>Returns:</p> Type Description <code>int</code> <p>Number of microseconds (0-999999)</p>"},{"location":"api/duration/#carbonic.core.duration.Duration.milliseconds","title":"milliseconds  <code>property</code>","text":"<pre><code>milliseconds: int\n</code></pre> <p>Get milliseconds component.</p> <p>Returns:</p> Type Description <code>int</code> <p>Number of milliseconds derived from microseconds</p>"},{"location":"api/duration/#carbonic.core.duration.Duration.hours","title":"hours  <code>property</code>","text":"<pre><code>hours: int\n</code></pre> <p>Get total hours for this duration (excluding calendar components).</p>"},{"location":"api/duration/#carbonic.core.duration.Duration.weeks","title":"weeks  <code>property</code>","text":"<pre><code>weeks: int\n</code></pre> <p>Get total weeks for this duration.</p>"},{"location":"api/duration/#carbonic.core.duration.Duration.months","title":"months  <code>property</code>","text":"<pre><code>months: int\n</code></pre> <p>Get calendar months component (for display purposes only).</p>"},{"location":"api/duration/#carbonic.core.duration.Duration.years","title":"years  <code>property</code>","text":"<pre><code>years: int\n</code></pre> <p>Get calendar years component (for display purposes only).</p>"},{"location":"api/duration/#carbonic.core.duration.Duration-functions","title":"Functions","text":""},{"location":"api/duration/#carbonic.core.duration.Duration.parse","title":"parse  <code>classmethod</code>","text":"<pre><code>parse(s: str) -&gt; Duration\n</code></pre> <p>Parse ISO 8601 duration string or custom format.</p> <p>Supports the following ISO 8601 duration formats: - P[n]Y[n]M[n]DT[n]H[n]M[n]S (full format) - P[n]Y[n]M[n]D (date only) - PT[n]H[n]M[n]S (time only) - P[n]W (weeks) - -P... (negative durations)</p> <p>Examples:</p> <p>Duration.parse(\"P1Y2M3DT4H5M6S\")  # 1 year, 2 months, 3 days, 4 hours, 5 minutes, 6 seconds Duration.parse(\"PT2H30M\")         # 2 hours, 30 minutes Duration.parse(\"P2W\")             # 2 weeks Duration.parse(\"-P1DT2H\")         # negative 1 day, 2 hours</p>"},{"location":"api/duration/#carbonic.core.duration.Duration.total_seconds","title":"total_seconds","text":"<pre><code>total_seconds() -&gt; float\n</code></pre> <p>Get total seconds for this duration (excluding calendar components).</p> <p>Returns:</p> Type Description <code>float</code> <p>Total number of seconds as float, including fractional seconds</p> <code>float</code> <p>from microseconds. Calendar components (months, years) are not</p> <code>float</code> <p>included as they have variable length.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; duration = Duration(hours=2, minutes=30, seconds=15)\n&gt;&gt;&gt; duration.total_seconds()\n9015.0\n</code></pre>"},{"location":"api/duration/#carbonic.core.duration.Duration.in_seconds","title":"in_seconds","text":"<pre><code>in_seconds(*, whole: Literal[True]) -&gt; int\n</code></pre><pre><code>in_seconds(*, whole: Literal[False] = False) -&gt; float\n</code></pre> <pre><code>in_seconds(*, whole: bool = False) -&gt; int | float\n</code></pre> <p>Get total duration expressed as seconds.</p> <p>Parameters:</p> Name Type Description Default <code>whole</code> <code>bool</code> <p>If True, return integer (floor). If False, return float.</p> <code>False</code>"},{"location":"api/duration/#carbonic.core.duration.Duration.in_minutes","title":"in_minutes","text":"<pre><code>in_minutes(*, whole: Literal[True]) -&gt; int\n</code></pre><pre><code>in_minutes(*, whole: Literal[False] = False) -&gt; float\n</code></pre> <pre><code>in_minutes(*, whole: bool = False) -&gt; int | float\n</code></pre> <p>Get total duration expressed as minutes.</p> <p>Parameters:</p> Name Type Description Default <code>whole</code> <code>bool</code> <p>If True, return integer (floor). If False, return float.</p> <code>False</code>"},{"location":"api/duration/#carbonic.core.duration.Duration.in_hours","title":"in_hours","text":"<pre><code>in_hours(*, whole: Literal[True]) -&gt; int\n</code></pre><pre><code>in_hours(*, whole: Literal[False] = False) -&gt; float\n</code></pre> <pre><code>in_hours(*, whole: bool = False) -&gt; int | float\n</code></pre> <p>Get total duration expressed as hours.</p> <p>Parameters:</p> Name Type Description Default <code>whole</code> <code>bool</code> <p>If True, return integer (floor). If False, return float.</p> <code>False</code>"},{"location":"api/duration/#carbonic.core.duration.Duration.in_days","title":"in_days","text":"<pre><code>in_days(*, whole: Literal[True]) -&gt; int\n</code></pre><pre><code>in_days(*, whole: Literal[False] = False) -&gt; float\n</code></pre> <pre><code>in_days(*, whole: bool = False) -&gt; int | float\n</code></pre> <p>Get total duration expressed as days.</p> <p>Parameters:</p> Name Type Description Default <code>whole</code> <code>bool</code> <p>If True, return integer (floor). If False, return float.</p> <code>False</code>"},{"location":"api/duration/#carbonic.core.duration.Duration.in_weeks","title":"in_weeks","text":"<pre><code>in_weeks(*, whole: Literal[True]) -&gt; int\n</code></pre><pre><code>in_weeks(*, whole: Literal[False] = False) -&gt; float\n</code></pre> <pre><code>in_weeks(*, whole: bool = False) -&gt; int | float\n</code></pre> <p>Get total duration expressed as weeks.</p> <p>Parameters:</p> Name Type Description Default <code>whole</code> <code>bool</code> <p>If True, return integer (floor). If False, return float.</p> <code>False</code>"},{"location":"api/duration/#carbonic.core.duration.Duration.in_milliseconds","title":"in_milliseconds","text":"<pre><code>in_milliseconds(*, whole: Literal[True]) -&gt; int\n</code></pre><pre><code>in_milliseconds(*, whole: Literal[False] = False) -&gt; float\n</code></pre> <pre><code>in_milliseconds(*, whole: bool = False) -&gt; int | float\n</code></pre> <p>Get total duration expressed as milliseconds.</p> <p>Parameters:</p> Name Type Description Default <code>whole</code> <code>bool</code> <p>If True, return integer (floor). If False, return float.</p> <code>False</code>"},{"location":"api/duration/#carbonic.core.duration.Duration.in_microseconds","title":"in_microseconds","text":"<pre><code>in_microseconds(*, whole: Literal[True]) -&gt; int\n</code></pre><pre><code>in_microseconds(*, whole: Literal[False] = False) -&gt; float\n</code></pre> <pre><code>in_microseconds(*, whole: bool = False) -&gt; int | float\n</code></pre> <p>Get total duration expressed as microseconds.</p> <p>Parameters:</p> Name Type Description Default <code>whole</code> <code>bool</code> <p>If True, return integer (floor). If False, return float.</p> <code>False</code>"},{"location":"api/duration/#carbonic.core.duration.Duration.humanize","title":"humanize","text":"<pre><code>humanize(*, max_units: int = 2, locale: str | None = None) -&gt; str\n</code></pre> <p>Return human-readable duration string.</p> <p>Parameters:</p> Name Type Description Default <code>max_units</code> <code>int</code> <p>Maximum number of time units to display (default: 2)</p> <code>2</code> <code>locale</code> <code>str | None</code> <p>Locale for localization (default: None for English)</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>Human-readable string like \"2 days 3 hours\" or \"1 year 6 months\"</p> <p>Examples:</p> <p>Duration(days=2, hours=3).humanize()  # \"2 days 3 hours\" Duration(minutes=90).humanize(max_units=1)  # \"1 hour\" Duration(seconds=45).humanize(locale=\"pl\")  # \"45 sekund\" (if implemented)</p>"},{"location":"api/exceptions/","title":"Exceptions","text":"<p>Custom exceptions for error handling in Carbonic.</p>"},{"location":"api/exceptions/#carbonic.core.exceptions","title":"carbonic.core.exceptions","text":"<p>Carbonic exceptions.</p>"},{"location":"api/exceptions/#carbonic.core.exceptions-classes","title":"Classes","text":""},{"location":"api/exceptions/#carbonic.core.exceptions.CarbonicError","title":"CarbonicError","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for all Carbonic errors.</p>"},{"location":"api/exceptions/#carbonic.core.exceptions.ParseError","title":"ParseError","text":"<p>               Bases: <code>CarbonicError</code></p> <p>Raised when parsing a date/time string fails.</p>"},{"location":"api/interval/","title":"Interval","text":"<p>The Interval class represents time ranges between two datetime points.</p>"},{"location":"api/interval/#carbonic.core.interval.Interval","title":"carbonic.core.interval.Interval  <code>dataclass</code>","text":"<pre><code>Interval(start: Date | DateTime, end: Date | DateTime)\n</code></pre> <p>Represents a time interval with start and end points.</p> <p>Intervals are half-open: [start, end) - inclusive start, exclusive end. Supports both Date and DateTime intervals with comprehensive operations.</p> <p>Examples:</p>"},{"location":"api/interval/#carbonic.core.interval.Interval--create-intervals","title":"Create intervals","text":"<p>meeting = Interval(start=DateTime(2024, 1, 15, 9, 0), end=DateTime(2024, 1, 15, 10, 30)) vacation = Interval(start=Date(2024, 7, 1), end=Date(2024, 7, 15))</p>"},{"location":"api/interval/#carbonic.core.interval.Interval--operations","title":"Operations","text":"<p>meeting.contains(DateTime(2024, 1, 15, 9, 30))  # True meeting.overlaps(lunch_interval)                # True/False meeting.intersection(lunch_interval)            # Overlapping part meeting.union(lunch_interval)                   # Combined intervals meeting.duration()                              # Duration object</p>"},{"location":"api/interval/#carbonic.core.interval.Interval-functions","title":"Functions","text":""},{"location":"api/interval/#carbonic.core.interval.Interval.duration","title":"duration","text":"<pre><code>duration() -&gt; Duration\n</code></pre> <p>Get the Duration of this interval.</p> <p>Returns:</p> Type Description <code>Duration</code> <p>Duration object representing the time span</p>"},{"location":"api/interval/#carbonic.core.interval.Interval.is_empty","title":"is_empty","text":"<pre><code>is_empty() -&gt; bool\n</code></pre> <p>Check if this interval is empty (zero duration).</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if start == end, False otherwise</p>"},{"location":"api/interval/#carbonic.core.interval.Interval.contains","title":"contains","text":"<pre><code>contains(point: Date | DateTime) -&gt; bool\n</code></pre> <p>Check if this interval contains a time point.</p> <p>Uses half-open interval logic: [start, end) - start is inclusive - end is exclusive</p> <p>Parameters:</p> Name Type Description Default <code>point</code> <code>Date | DateTime</code> <p>Date or DateTime to check</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if point is within the interval</p>"},{"location":"api/interval/#carbonic.core.interval.Interval.overlaps","title":"overlaps","text":"<pre><code>overlaps(other: Interval) -&gt; bool\n</code></pre> <p>Check if this interval overlaps with another interval.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Interval</code> <p>Another Interval to check</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if intervals overlap, False otherwise</p>"},{"location":"api/interval/#carbonic.core.interval.Interval.intersection","title":"intersection","text":"<pre><code>intersection(other: Interval) -&gt; Interval | None\n</code></pre> <p>Get the intersection (overlapping part) of two intervals.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Interval</code> <p>Another Interval to intersect with</p> required <p>Returns:</p> Type Description <code>Interval | None</code> <p>Interval representing the overlap, or None if no overlap</p>"},{"location":"api/interval/#carbonic.core.interval.Interval.union","title":"union","text":"<pre><code>union(other: Interval) -&gt; Interval | list[Interval]\n</code></pre> <p>Get the union of two intervals.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Interval</code> <p>Another Interval to union with</p> required <p>Returns:</p> Type Description <code>Interval | list[Interval]</code> <p>Single Interval if they overlap or are adjacent,</p> <code>Interval | list[Interval]</code> <p>List of Intervals if they are separate</p>"},{"location":"api/locale/","title":"Locale","text":"<p>Localization and internationalization support for Carbonic.</p>"},{"location":"api/locale/#carbonic.locale","title":"carbonic.locale","text":"<p>Carbonic localization system.</p> <p>This module provides comprehensive internationalization support for the Carbonic datetime library, including pluralization rules, number formatting, and localized names for time units, months, and days.</p> <p>Supported locales: - English (en): Default locale with standard English pluralization - Polish (pl): Complex pluralization rules and Polish translations</p> Example <p>from carbonic.locale import get_locale locale = get_locale(\"pl\") locale.get_duration_unit_name(\"day\", 5) 'dni'</p>"},{"location":"api/locale/#carbonic.locale-classes","title":"Classes","text":""},{"location":"api/locale/#carbonic.locale.Locale","title":"Locale","text":"<pre><code>Locale(code: str, name: str)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Abstract base class for locales.</p>"},{"location":"api/locale/#carbonic.locale.Locale-functions","title":"Functions","text":""},{"location":"api/locale/#carbonic.locale.Locale.pluralize","title":"pluralize  <code>abstractmethod</code>","text":"<pre><code>pluralize(\n    count: int | float, singular: str, plural: str, many: str | None = None\n) -&gt; str\n</code></pre> <p>Return the correct plural form based on count and locale rules.</p> <p>Parameters:</p> Name Type Description Default <code>count</code> <code>int | float</code> <p>The number to use for pluralization</p> required <code>singular</code> <code>str</code> <p>Singular form (e.g., \"day\")</p> required <code>plural</code> <code>str</code> <p>Plural form for 2-4 in languages that have it (e.g., \"days\")</p> required <code>many</code> <code>str | None</code> <p>Many form for 5+ in languages that have it (e.g., \"days\")</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The correct plural form</p>"},{"location":"api/locale/#carbonic.locale.Locale.format_number","title":"format_number  <code>abstractmethod</code>","text":"<pre><code>format_number(number: float) -&gt; str\n</code></pre> <p>Format number according to locale conventions (decimal separator, etc.).</p>"},{"location":"api/locale/#carbonic.locale.Locale.get_duration_unit_name","title":"get_duration_unit_name  <code>abstractmethod</code>","text":"<pre><code>get_duration_unit_name(unit: str, count: int | float) -&gt; str\n</code></pre> <p>Get the localized name for a duration unit.</p> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>str</code> <p>The unit name (\"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"year\")</p> required <code>count</code> <code>int | float</code> <p>The count to determine plural form</p> required <p>Returns:</p> Type Description <code>str</code> <p>Localized unit name</p>"},{"location":"api/locale/#carbonic.locale.Locale.get_month_name","title":"get_month_name  <code>abstractmethod</code>","text":"<pre><code>get_month_name(month: int, short: bool = False) -&gt; str\n</code></pre> <p>Get localized month name.</p> <p>Parameters:</p> Name Type Description Default <code>month</code> <code>int</code> <p>Month number (1-12)</p> required <code>short</code> <code>bool</code> <p>Whether to return short form</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>Localized month name</p>"},{"location":"api/locale/#carbonic.locale.Locale.get_day_name","title":"get_day_name  <code>abstractmethod</code>","text":"<pre><code>get_day_name(weekday: int, short: bool = False) -&gt; str\n</code></pre> <p>Get localized day name.</p> <p>Parameters:</p> Name Type Description Default <code>weekday</code> <code>int</code> <p>Weekday number (0=Monday, 6=Sunday)</p> required <code>short</code> <code>bool</code> <p>Whether to return short form</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>Localized day name</p>"},{"location":"api/locale/#carbonic.locale.EnglishLocale","title":"EnglishLocale","text":"<pre><code>EnglishLocale()\n</code></pre> <p>               Bases: <code>Locale</code></p> <p>English locale implementation.</p>"},{"location":"api/locale/#carbonic.locale.EnglishLocale-functions","title":"Functions","text":""},{"location":"api/locale/#carbonic.locale.EnglishLocale.pluralize","title":"pluralize","text":"<pre><code>pluralize(\n    count: int | float, singular: str, plural: str, many: str | None = None\n) -&gt; str\n</code></pre> <p>English pluralization: singular for 1, plural for everything else.</p>"},{"location":"api/locale/#carbonic.locale.EnglishLocale.format_number","title":"format_number","text":"<pre><code>format_number(number: float) -&gt; str\n</code></pre> <p>Format number using English conventions (decimal point).</p>"},{"location":"api/locale/#carbonic.locale.EnglishLocale.get_duration_unit_name","title":"get_duration_unit_name","text":"<pre><code>get_duration_unit_name(unit: str, count: int | float) -&gt; str\n</code></pre> <p>Get English duration unit names with proper pluralization.</p>"},{"location":"api/locale/#carbonic.locale.EnglishLocale.get_month_name","title":"get_month_name","text":"<pre><code>get_month_name(month: int, short: bool = False) -&gt; str\n</code></pre> <p>Get English month names using Python's calendar module.</p>"},{"location":"api/locale/#carbonic.locale.EnglishLocale.get_day_name","title":"get_day_name","text":"<pre><code>get_day_name(weekday: int, short: bool = False) -&gt; str\n</code></pre> <p>Get English day names using Python's calendar module.</p>"},{"location":"api/locale/#carbonic.locale.PolishLocale","title":"PolishLocale","text":"<pre><code>PolishLocale()\n</code></pre> <p>               Bases: <code>Locale</code></p> <p>Polish locale implementation with complex pluralization rules.</p>"},{"location":"api/locale/#carbonic.locale.PolishLocale-functions","title":"Functions","text":""},{"location":"api/locale/#carbonic.locale.PolishLocale.pluralize","title":"pluralize","text":"<pre><code>pluralize(\n    count: int | float, singular: str, plural: str, many: str | None = None\n) -&gt; str\n</code></pre> <p>Polish pluralization rules: - 1: singular form (1 dzie\u0144) - 2-4 (but not 12-14): plural form (2 dni, 3 dni, 4 dni) - 0.5, 1.5, 2.5, etc.: plural form (0,5 sekundy, 1,5 sekundy) - 5+, 0, 12-14: many form (5 dni, 10 dni, 12 dni, 13 dni, 14 dni) - 22, 23, 24, 32, 33, 34, etc.: plural form (22 dni, 23 dni)</p>"},{"location":"api/locale/#carbonic.locale.PolishLocale.format_number","title":"format_number","text":"<pre><code>format_number(number: float) -&gt; str\n</code></pre> <p>Format number using Polish conventions (decimal comma).</p>"},{"location":"api/locale/#carbonic.locale.PolishLocale.get_duration_unit_name","title":"get_duration_unit_name","text":"<pre><code>get_duration_unit_name(unit: str, count: int | float) -&gt; str\n</code></pre> <p>Get Polish duration unit names with proper pluralization.</p>"},{"location":"api/locale/#carbonic.locale.PolishLocale.get_month_name","title":"get_month_name","text":"<pre><code>get_month_name(month: int, short: bool = False) -&gt; str\n</code></pre> <p>Get Polish month names.</p>"},{"location":"api/locale/#carbonic.locale.PolishLocale.get_day_name","title":"get_day_name","text":"<pre><code>get_day_name(weekday: int, short: bool = False) -&gt; str\n</code></pre> <p>Get Polish day names.</p>"},{"location":"api/locale/#carbonic.locale-functions","title":"Functions","text":""},{"location":"api/locale/#carbonic.locale.get_locale","title":"get_locale","text":"<pre><code>get_locale(code: str | None) -&gt; Locale\n</code></pre> <p>Get a locale by code, defaulting to English if None or not found.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str | None</code> <p>Locale code (e.g., \"en\", \"pl\") or None for default</p> required <p>Returns:</p> Type Description <code>Locale</code> <p>Locale instance</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If locale code is not supported</p>"},{"location":"api/locale/#carbonic.locale.is_locale_available","title":"is_locale_available","text":"<pre><code>is_locale_available(code: str) -&gt; bool\n</code></pre> <p>Check if a locale is available.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>Locale code (e.g., \"en\", \"pl\")</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the locale is registered, False otherwise</p>"},{"location":"api/locale/#carbonic.locale.register_locale","title":"register_locale","text":"<pre><code>register_locale(locale: Locale) -&gt; None\n</code></pre> <p>Register a locale in the global registry.</p>"},{"location":"api/period/","title":"Period","text":"<p>The Period class provides named time periods and weekday constants.</p>"},{"location":"api/period/#carbonic.core.period.Period","title":"carbonic.core.period.Period  <code>dataclass</code>","text":"<pre><code>Period(\n    name: str,\n    _type: Literal[\"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\"],\n)\n</code></pre> <p>Represents a named time period for semantic datetime operations.</p> <p>Provides named constants like Period.DAY, Period.MONTH, etc. for more readable and semantic datetime arithmetic operations.</p> <p>Examples:</p> <p>Period.MONTH.add_to(date)           # Add 1 month to date Period.WEEK.subtract_from(date)     # Subtract 1 week from date Period.QUARTER.start_of(date)       # Start of current quarter Period.YEAR.end_of(date)            # End of current year Period.DAY.add_to(date, count=5)    # Add 5 days to date</p>"},{"location":"api/period/#carbonic.core.period.Period-functions","title":"Functions","text":""},{"location":"api/period/#carbonic.core.period.Period.add_to","title":"add_to","text":"<pre><code>add_to(dt: Date | DateTime, *, count: int = 1) -&gt; Date | DateTime\n</code></pre> <p>Add this period to a Date or DateTime.</p> <p>Parameters:</p> Name Type Description Default <code>dt</code> <code>Date | DateTime</code> <p>The Date or DateTime to add to</p> required <code>count</code> <code>int</code> <p>Number of periods to add (default: 1)</p> <code>1</code> <p>Returns:</p> Type Description <code>Date | DateTime</code> <p>New Date or DateTime with the period added</p>"},{"location":"api/period/#carbonic.core.period.Period.subtract_from","title":"subtract_from","text":"<pre><code>subtract_from(dt: Date | DateTime, *, count: int = 1) -&gt; Date | DateTime\n</code></pre> <p>Subtract this period from a Date or DateTime.</p> <p>Parameters:</p> Name Type Description Default <code>dt</code> <code>Date | DateTime</code> <p>The Date or DateTime to subtract from</p> required <code>count</code> <code>int</code> <p>Number of periods to subtract (default: 1)</p> <code>1</code> <p>Returns:</p> Type Description <code>Date | DateTime</code> <p>New Date or DateTime with the period subtracted</p>"},{"location":"api/period/#carbonic.core.period.Period.start_of","title":"start_of","text":"<pre><code>start_of(dt: Date | DateTime) -&gt; Date | DateTime\n</code></pre> <p>Get the start of this period for the given date/datetime.</p> <p>Parameters:</p> Name Type Description Default <code>dt</code> <code>Date | DateTime</code> <p>The Date or DateTime to get the period start for</p> required <p>Returns:</p> Type Description <code>Date | DateTime</code> <p>New Date or DateTime at the start of the period</p>"},{"location":"api/period/#carbonic.core.period.Period.end_of","title":"end_of","text":"<pre><code>end_of(dt: Date | DateTime) -&gt; Date | DateTime\n</code></pre> <p>Get the end of this period for the given date/datetime.</p> <p>Parameters:</p> Name Type Description Default <code>dt</code> <code>Date | DateTime</code> <p>The Date or DateTime to get the period end for</p> required <p>Returns:</p> Type Description <code>Date | DateTime</code> <p>New Date or DateTime at the end of the period</p>"},{"location":"development/contributing/","title":"Contributing to Carbonic","text":"<p>Thank you for your interest in contributing to Carbonic! This guide will help you get started with development.</p>"},{"location":"development/contributing/#getting-started","title":"Getting Started","text":""},{"location":"development/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.12 or higher</li> <li>UV package manager</li> <li>Git</li> </ul>"},{"location":"development/contributing/#development-setup","title":"Development Setup","text":"<ol> <li> <p>Clone the repository: <pre><code>git clone https://github.com/marepilc/carbonic.git\ncd carbonic\n</code></pre></p> </li> <li> <p>Install development dependencies: <pre><code>uv sync --dev\n</code></pre></p> </li> <li> <p>Activate the virtual environment: <pre><code>source .venv/bin/activate  # Linux/macOS\n# or\n.venv\\Scripts\\activate     # Windows\n</code></pre></p> </li> <li> <p>Install pre-commit hooks: <pre><code>uv run pre-commit install\n</code></pre></p> </li> </ol>"},{"location":"development/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"development/contributing/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\nuv run pytest\n\n# Run with coverage\nuv run pytest --cov=carbonic --cov-report=html\n\n# Run specific test file\nuv run pytest tests/test_datetime.py\n\n# Run with verbose output\nuv run pytest -v\n</code></pre>"},{"location":"development/contributing/#code-quality","title":"Code Quality","text":"<p>Carbonic uses several tools to maintain code quality:</p> <pre><code># Type checking\nuv run mypy carbonic\n\n# Linting\nuv run ruff check carbonic\n\n# Formatting\nuv run ruff format carbonic\n\n# Run all checks\nuv run pre-commit run --all-files\n</code></pre>"},{"location":"development/contributing/#documentation","title":"Documentation","text":"<p>Build and serve documentation locally:</p> <pre><code># Install docs dependencies (if not already installed)\nuv sync --group docs\n\n# Serve documentation locally\nuv run mkdocs serve\n\n# Build documentation\nuv run mkdocs build\n</code></pre>"},{"location":"development/contributing/#project-structure","title":"Project Structure","text":"<pre><code>carbonic/\n\u251c\u2500\u2500 carbonic/              # Main package\n\u2502   \u251c\u2500\u2500 core/             # Core classes (DateTime, Date, etc.)\n\u2502   \u2502   \u251c\u2500\u2500 datetime.py   # DateTime implementation\n\u2502   \u2502   \u251c\u2500\u2500 date.py       # Date implementation\n\u2502   \u2502   \u251c\u2500\u2500 duration.py   # Duration implementation\n\u2502   \u2502   \u251c\u2500\u2500 period.py     # Period constants and logic\n\u2502   \u2502   \u251c\u2500\u2500 interval.py   # Interval implementation\n\u2502   \u2502   \u2514\u2500\u2500 exceptions.py # Custom exceptions\n\u2502   \u251c\u2500\u2500 locale/           # Localization support\n\u2502   \u2502   \u251c\u2500\u2500 base.py       # Base locale class\n\u2502   \u2502   \u251c\u2500\u2500 en.py         # English locale\n\u2502   \u2502   \u2514\u2500\u2500 pl.py         # Polish locale\n\u2502   \u2514\u2500\u2500 __init__.py       # Public API\n\u251c\u2500\u2500 tests/                # Test suite\n\u251c\u2500\u2500 docs/                 # Documentation\n\u251c\u2500\u2500 pyproject.toml        # Project configuration\n\u251c\u2500\u2500 mkdocs.yml           # Documentation configuration\n\u2514\u2500\u2500 README.md            # Project overview\n</code></pre>"},{"location":"development/contributing/#coding-standards","title":"Coding Standards","text":""},{"location":"development/contributing/#code-style","title":"Code Style","text":"<ul> <li>Follow PEP 8 and use Ruff for formatting</li> <li>Use type hints for all public APIs</li> <li>Prefer descriptive names over comments</li> <li>Keep functions focused and small</li> </ul>"},{"location":"development/contributing/#docstrings","title":"Docstrings","text":"<p>Use Google-style docstrings:</p> <pre><code>def add_days(self, days: int) -&gt; \"DateTime\":\n    \"\"\"Add the specified number of days.\n\n    Args:\n        days: Number of days to add (can be negative).\n\n    Returns:\n        New DateTime instance with added days.\n\n    Example:\n        &gt;&gt;&gt; dt = DateTime(2024, 1, 15, tz=\"UTC\")\n        &gt;&gt;&gt; future = dt.add_days(7)\n        &gt;&gt;&gt; print(future)\n        2024-01-22T00:00:00+00:00\n    \"\"\"\n    return self._replace_dt(self._dt + timedelta(days=days))\n</code></pre>"},{"location":"development/contributing/#type-annotations","title":"Type Annotations","text":"<ul> <li>Use modern type hints (Python 3.12+ syntax)</li> <li>Import types from <code>typing</code> when needed</li> <li>Use <code>Self</code> for methods returning the same type</li> <li>Be explicit about optional parameters</li> </ul> <pre><code>from typing import Self, Optional\nfrom datetime import datetime\n\ndef from_datetime(cls, dt: datetime) -&gt; Self:\n    \"\"\"Create from standard library datetime.\"\"\"\n    ...\n</code></pre>"},{"location":"development/contributing/#testing-guidelines","title":"Testing Guidelines","text":""},{"location":"development/contributing/#test-structure","title":"Test Structure","text":"<ul> <li>Place tests in the <code>tests/</code> directory</li> <li>Mirror the package structure in test files</li> <li>Use descriptive test method names</li> <li>Group related tests in classes</li> </ul> <pre><code>class TestDateTimeArithmetic:\n    def test_add_days_positive(self):\n        \"\"\"Test adding positive number of days.\"\"\"\n        dt = DateTime(2024, 1, 15, tz=\"UTC\")\n        result = dt.add_days(7)\n        expected = DateTime(2024, 1, 22, tz=\"UTC\")\n        assert result == expected\n\n    def test_add_days_negative(self):\n        \"\"\"Test adding negative number of days.\"\"\"\n        dt = DateTime(2024, 1, 15, tz=\"UTC\")\n        result = dt.add_days(-7)\n        expected = DateTime(2024, 1, 8, tz=\"UTC\")\n        assert result == expected\n</code></pre>"},{"location":"development/contributing/#test-categories","title":"Test Categories","text":"<ol> <li>Unit Tests: Test individual methods in isolation</li> <li>Integration Tests: Test interactions between classes</li> <li>Property Tests: Test invariants and edge cases</li> <li>Performance Tests: Ensure operations meet performance requirements</li> </ol>"},{"location":"development/contributing/#writing-good-tests","title":"Writing Good Tests","text":"<ul> <li>Test both happy path and edge cases</li> <li>Use meaningful assertions with clear error messages</li> <li>Avoid testing implementation details</li> <li>Prefer multiple focused tests over complex tests</li> </ul>"},{"location":"development/contributing/#making-changes","title":"Making Changes","text":""},{"location":"development/contributing/#before-you-start","title":"Before You Start","text":"<ol> <li>Check existing issues to avoid duplication</li> <li>For large changes, open an issue to discuss the approach</li> <li>Fork the repository and create a feature branch</li> </ol>"},{"location":"development/contributing/#development-process","title":"Development Process","text":"<ol> <li> <p>Create a branch: <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Make your changes:</p> </li> <li>Write code following the established patterns</li> <li>Add tests for new functionality</li> <li> <p>Update documentation if needed</p> </li> <li> <p>Test your changes: <pre><code>uv run pytest\nuv run mypy carbonic\nuv run ruff check carbonic\n</code></pre></p> </li> <li> <p>Commit your changes: <pre><code>git add .\ngit commit -m \"Add feature: brief description\"\n</code></pre></p> </li> <li> <p>Push and create PR: <pre><code>git push origin feature/your-feature-name\n</code></pre></p> </li> </ol>"},{"location":"development/contributing/#commit-message-guidelines","title":"Commit Message Guidelines","text":"<p>Follow conventional commit format:</p> <pre><code>type: brief description\n\nLonger description if needed\n\n- List any breaking changes\n- Reference relevant issues\n</code></pre> <p>Types: - <code>feat</code>: New feature - <code>fix</code>: Bug fix - <code>docs</code>: Documentation changes - <code>test</code>: Adding or updating tests - <code>refactor</code>: Code changes that don't add features or fix bugs - <code>perf</code>: Performance improvements - <code>chore</code>: Maintenance tasks</p>"},{"location":"development/contributing/#design-principles","title":"Design Principles","text":""},{"location":"development/contributing/#immutability","title":"Immutability","text":"<p>All datetime objects must be immutable:</p> <pre><code>from dataclasses import dataclass\nfrom datetime import datetime, timedelta\n\n@dataclass(frozen=True, slots=True)\nclass DateTime:\n    _dt: datetime\n\n    def add_days(self, days: int) -&gt; \"DateTime\":\n        # Return new instance, never modify self\n        return DateTime(self._dt + timedelta(days=days))\n</code></pre>"},{"location":"development/contributing/#fluent-api","title":"Fluent API","text":"<p>Methods should be chainable and read naturally:</p> <pre><code>from carbonic import DateTime\n\n# Create a sample datetime for the example\ndt = DateTime.now()\n\n# Good - fluent and readable\nresult = (dt\n    .add(days=1)\n    .start_of(\"day\")\n)\n\n# Avoid - requires intermediate variables\ndt1 = dt.add(days=1)\ndt2 = dt1.start_of(\"day\")\nresult = dt2  # Note: timezone conversion would be done during creation\n</code></pre>"},{"location":"development/contributing/#type-safety","title":"Type Safety","text":"<p>Maintain strict typing throughout:</p> <pre><code>from typing import Any\nfrom datetime import datetime\n\n# Good - explicit types\ndef diff_in_days(self, other: \"DateTime\") -&gt; float:\n    delta = other._dt - self._dt\n    return delta.total_seconds() / 86400\n\n# Avoid - untyped or Any\ndef diff_in_days(self, other) -&gt; Any:\n    pass  # Using pass instead of ... for valid syntax\n</code></pre>"},{"location":"development/contributing/#error-handling","title":"Error Handling","text":"<p>Use specific exceptions:</p> <pre><code>from zoneinfo import ZoneInfo, ZoneInfoNotFoundError\nfrom carbonic.core.exceptions import CarbonicError\n\n# Define a custom exception for this example\nclass InvalidTimezone(CarbonicError):\n    pass\n\ndef _validate_timezone(tz_name: str) -&gt; ZoneInfo:\n    try:\n        return ZoneInfo(tz_name)\n    except ZoneInfoNotFoundError:\n        raise InvalidTimezone(f\"Unknown timezone: {tz_name}\")\n</code></pre>"},{"location":"development/contributing/#contributing-guidelines","title":"Contributing Guidelines","text":""},{"location":"development/contributing/#what-were-looking-for","title":"What We're Looking For","text":"<ul> <li>Bug fixes: Always welcome with tests</li> <li>Performance improvements: With benchmarks showing improvement</li> <li>New features: Discuss in an issue first</li> <li>Documentation: Improvements and examples</li> <li>Tests: Additional test coverage</li> </ul>"},{"location":"development/contributing/#what-were-not-looking-for","title":"What We're Not Looking For","text":"<ul> <li>Breaking changes without strong justification</li> <li>Features that significantly increase complexity</li> <li>Code that doesn't follow established patterns</li> <li>Changes without tests</li> </ul>"},{"location":"development/contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Fork and branch: Create a feature branch from <code>main</code></li> <li>Implement: Make your changes with tests</li> <li>Document: Update docs if needed</li> <li>Test: Ensure all tests pass</li> <li>Submit: Create a pull request with clear description</li> </ol>"},{"location":"development/contributing/#pr-requirements","title":"PR Requirements","text":"<ul> <li>[ ] All tests pass</li> <li>[ ] Type checking passes (mypy)</li> <li>[ ] Linting passes (ruff)</li> <li>[ ] New code has tests</li> <li>[ ] Documentation updated if needed</li> <li>[ ] CHANGELOG.md updated for user-facing changes</li> </ul>"},{"location":"development/contributing/#release-process","title":"Release Process","text":"<p>Carbonic follows semantic versioning:</p> <ul> <li>MAJOR: Breaking changes</li> <li>MINOR: New features (backward compatible)</li> <li>PATCH: Bug fixes (backward compatible)</li> </ul>"},{"location":"development/contributing/#creating-a-release","title":"Creating a Release","text":"<ol> <li>Update version in <code>pyproject.toml</code></li> <li>Update <code>CHANGELOG.md</code></li> <li>Create release PR</li> <li>Tag release after merge</li> <li>GitHub Actions handles PyPI publication</li> </ol>"},{"location":"development/contributing/#getting-help","title":"Getting Help","text":"<ul> <li>Issues: Use GitHub issues for bugs and feature requests</li> <li>Discussions: Use GitHub discussions for questions</li> <li>Email: Contact maintainers for private concerns</li> </ul>"},{"location":"development/contributing/#recognition","title":"Recognition","text":"<p>Contributors are recognized in:</p> <ul> <li><code>CONTRIBUTORS.md</code> file</li> <li>GitHub contributors page</li> <li>Release notes for significant contributions</li> </ul> <p>Thank you for contributing to Carbonic!</p>"},{"location":"examples/common-tasks/","title":"Common Tasks","text":"<p>This page demonstrates how to accomplish common datetime-related tasks using Carbonic.</p>"},{"location":"examples/common-tasks/#working-with-current-time","title":"Working with Current Time","text":""},{"location":"examples/common-tasks/#getting-current-time-in-different-timezones","title":"Getting Current Time in Different Timezones","text":"<pre><code>from carbonic import now\n\n# Current time in UTC (default)\nutc_now = now()\nprint(f\"UTC: {utc_now}\")\n\n# Current time in specific timezones\nny_now = now(\"America/New_York\")\nlondon_now = now(\"Europe/London\")\ntokyo_now = now(\"Asia/Tokyo\")\n\nprint(f\"New York: {ny_now}\")\nprint(f\"London: {london_now}\")\nprint(f\"Tokyo: {tokyo_now}\")\n</code></pre>"},{"location":"examples/common-tasks/#converting-between-timezones","title":"Converting Between Timezones","text":"<pre><code>from carbonic import DateTime\n\n# Create meeting time in UTC (default timezone)\nmeeting_utc = DateTime(2024, 3, 15, 14, 30)\n\n# Create equivalent times in each participant's local timezone\n# (representing the same absolute moment)\nmeeting_ny = DateTime(2024, 3, 15, 10, 30, tz=\"America/New_York\")  # UTC-4 in March\nmeeting_london = DateTime(2024, 3, 15, 14, 30, tz=\"Europe/London\")  # UTC+0 in March\nmeeting_tokyo = DateTime(2024, 3, 15, 23, 30, tz=\"Asia/Tokyo\")  # UTC+9\n\nprint(\"Global Meeting Times:\")\nprint(f\"UTC: {meeting_utc.format('H:i')}\")\nprint(f\"New York: {meeting_ny.format('H:i')}\")\nprint(f\"London: {meeting_london.format('H:i')}\")\nprint(f\"Tokyo: {meeting_tokyo.format('H:i')}\")\n</code></pre>"},{"location":"examples/common-tasks/#date-calculations","title":"Date Calculations","text":""},{"location":"examples/common-tasks/#age-calculation","title":"Age Calculation","text":"<pre><code>from carbonic import Date, today\n\ndef calculate_age(birth_date):\n    \"\"\"Calculate age in years.\"\"\"\n    today_date = today()\n    age_diff = today_date.diff(birth_date)\n    return int(age_diff.in_days() / 365.25)\n\ndef calculate_detailed_age(birth_date):\n    \"\"\"Calculate detailed age with years, months, and days.\"\"\"\n    today_date = today()\n\n    years = today_date.year - birth_date.year\n    months = today_date.month - birth_date.month\n    days = today_date.day - birth_date.day\n\n    # Adjust for negative days\n    if days &lt; 0:\n        months -= 1\n        # Get days in previous month\n        prev_month = today_date.subtract_months(1)\n        days += prev_month.days_in_month\n\n    # Adjust for negative months\n    if months &lt; 0:\n        years -= 1\n        months += 12\n\n    return years, months, days\n\n# Example usage\nbirthday = Date(1990, 5, 15)\nage = calculate_age(birthday)\ndetailed_age = calculate_detailed_age(birthday)\n\nprint(f\"Age: {age} years\")\nprint(f\"Detailed age: {detailed_age[0]} years, {detailed_age[1]} months, {detailed_age[2]} days\")\n</code></pre>"},{"location":"examples/common-tasks/#time-untilsince-event","title":"Time Until/Since Event","text":"<pre><code>from carbonic import DateTime, Duration, now\n\ndef time_until_event(event_datetime):\n    \"\"\"Calculate time remaining until an event.\"\"\"\n    current = now()\n\n    if event_datetime &lt; current:\n        duration = current - event_datetime\n        return f\"Event was {humanize_duration(duration)} ago\"\n    else:\n        duration = event_datetime - current\n        return f\"Event in {humanize_duration(duration)}\"\n\ndef humanize_duration(duration):\n    \"\"\"Convert duration to human-readable string.\"\"\"\n    total_seconds = duration.total_seconds()\n\n    if total_seconds &lt; 60:\n        return f\"{int(total_seconds)} seconds\"\n    elif total_seconds &lt; 3600:\n        minutes = int(total_seconds // 60)\n        return f\"{minutes} minutes\"\n    elif total_seconds &lt; 86400:\n        hours = int(total_seconds // 3600)\n        return f\"{hours} hours\"\n    else:\n        days = int(total_seconds // 86400)\n        return f\"{days} days\"\n\n# Example usage\nnew_year = DateTime(2025, 1, 1, 0, 0, tz=\"UTC\")\nbirthday = DateTime(2024, 5, 15, 0, 0, tz=\"UTC\")\n\nprint(time_until_event(new_year))\nprint(time_until_event(birthday))\n</code></pre>"},{"location":"examples/common-tasks/#business-logic","title":"Business Logic","text":""},{"location":"examples/common-tasks/#business-days-and-working-hours","title":"Business Days and Working Hours","text":"<pre><code>from carbonic import DateTime, Date, Duration, today\n\ndef is_business_hours(dt, start_hour=9, end_hour=17):\n    \"\"\"Check if datetime falls within business hours.\"\"\"\n    if not dt.to_date().is_weekday():\n        return False\n    return start_hour &lt;= dt.hour &lt; end_hour\n\ndef next_business_datetime(dt, target_hour=9):\n    \"\"\"Get next business day at specific hour.\"\"\"\n    # Simplified example: add 1 business day and create new datetime at target hour\n    next_date = dt.to_date().add_business_days(1)\n    return DateTime(next_date.year, next_date.month, next_date.day, target_hour, 0, 0, tz=dt.tzinfo.key)\n\ndef add_business_hours(dt, hours):\n    \"\"\"Add business hours (simplified example).\"\"\"\n    # Simplified: assume 8 hours per business day\n    business_days_needed = hours // 8\n    remaining_hours = hours % 8\n\n    # Add business days first\n    result_date = dt.to_date().add_business_days(business_days_needed)\n    result_dt = DateTime(result_date.year, result_date.month, result_date.day, dt.hour, 0, 0, tz=dt.tzinfo.key)\n\n    # Add remaining hours\n    return result_dt.add(hours=remaining_hours)\n\n# Example usage\nstart_work = DateTime(2024, 1, 15, 10, 0, tz=\"UTC\")  # Monday 10 AM\n\nprint(f\"Is business hours: {is_business_hours(start_work)}\")\nprint(f\"Next business day: {next_business_datetime(start_work)}\")\nprint(f\"After 20 business hours: {add_business_hours(start_work, 20)}\")\n</code></pre>"},{"location":"examples/common-tasks/#deadline-management","title":"Deadline Management","text":"<pre><code>from carbonic import DateTime, Duration, now\n\nclass DeadlineTracker:\n    def __init__(self, deadline, warning_hours=24):\n        self.deadline = deadline\n        self.warning_threshold = Duration(hours=warning_hours)\n\n    def status(self):\n        \"\"\"Get current status of the deadline.\"\"\"\n        current = now()\n\n        if current &gt; self.deadline:\n            overdue_duration = current - self.deadline\n            return f\"OVERDUE by {self._format_duration(overdue_duration)}\"\n\n        remaining = self.deadline - current\n\n        if remaining &lt;= self.warning_threshold:\n            return f\"WARNING: {self._format_duration(remaining)} remaining\"\n\n        return f\"OK: {self._format_duration(remaining)} remaining\"\n\n    def _format_duration(self, duration):\n        \"\"\"Format duration for display.\"\"\"\n        hours = duration.in_hours()\n        if hours &lt; 1:\n            return f\"{int(duration.total_minutes())} minutes\"\n        elif hours &lt; 24:\n            return f\"{int(hours)} hours\"\n        else:\n            days = int(duration.in_days())\n            remaining_hours = int(hours % 24)\n            if remaining_hours == 0:\n                return f\"{days} days\"\n            return f\"{days} days, {remaining_hours} hours\"\n\n# Example usage\nproject_deadline = DateTime(2024, 1, 20, 17, 0, tz=\"UTC\")\ntracker = DeadlineTracker(project_deadline, warning_hours=48)\n\nprint(f\"Project status: {tracker.status()}\")\n</code></pre>"},{"location":"examples/common-tasks/#scheduling-and-recurrence","title":"Scheduling and Recurrence","text":""},{"location":"examples/common-tasks/#meeting-scheduler","title":"Meeting Scheduler","text":"<pre><code>from carbonic import DateTime, Period, Duration\n\nclass MeetingScheduler:\n    def __init__(self, start_date, duration_minutes=60):\n        self.start_date = start_date\n        self.duration = Duration(minutes=duration_minutes)\n\n    def weekly_meetings(self, count=10):\n        \"\"\"Generate weekly recurring meetings.\"\"\"\n        meetings = []\n        current = self.start_date\n\n        for _ in range(count):\n            end_time = current + self.duration\n            meetings.append({\n                'start': current,\n                'end': end_time,\n                'title': f\"Weekly Meeting - {current.format('F j, Y')}\"\n            })\n            current = current.add(days=7)\n\n        return meetings\n\n    def monthly_first_friday(self, months=6):\n        \"\"\"Generate monthly meetings on first Friday.\"\"\"\n        meetings = []\n        current_month = self.start_date.start_of(\"month\")\n\n        for _ in range(months):\n            # Find first Friday of the month (simplified implementation)\n            # Start from the first day of the month\n            first_day = current_month\n\n            # Find the first Friday (weekday 4 = Friday)\n            days_to_friday = (4 - first_day._dt.weekday()) % 7\n            first_friday = first_day.add(days=days_to_friday)\n\n            # Create meeting time with original time\n            meeting_time = DateTime(\n                first_friday.year, first_friday.month, first_friday.day,\n                self.start_date.hour, self.start_date.minute, self.start_date.second,\n                tz=self.start_date.tzinfo.key\n            )\n\n            end_time = meeting_time + self.duration\n            meetings.append({\n                'start': meeting_time,\n                'end': end_time,\n                'title': f\"Monthly Review - {meeting_time.format('F Y')}\"\n            })\n            current_month = current_month.add(months=1)\n\n        return meetings\n\n# Example usage\nstart_meeting = DateTime(2024, 1, 15, 14, 0, tz=\"America/New_York\")\nscheduler = MeetingScheduler(start_meeting, duration_minutes=90)\n\n# Weekly meetings\nweekly = scheduler.weekly_meetings(4)\nprint(\"Weekly Meetings:\")\nfor meeting in weekly:\n    print(f\"  {meeting['title']}: {meeting['start'].format('l, F j - H:i')}\")\n\nprint()\n\n# Monthly meetings\nmonthly = scheduler.monthly_first_friday(3)\nprint(\"Monthly Meetings:\")\nfor meeting in monthly:\n    print(f\"  {meeting['title']}: {meeting['start'].format('l, F j - H:i')}\")\n</code></pre>"},{"location":"examples/common-tasks/#event-countdown","title":"Event Countdown","text":"<pre><code>from carbonic import DateTime, Duration\nimport math\n\ndef create_countdown(event_datetime, event_name):\n    \"\"\"Create a countdown function for an event.\"\"\"\n\n    def countdown():\n        current = DateTime.now()\n\n        if current &gt;= event_datetime:\n            return f\"{event_name} has started!\"\n\n        remaining = event_datetime - current\n\n        days = int(remaining.in_days())\n        hours = int(remaining.in_hours() % 24)\n        minutes = int(remaining.total_minutes() % 60)\n        seconds = int(remaining.total_seconds() % 60)\n\n        parts = []\n        if days &gt; 0:\n            parts.append(f\"{days} days\")\n        if hours &gt; 0:\n            parts.append(f\"{hours} hours\")\n        if minutes &gt; 0:\n            parts.append(f\"{minutes} minutes\")\n        if seconds &gt; 0 and days == 0:  # Only show seconds if less than a day\n            parts.append(f\"{seconds} seconds\")\n\n        if not parts:\n            return f\"{event_name} starts now!\"\n\n        return f\"{event_name} in: {', '.join(parts)}\"\n\n    return countdown\n\n# Example usage\nlaunch_date = DateTime(2024, 6, 15, 12, 0, tz=\"UTC\")\nproduct_countdown = create_countdown(launch_date, \"Product Launch\")\n\nprint(product_countdown())\n</code></pre>"},{"location":"examples/common-tasks/#data-processing","title":"Data Processing","text":""},{"location":"examples/common-tasks/#log-analysis","title":"Log Analysis","text":"<pre><code>from carbonic import DateTime\nfrom typing import List, Dict\n\ndef parse_log_entries(log_lines: List[str]) -&gt; List[Dict]:\n    \"\"\"Parse log entries with timestamps.\"\"\"\n    entries = []\n\n    for line in log_lines:\n        # Assuming format: \"2024-01-15 14:30:45 [INFO] Message\"\n        try:\n            timestamp_str = line[:19]  # First 19 characters\n            dt = DateTime.from_format(timestamp_str, \"Y-m-d H:i:s\")\n\n            # Extract log level and message\n            rest = line[20:]\n            level_end = rest.find(']')\n            level = rest[1:level_end] if rest.startswith('[') else 'UNKNOWN'\n            message = rest[level_end + 2:] if level_end != -1 else rest\n\n            entries.append({\n                'timestamp': dt,\n                'level': level,\n                'message': message.strip()\n            })\n        except Exception as e:\n            print(f\"Failed to parse line: {line}\")\n            continue\n\n    return entries\n\ndef analyze_logs(entries: List[Dict]) -&gt; Dict:\n    \"\"\"Analyze log entries for patterns.\"\"\"\n    if not entries:\n        return {}\n\n    # Sort by timestamp\n    entries.sort(key=lambda x: x['timestamp'])\n\n    start_time = entries[0]['timestamp']\n    end_time = entries[-1]['timestamp']\n    duration = end_time - start_time\n\n    # Count by level\n    level_counts = {}\n    for entry in entries:\n        level = entry['level']\n        level_counts[level] = level_counts.get(level, 0) + 1\n\n    # Find peak hour\n    hourly_counts = {}\n    for entry in entries:\n        hour = entry['timestamp'].hour\n        hourly_counts[hour] = hourly_counts.get(hour, 0) + 1\n\n    peak_hour = max(hourly_counts.items(), key=lambda x: x[1])\n\n    return {\n        'total_entries': len(entries),\n        'time_span': duration,\n        'start_time': start_time,\n        'end_time': end_time,\n        'level_counts': level_counts,\n        'peak_hour': f\"{peak_hour[0]:02d}:00 ({peak_hour[1]} entries)\",\n        'entries_per_minute': len(entries) / max(duration.total_minutes(), 1)\n    }\n\n# Example usage\nsample_logs = [\n    \"2024-01-15 14:30:45 [INFO] Application started\",\n    \"2024-01-15 14:30:46 [INFO] Database connected\",\n    \"2024-01-15 14:31:15 [WARNING] High memory usage\",\n    \"2024-01-15 14:31:45 [ERROR] Database timeout\",\n    \"2024-01-15 14:32:00 [INFO] Retry successful\",\n]\n\nparsed_entries = parse_log_entries(sample_logs)\nanalysis = analyze_logs(parsed_entries)\n\nprint(\"Log Analysis:\")\nfor key, value in analysis.items():\n    print(f\"  {key}: {value}\")\n</code></pre>"},{"location":"examples/common-tasks/#time-series-data","title":"Time Series Data","text":"<pre><code>from carbonic import DateTime, Duration\nfrom typing import List, Tuple\n\nclass TimeSeriesData:\n    def __init__(self):\n        self.data: List[Tuple[DateTime, float]] = []\n\n    def add_point(self, timestamp: DateTime, value: float):\n        \"\"\"Add a data point.\"\"\"\n        self.data.append((timestamp, value))\n        # Keep sorted by timestamp\n        self.data.sort(key=lambda x: x[0])\n\n    def get_range(self, start: DateTime, end: DateTime) -&gt; List[Tuple[DateTime, float]]:\n        \"\"\"Get data points within a time range.\"\"\"\n        return [(ts, val) for ts, val in self.data if start &lt;= ts &lt;= end]\n\n    def resample_hourly(self) -&gt; List[Tuple[DateTime, float]]:\n        \"\"\"Resample data to hourly averages.\"\"\"\n        if not self.data:\n            return []\n\n        hourly_data = {}\n\n        for timestamp, value in self.data:\n            # Round down to the hour\n            hour_key = DateTime(timestamp.year, timestamp.month, timestamp.day, timestamp.hour, 0, 0, tz=timestamp.tzinfo.key)\n\n            if hour_key not in hourly_data:\n                hourly_data[hour_key] = []\n            hourly_data[hour_key].append(value)\n\n        # Calculate averages\n        result = []\n        for hour, values in sorted(hourly_data.items()):\n            avg_value = sum(values) / len(values)\n            result.append((hour, avg_value))\n\n        return result\n\n    def find_peaks(self, threshold: float) -&gt; List[Tuple[DateTime, float]]:\n        \"\"\"Find values above threshold.\"\"\"\n        return [(ts, val) for ts, val in self.data if val &gt; threshold]\n\n# Example usage\nts_data = TimeSeriesData()\n\n# Simulate adding temperature readings\nbase_time = DateTime(2024, 1, 15, 10, 0, tz=\"UTC\")\nfor i in range(24):  # 24 hours of data\n    timestamp = base_time.add(hours=i)\n    # Simulate temperature variation\n    temperature = 20 + 5 * (i % 12) / 12  # Varies between 20-25\u00b0C\n    ts_data.add_point(timestamp, temperature)\n\n# Analysis\nhourly_avg = ts_data.resample_hourly()\npeaks = ts_data.find_peaks(23.0)\n\nprint(f\"Total data points: {len(ts_data.data)}\")\nprint(f\"Hourly averages: {len(hourly_avg)}\")\nprint(f\"High temperature readings (&gt;23\u00b0C): {len(peaks)}\")\n\nif peaks:\n    print(\"Peak temperatures:\")\n    for timestamp, temp in peaks[:3]:  # Show first 3\n        print(f\"  {timestamp.format('H:i')}: {temp:.1f}\u00b0C\")\n</code></pre>"},{"location":"examples/common-tasks/#file-and-system-operations","title":"File and System Operations","text":""},{"location":"examples/common-tasks/#log-rotation","title":"Log Rotation","text":"<pre><code>from carbonic import DateTime, Duration\nimport os\nfrom pathlib import Path\n\nclass LogRotator:\n    def __init__(self, log_dir: str, max_age_days: int = 30):\n        self.log_dir = Path(log_dir)\n        self.max_age = Duration(days=max_age_days)\n\n    def rotate_logs(self):\n        \"\"\"Remove old log files.\"\"\"\n        if not self.log_dir.exists():\n            return\n\n        cutoff_time = DateTime.now() - self.max_age\n        removed_files = []\n\n        for log_file in self.log_dir.glob(\"*.log\"):\n            # Get file modification time\n            mtime = log_file.stat().st_mtime\n            file_datetime = DateTime.from_timestamp(mtime)\n\n            if file_datetime &lt; cutoff_time:\n                log_file.unlink()  # Delete file\n                removed_files.append(str(log_file))\n\n        return removed_files\n\n    def archive_logs(self, archive_pattern: str = \"archive_{Y}-{m}\"):\n        \"\"\"Archive logs by month.\"\"\"\n        if not self.log_dir.exists():\n            return\n\n        # Group files by month\n        monthly_groups = {}\n\n        for log_file in self.log_dir.glob(\"*.log\"):\n            mtime = log_file.stat().st_mtime\n            file_datetime = DateTime.from_timestamp(mtime)\n\n            # Create month key\n            month_key = file_datetime.format(\"Y-m\")\n\n            if month_key not in monthly_groups:\n                monthly_groups[month_key] = []\n            monthly_groups[month_key].append(log_file)\n\n        # Create archives\n        for month_key, files in monthly_groups.items():\n            archive_name = archive_pattern.format(\n                Y=month_key[:4],\n                m=month_key[5:]\n            )\n            archive_dir = self.log_dir / archive_name\n            archive_dir.mkdir(exist_ok=True)\n\n            for file_path in files:\n                # Move file to archive directory\n                new_path = archive_dir / file_path.name\n                file_path.rename(new_path)\n\n# Example usage (mock - doesn't actually create files)\nrotator = LogRotator(\"/var/log/myapp\", max_age_days=7)\nprint(\"Log rotation would remove files older than 7 days\")\n</code></pre>"},{"location":"examples/common-tasks/#backup-scheduling","title":"Backup Scheduling","text":"<pre><code>from carbonic import DateTime, Duration, Period\n\nclass BackupScheduler:\n    def __init__(self):\n        self.schedules = []\n\n    def add_daily_backup(self, hour: int = 2):\n        \"\"\"Schedule daily backup at specific hour.\"\"\"\n        tomorrow = DateTime.now().add(days=1)\n        next_backup = DateTime(tomorrow.year, tomorrow.month, tomorrow.day, hour, 0, 0, tz=tomorrow.tzinfo.key)\n        self.schedules.append({\n            'type': 'daily',\n            'next_run': next_backup,\n            'description': f\"Daily backup at {hour:02d}:00\"\n        })\n\n    def add_weekly_backup(self, weekday_name: str, hour: int = 1):\n        \"\"\"Schedule weekly backup on specific weekday.\"\"\"\n        now = DateTime.now()\n        # Simplified: schedule for next week same day\n        next_backup = now.add(days=7)\n        next_backup = DateTime(next_backup.year, next_backup.month, next_backup.day, hour, 0, 0, tz=next_backup.tzinfo.key)\n\n        self.schedules.append({\n            'type': 'weekly',\n            'next_run': next_backup,\n            'description': f\"Weekly backup on {weekday_name} at {hour:02d}:00\"\n        })\n\n    def get_next_backup(self):\n        \"\"\"Get the next scheduled backup.\"\"\"\n        if not self.schedules:\n            return None\n\n        return min(self.schedules, key=lambda x: x['next_run'])\n\n    def update_schedule(self):\n        \"\"\"Update completed backups to next occurrence.\"\"\"\n        now = DateTime.now()\n\n        for schedule in self.schedules:\n            if schedule['next_run'] &lt;= now:\n                if schedule['type'] == 'daily':\n                    schedule['next_run'] = schedule['next_run'].add(days=1)\n                elif schedule['type'] == 'weekly':\n                    schedule['next_run'] = schedule['next_run'].add(days=7)\n\n# Example usage\nscheduler = BackupScheduler()\nscheduler.add_daily_backup(hour=2)  # 2 AM daily\nscheduler.add_weekly_backup(\"Sunday\", hour=1)  # 1 AM Sunday\n\nnext_backup = scheduler.get_next_backup()\nif next_backup:\n    time_until = next_backup['next_run'] - DateTime.now()\n    print(f\"Next backup: {next_backup['description']}\")\n    print(f\"Time until backup: {time_until.in_hours():.1f} hours\")\n</code></pre>"},{"location":"examples/common-tasks/#performance-monitoring","title":"Performance Monitoring","text":""},{"location":"examples/common-tasks/#execution-time-measurement","title":"Execution Time Measurement","text":"<pre><code>from carbonic import DateTime, Duration\nfrom contextlib import contextmanager\nfrom typing import Dict, List\n\nclass PerformanceMonitor:\n    def __init__(self):\n        self.measurements: Dict[str, List[Duration]] = {}\n\n    @contextmanager\n    def measure(self, operation_name: str):\n        \"\"\"Context manager to measure operation duration.\"\"\"\n        start_time = DateTime.now()\n        try:\n            yield\n        finally:\n            end_time = DateTime.now()\n            duration = end_time - start_time\n\n            if operation_name not in self.measurements:\n                self.measurements[operation_name] = []\n            self.measurements[operation_name].append(duration)\n\n    def get_stats(self, operation_name: str) -&gt; Dict:\n        \"\"\"Get statistics for an operation.\"\"\"\n        if operation_name not in self.measurements:\n            return {}\n\n        durations = self.measurements[operation_name]\n        total_seconds = [d.total_seconds() for d in durations]\n\n        return {\n            'count': len(durations),\n            'total_time': sum(total_seconds),\n            'average_time': sum(total_seconds) / len(total_seconds),\n            'min_time': min(total_seconds),\n            'max_time': max(total_seconds),\n        }\n\n    def report(self):\n        \"\"\"Generate performance report.\"\"\"\n        print(\"Performance Report:\")\n        print(\"-\" * 50)\n\n        for operation, _ in self.measurements.items():\n            stats = self.get_stats(operation)\n            print(f\"\\n{operation}:\")\n            print(f\"  Executions: {stats['count']}\")\n            print(f\"  Average: {stats['average_time']:.3f}s\")\n            print(f\"  Min: {stats['min_time']:.3f}s\")\n            print(f\"  Max: {stats['max_time']:.3f}s\")\n            print(f\"  Total: {stats['total_time']:.3f}s\")\n\n# Example usage\nmonitor = PerformanceMonitor()\n\n# Simulate monitoring different operations\nimport time\n\nwith monitor.measure(\"database_query\"):\n    time.sleep(0.1)  # Simulate database query\n\nwith monitor.measure(\"api_call\"):\n    time.sleep(0.05)  # Simulate API call\n\nwith monitor.measure(\"database_query\"):\n    time.sleep(0.12)  # Another database query\n\nmonitor.report()\n</code></pre> <p>These examples demonstrate practical applications of Carbonic for real-world datetime manipulation tasks. Each example is self-contained and can be adapted to your specific needs.</p>"},{"location":"getting-started/concepts/","title":"Core Concepts","text":"<p>Understanding these fundamental concepts will help you work effectively with Carbonic.</p>"},{"location":"getting-started/concepts/#immutability","title":"Immutability","text":"<p>One of Carbonic's core principles is immutability. All datetime objects are frozen dataclasses that cannot be modified after creation.</p>"},{"location":"getting-started/concepts/#why-immutability","title":"Why Immutability?","text":"<pre><code>from carbonic import DateTime\n\noriginal = DateTime(2024, 1, 15, 10, 0, tz=\"UTC\")\n\n# This creates a NEW datetime object\nmodified = original.add(hours=2)\n\nprint(original)  # 2024-01-15T10:00:00+00:00 (unchanged!)\nprint(modified)  # 2024-01-15T12:00:00+00:00 (new object)\n\n# This would raise an error:\n# original.hour = 12  # FrozenInstanceError!\n</code></pre> <p>Benefits:</p> <ul> <li>Thread Safety: Immutable objects can be safely shared between threads</li> <li>Predictable Code: No unexpected mutations breaking your logic</li> <li>Easier Debugging: Values can't change unexpectedly</li> <li>Functional Programming: Natural fit for functional programming patterns</li> </ul>"},{"location":"getting-started/concepts/#working-with-immutability","title":"Working with Immutability","text":"<p>Since all operations return new objects, you can chain them fluently:</p> <pre><code>from carbonic import DateTime\n\ndt = DateTime(2024, 1, 15, 9, 0, tz=\"UTC\")\n\n# Chain operations - each returns a new object\nresult = (dt\n    .add(days=1)\n    .add(hours=2)\n    .start_of(\"hour\")\n)\n\n# Or store intermediate results\nnext_day = dt.add(days=1)\nwith_hours = next_day.add(hours=2)\nfinal = with_hours.start_of(\"hour\")\n</code></pre>"},{"location":"getting-started/concepts/#timezone-handling","title":"Timezone Handling","text":"<p>Carbonic uses Python's standard library <code>zoneinfo</code> for robust timezone support.</p>"},{"location":"getting-started/concepts/#timezone-aware-by-default","title":"Timezone-Aware by Default","text":"<pre><code>from carbonic import DateTime\n\n# Always specify timezone (UTC is default)\nutc_time = DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")\nlocal_time = DateTime(2024, 1, 15, 14, 30, tz=\"America/New_York\")\n\n# Current time methods default to UTC\ncurrent_utc = DateTime.now()  # UTC\ncurrent_local = DateTime.now(\"America/New_York\")  # Local timezone\n</code></pre>"},{"location":"getting-started/concepts/#timezone-conversions","title":"Timezone Conversions","text":"<pre><code>from carbonic import DateTime\n\n# Create in one timezone\nparis_time = DateTime(2024, 1, 15, 15, 30, tz=\"Europe/Paris\")\n\n# Represent the same moment in different timezones\n# Paris time: 15:30 CET (UTC+1)\ntokyo_time = DateTime(2024, 1, 15, 23, 30, tz=\"Asia/Tokyo\")   # Same moment, different timezone\nutc_time = DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")           # Same moment in UTC\n\nprint(f\"Paris: {paris_time}\")  # 2024-01-15T15:30:00+01:00\nprint(f\"Tokyo: {tokyo_time}\")  # 2024-01-15T23:30:00+09:00\nprint(f\"UTC:   {utc_time}\")    # 2024-01-15T14:30:00+00:00\n</code></pre>"},{"location":"getting-started/concepts/#naive-vs-aware","title":"Naive vs Aware","text":"<p>Carbonic strongly encourages timezone-aware datetimes:</p> <pre><code>from carbonic import DateTime\n\n# Timezone-aware (recommended)\naware = DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")\nprint(aware.tzinfo)  # &lt;ZoneInfo 'UTC'&gt;\n\n# Naive datetime (discouraged)\nnaive = DateTime(2024, 1, 15, 14, 30, tz=None)\nprint(naive.tzinfo)  # None\n\n# Converting naive to aware - create new DateTime with timezone\naware_from_naive = DateTime(naive.year, naive.month, naive.day, naive.hour, naive.minute, naive.second, tz=\"UTC\")\n</code></pre> <p>Avoid Naive Datetimes</p> <p>Naive datetimes (without timezone info) can lead to bugs and confusion. Always specify a timezone when possible.</p>"},{"location":"getting-started/concepts/#fluent-api-design","title":"Fluent API Design","text":"<p>Carbonic's API is designed to read naturally and chain operations:</p>"},{"location":"getting-started/concepts/#method-naming-convention","title":"Method Naming Convention","text":"<p>Methods are named to be readable and self-documenting:</p> <pre><code>from carbonic import DateTime\n\ndt = DateTime(2024, 1, 15, 10, 30, tz=\"UTC\")\n\n# Descriptive method names\nnext_monday = dt.add(days=7)  # Simplified: add 7 days for next week\nend_of_month = dt.end_of(\"month\")\nbusiness_day = dt.to_date().add_business_days(1).to_datetime()\nmidnight = dt.start_of(\"day\")\n\n# Boolean methods start with \"is_\"\nprint(dt.to_date().is_weekend())      # False\nprint(dt.to_date().is_weekday())      # True (business day)\nprint(dt &lt; DateTime.now())  # True (if current time is later)\n\n# Navigation methods\nmidnight = dt.start_of(\"day\")\n</code></pre>"},{"location":"getting-started/concepts/#chaining-operations","title":"Chaining Operations","text":"<p>The fluent API allows natural chaining:</p> <pre><code>from carbonic import DateTime\n\n# Readable chains\ndt = DateTime.now(\"UTC\")\ndate_obj = dt.to_date()\nnext_business_date = date_obj.add_business_days(1)\nnext_business_dt = DateTime(\n    next_business_date.year,\n    next_business_date.month,\n    next_business_date.day,\n    0,\n    0,\n    0,\n    tz=\"UTC\",\n)\nnext_business_end = next_business_dt.end_of(\"day\").subtract(hours=1)\n\n# Equivalent to:\nnow = DateTime.now(\"UTC\")\nnext_business_date = now.to_date().add_business_days(1)\nnext_business = DateTime(\n    next_business_date.year,\n    next_business_date.month,\n    next_business_date.day,\n    0,\n    0,\n    0,\n    tz=\"UTC\",\n)\nend_of_day = next_business.end_of(\"day\")\nresult = end_of_day.subtract(hours=1)\n</code></pre>"},{"location":"getting-started/concepts/#type-safety","title":"Type Safety","text":"<p>Carbonic is designed with strong typing throughout:</p>"},{"location":"getting-started/concepts/#full-type-annotations","title":"Full Type Annotations","text":"<pre><code>from carbonic import DateTime, Duration, Date\n\n# All methods are fully typed\ndt: DateTime = DateTime.now()\nduration: Duration = Duration(hours=2)\nfuture: DateTime = dt + duration  # Type checker knows this is DateTime\n\n# Date operations return Date objects\ndate: Date = dt.to_date()\ntomorrow: Date = date.add(days=1)\n</code></pre>"},{"location":"getting-started/concepts/#generic-return-types","title":"Generic Return Types","text":"<p>Methods return the appropriate types:</p> <pre><code>from carbonic import DateTime, Date\n\ndt = DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")\ndate = Date(2024, 1, 15)\n\n# DateTime methods return DateTime\nnew_dt: DateTime = dt.add(hours=2)\n\n# Date methods return Date\nnew_date: Date = date.add(days=1)\n\n# Conversion methods return appropriate types\nconverted_date: Date = dt.to_date()\nconverted_datetime: DateTime = date.to_datetime(tz=\"UTC\")\n</code></pre>"},{"location":"getting-started/concepts/#ide-support","title":"IDE Support","text":"<p>Strong typing enables excellent IDE support:</p> <ul> <li>Autocomplete: See all available methods</li> <li>Type Checking: Catch errors before runtime</li> <li>Refactoring: Safe renaming and restructuring</li> <li>Documentation: Inline help and parameter hints</li> </ul>"},{"location":"getting-started/concepts/#performance-considerations","title":"Performance Considerations","text":"<p>Carbonic is designed for both ease of use and performance:</p>"},{"location":"getting-started/concepts/#efficient-immutability","title":"Efficient Immutability","text":"<pre><code>from carbonic import DateTime\n\n# Objects use __slots__ for memory efficiency  \ndt = DateTime.now()\nprint(f\"DateTime object: {dt}\")\n\n# Internal datetime is reused when possible\ndt1 = DateTime(2024, 1, 15, 10, 0, tz=\"UTC\")\ndt2 = DateTime(dt1.year, dt1.month, dt1.day, dt1.hour, 30, dt1.second, tz=\"UTC\")  # Create new with different minute\n</code></pre>"},{"location":"getting-started/concepts/#lazy-evaluation","title":"Lazy Evaluation","text":"<p>Expensive operations are performed only when needed:</p> <pre><code>from carbonic import DateTime\n\ndt = DateTime.now()\n\n# Formatting is lazy - only computed when string is accessed\nformatted = dt.format(\"l, F j, Y\")  # Not computed yet\nprint(formatted)  # Now it's computed\n</code></pre>"},{"location":"getting-started/concepts/#optional-acceleration","title":"Optional Acceleration","text":"<p>Use fast parsing when available:</p> <pre><code># Install with: pip install carbonic[fast]\nfrom carbonic import DateTime\n\n# Uses ciso8601 if available, falls back to stdlib\ndt = DateTime.parse(\"2024-01-15T14:30:00Z\")  # Fast parsing\n</code></pre>"},{"location":"getting-started/concepts/#error-handling","title":"Error Handling","text":"<p>Carbonic uses specific exceptions for different error conditions:</p> <pre><code>from carbonic import DateTime\nfrom carbonic.core.exceptions import ParseError\n\ntry:\n    # Invalid timezone will raise ZoneInfoNotFoundError from zoneinfo\n    dt = DateTime(2024, 1, 15, tz=\"Invalid/Timezone\")\nexcept Exception as e:\n    print(f\"Timezone error: {e}\")\n\ntry:\n    # Invalid date format\n    dt = DateTime.parse(\"invalid\", \"Y-m-d\")\nexcept ParseError as e:\n    print(f\"Parse error: {e}\")\n</code></pre>"},{"location":"getting-started/concepts/#design-philosophy","title":"Design Philosophy","text":"<p>Understanding Carbonic's design philosophy helps you use it effectively:</p>"},{"location":"getting-started/concepts/#principle-of-least-surprise","title":"Principle of Least Surprise","text":"<p>Methods do what their names suggest:</p> <pre><code>from carbonic import DateTime\n\ndt = DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")\n\n# These do exactly what you'd expect\nprint(dt.start_of(\"day\"))    # 2024-01-15T00:00:00+00:00\nprint(dt.end_of(\"month\"))    # 2024-01-31T23:59:59.999999+00:00\nprint(dt.add(days=1))        # 2024-01-16T14:30:00+00:00\n</code></pre>"},{"location":"getting-started/concepts/#explicit-over-implicit","title":"Explicit Over Implicit","text":"<p>When there's ambiguity, Carbonic requires explicit choices:</p> <pre><code>from carbonic import DateTime\n\n# Explicit timezone specification\ndt = DateTime(2024, 1, 15, tz=\"UTC\")  # Clear intent\n\n# Explicit conversion\nnaive_dt = DateTime(2024, 1, 15, tz=None)\naware_dt = DateTime(naive_dt.year, naive_dt.month, naive_dt.day, tz=\"UTC\")  # Explicit conversion\n</code></pre>"},{"location":"getting-started/concepts/#modern-python-features","title":"Modern Python Features","text":"<p>Carbonic leverages modern Python capabilities:</p> <ul> <li>Dataclasses: Clean, efficient object definitions</li> <li>Type Hints: Full PEP 561 compliance</li> <li>Slots: Memory-efficient objects</li> <li>Union Types: Flexible parameter types (Python 3.12+ syntax)</li> </ul>"},{"location":"getting-started/concepts/#next-steps","title":"Next Steps","text":"<p>Now that you understand the core concepts:</p> <ol> <li>Practice: Try the examples in the Quick Start</li> <li>Explore: Read the detailed User Guide</li> <li>Apply: Check out real-world Examples</li> <li>Reference: Use the API Documentation for details</li> </ol>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<p>Carbonic requires Python 3.12 or higher. It's designed to work with modern Python features and type annotations.</p> <pre><code>python --version  # Should be 3.12+\n</code></pre>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#pypi-installation-recommended","title":"PyPI Installation (Recommended)","text":"<p>Install the latest stable version from PyPI:</p> <pre><code>pip install carbonic\n</code></pre>"},{"location":"getting-started/installation/#development-installation","title":"Development Installation","text":"<p>For the latest development version:</p> <pre><code>pip install git+https://github.com/marepilc/carbonic.git\n</code></pre>"},{"location":"getting-started/installation/#poetry","title":"Poetry","text":"<p>If you're using Poetry for dependency management:</p> <pre><code>poetry add carbonic\n</code></pre>"},{"location":"getting-started/installation/#uv","title":"UV","text":"<p>If you're using UV for package management:</p> <pre><code>uv add carbonic\n</code></pre>"},{"location":"getting-started/installation/#optional-dependencies","title":"Optional Dependencies","text":"<p>Carbonic offers optional dependencies for enhanced functionality:</p>"},{"location":"getting-started/installation/#performance-optimizations-recommended","title":"Performance Optimizations (Recommended)","text":"<p>For significantly faster ISO datetime parsing and other performance improvements:</p> <pre><code>pip install carbonic[performance]\n</code></pre> <p>This installs <code>ciso8601</code>, which provides C-accelerated ISO datetime parsing that's ~10x faster than the standard library, plus enables other performance optimizations like lazy evaluation caching.</p>"},{"location":"getting-started/installation/#pydantic-integration","title":"Pydantic Integration","text":"<p>For data validation and serialization with Pydantic:</p> <pre><code>pip install carbonic[pydantic]\n</code></pre> <p>This enables custom Pydantic field types for all Carbonic datetime classes, allowing seamless integration with FastAPI, SQLModel, and other Pydantic-based frameworks.</p>"},{"location":"getting-started/installation/#development","title":"Development","text":"<p>For development and contributing:</p> <pre><code>pip install carbonic[dev]\n</code></pre> <p>This includes testing, linting, documentation, and type checking tools.</p>"},{"location":"getting-started/installation/#all-optional-dependencies","title":"All Optional Dependencies","text":"<p>To install everything:</p> <pre><code>pip install carbonic[all]\n</code></pre>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<p>Verify that Carbonic is installed correctly:</p> <pre><code>import carbonic\nprint(carbonic.__version__)\n\n# Test basic functionality\nfrom carbonic import now, DateTime\n\ncurrent_time = now()\nprint(f\"Current time: {current_time}\")\n\ndt = DateTime(2025, 1, 15, 14, 30)\nprint(f\"Example datetime: {dt.format('Y-m-d H:i:s')}\")\n</code></pre> <p>Expected output: <pre><code>0.2.0\nCurrent time: 2025-01-15T10:30:00+00:00\nExample datetime: 2025-01-15 14:30:00\n</code></pre></p>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#importerror-no-module-named-carbonic","title":"ImportError: No module named 'carbonic'","text":"<p>This usually means the installation failed or you're using the wrong Python environment:</p> <ol> <li>Check your Python version: <code>python --version</code></li> <li>Verify pip is working: <code>pip --version</code></li> <li>Try reinstalling: <code>pip uninstall carbonic &amp;&amp; pip install carbonic</code></li> <li>Check virtual environment: <code>which python</code> and <code>which pip</code></li> </ol>"},{"location":"getting-started/installation/#modulenotfounderror-no-module-named-zoneinfo","title":"ModuleNotFoundError: No module named 'zoneinfo'","text":"<p>This should not happen with Python 3.12+, but if you see this error:</p> <ol> <li>Verify your Python version: <code>python --version</code></li> <li>Update Python to 3.12 or higher</li> <li>If using an older Python version, install the backport: <code>pip install backports.zoneinfo</code></li> </ol>"},{"location":"getting-started/installation/#performance-issues","title":"Performance Issues","text":"<p>If datetime parsing is slow:</p> <ol> <li>Install the performance extra: <code>pip install carbonic[performance]</code></li> <li>Verify ciso8601 is installed: <code>pip list | grep ciso8601</code></li> </ol>"},{"location":"getting-started/installation/#type-checking-issues","title":"Type Checking Issues","text":"<p>If you're using mypy and seeing type errors:</p> <ol> <li>Ensure you have the latest version: <code>pip install --upgrade carbonic</code></li> <li>Check mypy configuration for PEP 561 support</li> <li>Verify you're using a supported Python version (3.12+)</li> </ol>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Now that you have Carbonic installed, continue with:</p> <ul> <li>Quick Start Guide - Get up and running quickly</li> <li>Core Concepts - Understand the fundamental principles</li> <li>User Guide - Dive into specific features</li> </ul>"},{"location":"getting-started/migration/","title":"Migration Guide","text":"<p>This guide helps you migrate from other datetime libraries to Carbonic.</p>"},{"location":"getting-started/migration/#from-pythons-datetime","title":"From Python's datetime","text":"<p>Carbonic builds on Python's standard library while providing a more fluent API.</p>"},{"location":"getting-started/migration/#basic-object-creation","title":"Basic Object Creation","text":"Before (datetime)After (Carbonic) <pre><code>import datetime\nfrom zoneinfo import ZoneInfo\n\n# Current time\nnow = datetime.datetime.now(ZoneInfo(\"UTC\"))\n\n# Specific datetime\ndt = datetime.datetime(2024, 1, 15, 14, 30, tzinfo=ZoneInfo(\"UTC\"))\n\n# Date only\ndate = datetime.date(2024, 1, 15)\n</code></pre> <pre><code>from carbonic import DateTime, Date, now, today\n\n# Current time\nnow_dt = now(\"UTC\")  # UTC is default\n\n# Specific datetime\ndt = DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")\n\n# Date only\ndate = Date(2024, 1, 15)\n</code></pre>"},{"location":"getting-started/migration/#date-arithmetic","title":"Date Arithmetic","text":"Before (datetime)After (Carbonic) <pre><code>import datetime\n\ndt = datetime.datetime(2024, 1, 15, 14, 30)\n\n# Add time\nfuture = dt + datetime.timedelta(days=7, hours=2)\n\n# More complex operations require manual calculation\n# No built-in \"add months\" or \"end of month\"\n</code></pre> <pre><code>from carbonic import DateTime, Duration\n\ndt = DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")\n\n# Add time - multiple ways\nfuture1 = dt + Duration(days=7, hours=2)\nfuture2 = dt.add_days(7).add_hours(2)\n\n# Rich date operations\nnext_month = dt.add_months(1)\nend_of_month = dt.end_of_month()\nnext_friday = dt.next(Period.FRIDAY)\n</code></pre>"},{"location":"getting-started/migration/#formatting","title":"Formatting","text":"Before (datetime)After (Carbonic) <pre><code>import datetime\n\ndt = datetime.datetime(2024, 1, 15, 14, 30)\n\n# strftime only\nformatted = dt.strftime(\"%Y-%m-%d %H:%M:%S\")\niso_format = dt.isoformat()\n</code></pre> <pre><code>from carbonic import DateTime\n\ndt = DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")\n\n# Multiple format methods\nformatted = dt.format(\"Y-m-d H:i:s\")  # Carbon-style\niso_format = dt.to_iso_string()\ndate_only = dt.to_date_string()\ntime_only = dt.to_time_string()\n\n# Still supports strftime\nstrftime_format = dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n</code></pre>"},{"location":"getting-started/migration/#timezone-handling","title":"Timezone Handling","text":"Before (datetime)After (Carbonic) <pre><code>import datetime\nfrom zoneinfo import ZoneInfo\n\n# Create timezone-aware\nutc_dt = datetime.datetime(2024, 1, 15, 14, 30, tzinfo=ZoneInfo(\"UTC\"))\n\n# Convert timezone\nny_dt = utc_dt.astimezone(ZoneInfo(\"America/New_York\"))\n\n# Naive datetime (problematic)\nnaive = datetime.datetime(2024, 1, 15, 14, 30)\n</code></pre> <pre><code>from carbonic import DateTime\n\n# Create timezone-aware (encouraged)\nutc_dt = DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")\n\n# Convert timezone (fluent)\nny_dt = utc_dt.to_timezone(\"America/New_York\")\n\n# Naive datetime (discouraged but supported)\nnaive = DateTime(2024, 1, 15, 14, 30, tz=None)\naware = naive.assume_timezone(\"UTC\")\n</code></pre>"},{"location":"getting-started/migration/#from-arrow","title":"From Arrow","text":"<p>Arrow users will find Carbonic familiar with some improvements.</p>"},{"location":"getting-started/migration/#object-creation","title":"Object Creation","text":"Before (Arrow)After (Carbonic) <pre><code>import arrow\n\n# Current time\nnow = arrow.now()\nutc_now = arrow.utcnow()\n\n# Specific datetime\ndt = arrow.get(2024, 1, 15, 14, 30)\n\n# From string\nparsed = arrow.get(\"2024-01-15T14:30:00Z\")\n</code></pre> <pre><code>from carbonic import DateTime, now\n\n# Current time\nnow_dt = now()  # UTC by default\nlocal_now = now(\"America/New_York\")\n\n# Specific datetime\ndt = DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")\n\n# From string\nparsed = DateTime.from_iso(\"2024-01-15T14:30:00Z\")\n</code></pre>"},{"location":"getting-started/migration/#fluent-operations","title":"Fluent Operations","text":"Before (Arrow)After (Carbonic) <pre><code>import arrow\n\ndt = arrow.get(2024, 1, 15, 14, 30)\n\n# Fluent operations\nresult = (dt\n    .shift(days=7)\n    .replace(hour=0, minute=0, second=0)\n    .to(\"America/New_York\")\n)\n</code></pre> <pre><code>from carbonic import DateTime\n\ndt = DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")\n\n# Similar fluent operations\nresult = (dt\n    .add_days(7)\n    .start_of_day()\n    .to_timezone(\"America/New_York\")\n)\n</code></pre>"},{"location":"getting-started/migration/#formatting-and-humanizing","title":"Formatting and Humanizing","text":"Before (Arrow)After (Carbonic) <pre><code>import arrow\n\ndt = arrow.get(2024, 1, 15, 14, 30)\n\n# Formatting\nformatted = dt.format(\"YYYY-MM-DD HH:mm:ss\")\n\n# Humanizing\nhuman = dt.humanize()  # \"in 2 days\"\n</code></pre> <pre><code>from carbonic import DateTime\n\ndt = DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")\n\n# Formatting\nformatted = dt.format(\"Y-m-d H:i:s\")\n\n# Humanizing (with localization support)\nhuman = dt.diff_for_humans()  # \"2 days ago\"\n</code></pre>"},{"location":"getting-started/migration/#from-pendulum","title":"From Pendulum","text":"<p>Pendulum users will appreciate Carbonic's similar philosophy with stdlib focus.</p>"},{"location":"getting-started/migration/#basic-usage","title":"Basic Usage","text":"Before (Pendulum)After (Carbonic) <pre><code>import pendulum\n\n# Current time\nnow = pendulum.now()\nutc_now = pendulum.now(\"UTC\")\n\n# Specific datetime\ndt = pendulum.datetime(2024, 1, 15, 14, 30, tz=\"UTC\")\n\n# Date only\ndate = pendulum.date(2024, 1, 15)\n</code></pre> <pre><code>from carbonic import DateTime, Date, now, today\n\n# Current time\nnow_dt = now()  # UTC by default\nlocal_now = now(\"America/New_York\")\n\n# Specific datetime\ndt = DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")\n\n# Date only\ndate = Date(2024, 1, 15)\n</code></pre>"},{"location":"getting-started/migration/#periods-and-durations","title":"Periods and Durations","text":"Before (Pendulum)After (Carbonic) <pre><code>import pendulum\n\ndt = pendulum.datetime(2024, 1, 15, 14, 30, tz=\"UTC\")\n\n# Add periods\nfuture = dt.add(months=1, days=2, hours=3)\n\n# Subtract periods\npast = dt.subtract(weeks=2)\n\n# Duration between dates\ndiff = dt2 - dt1\n</code></pre> <pre><code>from carbonic import DateTime, Duration\n\ndt = DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")\n\n# Add time (fluent or duration objects)\nfuture = dt.add_months(1).add_days(2).add_hours(3)\nfuture_alt = dt + Duration(days=2, hours=3)  # months need special handling\n\n# Subtract time\npast = dt.subtract_weeks(2)\n\n# Duration between dates\ndiff = dt2 - dt1  # Returns Duration object\n</code></pre>"},{"location":"getting-started/migration/#common-migration-patterns","title":"Common Migration Patterns","text":""},{"location":"getting-started/migration/#error-handling","title":"Error Handling","text":"Before (Various)After (Carbonic) <pre><code># Different libraries use different exceptions\ntry:\n    dt = some_library.parse(\"invalid\")\nexcept ValueError:  # or TypeError, or custom exception\n    handle_error()\n</code></pre> <pre><code>from carbonic import DateTime\nfrom carbonic.core.exceptions import ParseError, InvalidTimezone\n\ntry:\n    dt = DateTime.from_format(\"invalid\", \"Y-m-d\")\nexcept ParseError:\n    handle_parse_error()\n\ntry:\n    dt = DateTime(2024, 1, 15, tz=\"Invalid/Zone\")\nexcept InvalidTimezone:\n    handle_timezone_error()\n</code></pre>"},{"location":"getting-started/migration/#working-with-business-days","title":"Working with Business Days","text":"Before (Manual)After (Carbonic) <pre><code>import datetime\n\ndef next_business_day(dt):\n    days_ahead = 1\n    if dt.weekday() == 4:  # Friday\n        days_ahead = 3\n    elif dt.weekday() == 5:  # Saturday\n        days_ahead = 2\n    return dt + datetime.timedelta(days=days_ahead)\n</code></pre> <pre><code>from carbonic import DateTime\n\ndt = DateTime(2024, 1, 15, tz=\"UTC\")\nnext_business = dt.next_business_day()\n\n# Also available:\nis_business = dt.is_business_day()\nbusiness_days_count = dt.business_days_until(future_dt)\n</code></pre>"},{"location":"getting-started/migration/#batch-operations","title":"Batch Operations","text":"Before (Manual)After (Carbonic) <pre><code>import datetime\nfrom typing import List\n\ndef add_days_to_list(dates: List[datetime.datetime], days: int):\n    return [dt + datetime.timedelta(days=days) for dt in dates]\n</code></pre> <pre><code>from carbonic import DateTime\nfrom typing import List\n\ndef add_days_to_list(dates: List[DateTime], days: int):\n    return [dt.add_days(days) for dt in dates]\n\n# Even better with method chaining:\nprocessed_dates = [\n    dt.add_days(7).end_of_week().to_timezone(\"UTC\")\n    for dt in original_dates\n]\n</code></pre>"},{"location":"getting-started/migration/#performance-considerations","title":"Performance Considerations","text":""},{"location":"getting-started/migration/#when-coming-from-arrowpendulum","title":"When Coming from Arrow/Pendulum","text":"<pre><code># These libraries have some overhead for convenience\n# Carbonic aims to be faster while maintaining ease of use\n\n# For bulk operations, consider:\nfrom carbonic import DateTime\n\n# Example data for demonstration\nmany_iso_strings = [\"2024-01-01T00:00:00Z\", \"2024-01-02T00:00:00Z\"]\n\n# Instead of parsing many strings:\ndates = [DateTime.parse(s) for s in many_iso_strings]\n\n# Consider creating once and using arithmetic:\nbase_date = DateTime(2024, 1, 1, tz=\"UTC\")\ndates = [base_date.add(days=i) for i in range(5)]  # Generate 5 dates for example\n</code></pre>"},{"location":"getting-started/migration/#memory-usage","title":"Memory Usage","text":"<pre><code># Carbonic uses __slots__ for memory efficiency\nfrom carbonic import DateTime\n\n# Each DateTime object is lightweight\ndt = DateTime.now()\nprint(dt.__slots__)  # ('_dt',)\n\n# Compared to regular objects, this uses less memory\n# Important for applications handling many datetime objects\n</code></pre>"},{"location":"getting-started/migration/#migration-checklist","title":"Migration Checklist","text":"<p>When migrating to Carbonic:</p> <ul> <li>[ ] Update imports: Change to <code>from carbonic import DateTime, Date, Duration</code></li> <li>[ ] Review timezone handling: Ensure all datetimes are timezone-aware</li> <li>[ ] Update method calls: Use Carbonic's fluent method names</li> <li>[ ] Check error handling: Update exception types</li> <li>[ ] Test thoroughly: Verify behavior matches expectations</li> <li>[ ] Install optional dependencies: Consider <code>carbonic[fast]</code> for performance</li> <li>[ ] Update type annotations: Use Carbonic types for better type checking</li> </ul>"},{"location":"getting-started/migration/#getting-help","title":"Getting Help","text":"<p>If you're migrating and run into issues:</p> <ol> <li>Check the API reference: API Documentation</li> <li>Look at examples: Common Tasks</li> <li>File an issue: GitHub Issues</li> <li>Ask questions: Use GitHub Discussions for help</li> </ol> <p>The Carbonic community is happy to help with migration questions!</p>"},{"location":"getting-started/quickstart/","title":"Quick Start","text":"<p>This guide will get you up and running with Carbonic in just a few minutes.</p>"},{"location":"getting-started/quickstart/#your-first-datetime","title":"Your First DateTime","text":"<p>Let's start with the basics - creating and working with datetime objects:</p> <pre><code>from carbonic import DateTime, now, today\n\n# Get current time (UTC by default)\ncurrent = now()\nprint(current)  # 2024-01-15T14:30:00+00:00\n\n# Get current time in a specific timezone\nny_time = now(\"America/New_York\")\nprint(ny_time)  # 2024-01-15T09:30:00-05:00\n\n# Create a specific datetime\nbirthday = DateTime(1990, 5, 15, 14, 30, tz=\"UTC\")\nprint(birthday)  # 1990-05-15T14:30:00+00:00\n</code></pre>"},{"location":"getting-started/quickstart/#basic-operations","title":"Basic Operations","text":"<p>Carbonic uses a fluent API - operations can be chained together naturally:</p> <pre><code>from carbonic import DateTime, Duration\n\n# Start with a datetime\ndt = DateTime(2024, 1, 15, 9, 0, tz=\"UTC\")\n\n# Chain operations together\nresult = (dt\n    .add(days=7)           # Add a week\n    .add(hours=2)          # Add 2 hours\n    .end_of(\"day\")         # Move to end of day\n)\n\nprint(result)  # 2024-01-22T23:59:59.999999+00:00\n</code></pre>"},{"location":"getting-started/quickstart/#formatting-dates","title":"Formatting Dates","text":"<p>Carbonic provides multiple ways to format dates and times:</p> <pre><code>from carbonic import DateTime\n\ndt = DateTime(2024, 1, 15, 14, 30, 45, tz=\"UTC\")\n\n# ISO format\nprint(dt.to_iso_string())        # \"2024-01-15T14:30:45+00:00\"\n\n# Custom format (PHP Carbon style)\nprint(dt.format(\"Y-m-d H:i:s\"))   # \"2024-01-15 14:30:45\"\nprint(dt.format(\"l, F j, Y\"))     # \"Monday, January 15, 2024\"\n\n# Date only\nprint(dt.to_date_string())       # \"2024-01-15\"\n\n# Time only\nprint(dt.to_time_string())       # \"14:30:45\"\n</code></pre>"},{"location":"getting-started/quickstart/#relative-dates-and-times","title":"Relative Dates and Times","text":"<p>Carbonic provides clean functions for relative date/time operations:</p> <pre><code>from carbonic import DateTime, Date, today, tomorrow, yesterday\n\n# Simple date functions\ntoday_date = today()          # Today's date\ntomorrow_date = tomorrow()    # Tomorrow's date\nyesterday_date = yesterday()  # Yesterday's date\n\n# DateTime relative functions\ntoday_dt = DateTime.today()       # Today at midnight UTC\ntomorrow_dt = DateTime.tomorrow() # Tomorrow at midnight UTC\nnow_dt = DateTime.now()           # Current datetime\n\n# Future dates/times with next()\nnext_week = Date.next(\"week\")           # 1 week from today\nnext_month = DateTime.next(\"month\")     # 1 month from now\nnext_quarter = Date.next(\"quarter\", 2)  # 2 quarters from today\n\n# Past dates/times with previous()\nlast_week = Date.previous(\"week\")       # 1 week ago\nlast_month = DateTime.previous(\"month\") # 1 month ago\ntwo_days_ago = Date.previous(\"day\", 2)  # 2 days ago\n\n# Time-based relatives (DateTime only)\nnext_hour = DateTime.next(\"hour\")       # 1 hour from now\nprev_minutes = DateTime.previous(\"minute\", 30)  # 30 minutes ago\n</code></pre>"},{"location":"getting-started/quickstart/#working-with-durations","title":"Working with Durations","text":"<p>Durations represent spans of time and can be added to or subtracted from datetimes:</p> <pre><code>from carbonic import DateTime, Duration\n\ndt = DateTime(2024, 1, 15, 10, 0, tz=\"UTC\")\n\n# Create durations\nhour_and_half = Duration(hours=1, minutes=30)\nthree_days = Duration(days=3)\nmixed = Duration(days=1, hours=2, minutes=30, seconds=45)\n\n# Add durations\nfuture = dt + hour_and_half\nprint(future)  # 2024-01-15T11:30:00+00:00\n\n# Subtract durations\npast = dt - three_days\nprint(past)    # 2024-01-12T10:00:00+00:00\n\n# Chain with fluent methods\nresult = dt.add_duration(mixed).subtract(hours=1)\nprint(result)  # 2024-01-16T11:30:45+00:00\n</code></pre>"},{"location":"getting-started/quickstart/#date-only-operations","title":"Date-Only Operations","text":"<p>For when you only need dates without times:</p> <pre><code>from carbonic import Date, today\n\n# Get today's date\ntoday_date = today()\nprint(today_date)  # 2024-01-15\n\n# Create specific dates\nbirthday = Date(1990, 5, 15)\nholiday = Date(2024, 12, 25)\n\n# Date arithmetic\nnext_week = today_date.add(days=7)\nlast_month = today_date.subtract(months=1)\n\n# Date boundaries\nstart_of_month = today_date.start_of(\"month\")\nend_of_year = today_date.end_of(\"year\")\n\nprint(f\"Start of month: {start_of_month}\")  # 2024-01-01\nprint(f\"End of year: {end_of_year}\")        # 2024-12-31\n</code></pre>"},{"location":"getting-started/quickstart/#timezone-conversions","title":"Timezone Conversions","text":"<p>Carbonic makes timezone handling straightforward:</p> <pre><code>from carbonic import DateTime\n\n# Create datetime in different timezones\nutc_time = DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")\ntokyo_time = DateTime(2024, 1, 15, 23, 30, tz=\"Asia/Tokyo\")  # Same moment\nlondon_time = DateTime(2024, 1, 15, 14, 30, tz=\"Europe/London\")\nny_time = DateTime(2024, 1, 15, 9, 30, tz=\"America/New_York\")\n\nprint(f\"UTC:    {utc_time}\")     # 2024-01-15T14:30:00+00:00\nprint(f\"Tokyo:  {tokyo_time}\")   # 2024-01-15T23:30:00+09:00\nprint(f\"London: {london_time}\")  # 2024-01-15T14:30:00+00:00\nprint(f\"NY:     {ny_time}\")      # 2024-01-15T09:30:00-05:00\n</code></pre>"},{"location":"getting-started/quickstart/#comparisons","title":"Comparisons","text":"<p>Compare dates and times naturally:</p> <pre><code>from carbonic import DateTime\n\ndt1 = DateTime(2024, 1, 15, 10, 0, tz=\"UTC\")\ndt2 = DateTime(2024, 1, 15, 14, 0, tz=\"UTC\")\ndt3 = DateTime(2024, 1, 16, 10, 0, tz=\"UTC\")\n\n# Basic comparisons\nprint(dt1 &lt; dt2)   # True\nprint(dt2 &gt; dt3)   # False\nprint(dt1 == dt1)  # True\n\n# More comparisons\nprint(dt1 &lt;= dt2)  # True\nprint(dt2 &gt;= dt1)  # True\nprint(dt1 != dt2)  # True\n\n# Check if dates are the same\nsame_day = (dt1.year == dt2.year and dt1.month == dt2.month and dt1.day == dt2.day)\nprint(f\"Same day: {same_day}\")  # True\n</code></pre>"},{"location":"getting-started/quickstart/#common-use-cases","title":"Common Use Cases","text":""},{"location":"getting-started/quickstart/#working-with-apis","title":"Working with APIs","text":"<pre><code>from carbonic import DateTime\n\n# Parse ISO datetime from API response\napi_response = {\"created_at\": \"2024-01-15T14:30:00Z\"}\ncreated = DateTime.parse(api_response[\"created_at\"])\n\n# Format for API request\nrequest_data = {\n    \"start_date\": created.to_iso_string(),\n    \"end_date\": created.add(days=7).to_iso_string()\n}\n</code></pre>"},{"location":"getting-started/quickstart/#business-hours-calculations","title":"Business Hours Calculations","text":"<pre><code>from carbonic import DateTime, Period\n\n# Check if datetime falls on a business day\ndt = DateTime(2024, 1, 15)  # Monday\ndate_part = dt.to_date()\nprint(date_part.is_weekday())  # True\n\n# Find next business day\ndate_part = dt.to_date()\nnext_business_date = date_part.add_business_days(1)\nprint(f\"Next business day: {next_business_date}\")\n\n# Add business days\nweek_later = date_part.add_business_days(5)\nprint(f\"5 business days later: {week_later}\")\n</code></pre>"},{"location":"getting-started/quickstart/#scheduling-and-intervals","title":"Scheduling and Intervals","text":"<pre><code>from carbonic import DateTime, Duration\n\n# Schedule a meeting\nmeeting_start = DateTime(2024, 1, 22, 9, 0, tz=\"UTC\")  # Next Monday at 9 AM\nmeeting_duration = Duration(hours=1)\nmeeting_end = meeting_start + meeting_duration\n\nprint(f\"Meeting: {meeting_start} to {meeting_end}\")\nprint(f\"Duration: {meeting_duration.in_hours()} hours\")\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<p>Now that you've seen the basics, explore more advanced features:</p> <ul> <li>Core Concepts - Understand immutability, timezones, and design principles</li> <li>DateTime Guide - Complete DateTime class reference</li> <li>Duration Guide - Working with time spans</li> <li>Examples - Real-world usage patterns</li> </ul>"},{"location":"guide/date/","title":"Date","text":"<p>The <code>Date</code> class provides date-only operations without time components. It's perfect for working with birthdays, holidays, deadlines, and other date-centric data.</p>"},{"location":"guide/date/#overview","title":"Overview","text":"<p>Date objects are immutable and represent calendar dates independent of time zones or time of day. They provide intuitive methods for date arithmetic, comparisons, and formatting.</p> <pre><code>from carbonic import Date\n\n# Create a Date instance\ndate = Date(2024, 1, 15)\nprint(date)  # 2024-01-15\n</code></pre>"},{"location":"guide/date/#calendar-information","title":"Calendar Information","text":"<pre><code>from carbonic import Date\nimport calendar\n\ndate = Date(2024, 2, 15)  # February in a leap year\n\n# Year information\nprint(calendar.isleap(date.year))    # True (2024 is a leap year)\ndays_in_year = 366 if calendar.isleap(date.year) else 365\nprint(days_in_year)      # 366\n\n# Month information\nprint(date.end_of(\"month\").day)     # 29 (February in leap year)\n\n# Quarter information\nprint((date.month - 1) // 3 + 1)           # 1 (Q1: Jan-Mar)\nprint(date.start_of(\"quarter\")) # 2024-01-01\n</code></pre>"},{"location":"guide/date/#creating-date-objects","title":"Creating Date Objects","text":"<pre><code>from carbonic import Date, today\n\n# Create a specific date\nbirthday = Date(1990, 5, 15)\nprint(birthday)  # 1990-05-15\n\n# Get today's date\ntoday_date = today()\nprint(today_date)  # 2024-01-15 (example)\n</code></pre>"},{"location":"guide/date/#creating-date-objects_1","title":"Creating Date Objects","text":""},{"location":"guide/date/#constructor","title":"Constructor","text":"<pre><code>from carbonic import Date\n\n# Create specific dates\ndate = Date(2024, 1, 15)      # January 15, 2024\nnew_year = Date(2024, 1, 1)   # January 1, 2024\nchristmas = Date(2024, 12, 25) # December 25, 2024\n\n# Year, month, day are required\nprint(date)  # 2024-01-15\n</code></pre>"},{"location":"guide/date/#factory-methods","title":"Factory Methods","text":"<pre><code>from carbonic import Date\n\n# Today's date\ntoday_date = Date.today()  # Local timezone\ntoday_utc = Date.today(\"UTC\")  # Specific timezone\n\n# From Python date object\nimport datetime\nstdlib_date = datetime.date(2024, 1, 15)\ncarbonic_date = Date.from_date(stdlib_date)\n\n# From DateTime object\nfrom carbonic import DateTime\ndt = DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")\ndate_from_dt = dt.to_date()\n\n# From string (ISO format)\nparsed_date = Date.parse(\"2024-01-15\")\n\n# From custom format\ncustom_date = Date.parse(\"15/01/2024\", \"%d/%m/%Y\")\nus_date = Date.parse(\"01-15-2024\", \"%m-%d-%Y\")\n\n# Relative date functions\ntoday_date = Date.today()       # Today's date\ntomorrow_date = Date.tomorrow() # Tomorrow's date\nyesterday_date = Date.yesterday() # Yesterday's date\n\n# Future dates\nnext_day = Date.next(\"day\")         # Tomorrow\nnext_week = Date.next(\"week\", 2)    # 2 weeks from today\nnext_month = Date.next(\"month\")     # 1 month from today\nnext_quarter = Date.next(\"quarter\") # 3 months from today\nnext_year = Date.next(\"year\")       # 1 year from today\n\n# Past dates\nprev_day = Date.previous(\"day\")        # Yesterday\nprev_week = Date.previous(\"week\")      # 1 week ago\nprev_month = Date.previous(\"month\", 3) # 3 months ago\nprev_year = Date.previous(\"year\")      # 1 year ago\n</code></pre>"},{"location":"guide/date/#date-arithmetic","title":"Date Arithmetic","text":""},{"location":"guide/date/#adding-time","title":"Adding Time","text":"<pre><code>from carbonic import Date\n\ndate = Date(2024, 1, 15)\n\n# Add various units\ntomorrow = date.add(days=1)\nnext_week = date.add(days=7)  # Use days=7 instead of weeks=1\nnext_month = date.add(months=1)\nnext_year = date.add(years=1)\n\nprint(f\"Tomorrow: {tomorrow}\")     # 2024-01-16\nprint(f\"Next week: {next_week}\")   # 2024-01-22\nprint(f\"Next month: {next_month}\") # 2024-02-15\nprint(f\"Next year: {next_year}\")   # 2025-01-15\n\n# Chain operations\nfuture = date.add(years=1, months=6, days=10)\nprint(f\"Future: {future}\")  # 2025-07-25\n</code></pre>"},{"location":"guide/date/#subtracting-time","title":"Subtracting Time","text":"<pre><code>from carbonic import Date\n\ndate = Date(2024, 1, 15)\n\n# Subtract various units\nyesterday = date.subtract(days=1)\nlast_week = date.subtract(days=7)  # Use days=7 instead of weeks=1\nlast_month = date.subtract(months=1)\nlast_year = date.subtract(years=1)\n\nprint(f\"Yesterday: {yesterday}\")   # 2024-01-14\nprint(f\"Last week: {last_week}\")   # 2024-01-08\nprint(f\"Last month: {last_month}\") # 2023-12-15\nprint(f\"Last year: {last_year}\")   # 2023-01-15\n</code></pre>"},{"location":"guide/date/#date-differences","title":"Date Differences","text":"<pre><code>from carbonic import Date\n\nstart_date = Date(2024, 1, 15)\nend_date = Date(2024, 1, 22)\n\n# Calculate differences\nduration_diff = end_date.diff(start_date)\ndays_diff = int(duration_diff.in_days())\nweeks_diff = int(duration_diff.in_weeks())\n\nprint(f\"Days difference: {days_diff}\")    # 7\nprint(f\"Weeks difference: {weeks_diff}\")  # 1\n\n# Absolute difference\npast_date = Date(2024, 1, 10)\nabs_diff = abs(int(start_date.diff(past_date).in_days()))\nprint(f\"Absolute difference: {abs_diff}\")  # 5\n</code></pre>"},{"location":"guide/date/#date-boundaries-and-navigation","title":"Date Boundaries and Navigation","text":""},{"location":"guide/date/#start-and-end-points","title":"Start and End Points","text":"<pre><code>from carbonic import Date\n\ndate = Date(2024, 3, 15)  # March 15, 2024\n\n# Week boundaries\nstart_of_week = date.start_of(\"week\")      # Previous Monday\nend_of_week = date.end_of(\"week\")          # Next Sunday\n\n# Month boundaries\nstart_of_month = date.start_of(\"month\")    # 2024-01-01\nend_of_month = date.end_of(\"month\")        # 2024-01-31\n\n# Quarter boundaries\nstart_of_quarter = date.start_of(\"quarter\") # 2024-01-01 (Q1)\nend_of_quarter = date.end_of(\"quarter\")     # 2024-03-31 (Q1)\n\n# Year boundaries\nstart_of_year = date.start_of(\"year\")      # 2024-01-01\nend_of_year = date.end_of(\"year\")          # 2024-12-31\n\nprint(f\"Start of month: {start_of_month}\")\nprint(f\"End of month: {end_of_month}\")\n</code></pre>"},{"location":"guide/date/#weekday-navigation","title":"Weekday Navigation","text":"<pre><code>from carbonic import Date\n\ndate = Date(2024, 1, 15)  # Monday\n\n# Calculate next Friday (weekday 4)\ncurrent_weekday = date.weekday  # Monday = 0\ndays_until_friday = (4 - current_weekday) % 7\nif days_until_friday == 0:  # If today is Friday\n    days_until_friday = 7\nnext_friday = date.add(days=days_until_friday)\n\n# Calculate next Monday\ndays_until_monday = (0 - current_weekday) % 7\nif days_until_monday == 0:  # If today is Monday\n    days_until_monday = 7\nnext_monday = date.add(days=days_until_monday)\n\nprint(f\"Next Friday: {next_friday}\")      # 2024-01-19\nprint(f\"Next Monday: {next_monday}\")      # 2024-01-22\n\n# Weekday checks\nprint(f\"Is Monday: {date.weekday == 0}\")     # True\nprint(f\"Is weekend: {date.is_weekend()}\")   # False\nprint(f\"Is weekday: {date.is_weekday()}\")   # True\n</code></pre>"},{"location":"guide/date/#business-day-operations","title":"Business Day Operations","text":"<pre><code>from carbonic import Date\n\ndate = Date(2024, 1, 15)  # Monday\n\n# Business day checks\nprint(f\"Is business day: {date.is_weekday()}\")  # True\n\n# Navigate business days\nnext_business = date.add_business_days(1)\nprevious_business = date.subtract_business_days(1)\n\nprint(f\"Next business day: {next_business}\")\nprint(f\"Previous business day: {previous_business}\")\n\n# Add business days (skipping weekends)\nin_5_business_days = date.add_business_days(5)\nprint(f\"5 business days later: {in_5_business_days}\")\n\n# Count business days between dates would require manual calculation\n# (No direct business_days_until method available)\n</code></pre>"},{"location":"guide/date/#comparisons","title":"Comparisons","text":""},{"location":"guide/date/#basic-comparisons","title":"Basic Comparisons","text":"<pre><code>from carbonic import Date\n\ndate1 = Date(2024, 1, 15)\ndate2 = Date(2024, 1, 20)\ndate3 = Date(2024, 1, 15)\n\n# Standard operators\nprint(date1 &lt; date2)   # True\nprint(date1 &gt; date2)   # False\nprint(date1 == date3)  # True\nprint(date1 != date2)  # True\n\n# Use standard comparison operators\nprint(date1 &lt; date2)      # True (date1 is before date2)\nprint(date1 &gt; date2)       # False (date1 is not after date2)\nprint(date1 == date3)   # True  # Use equality comparison instead\n</code></pre>"},{"location":"guide/date/#temporal-relationships","title":"Temporal Relationships","text":"<pre><code>from carbonic import Date, today\n\ndate = Date(2024, 1, 15)\ncurrent_date = today()\n\n# Relative to today using comparison operators\nprint(date &lt; current_date)       # True (if today is after Jan 15, 2024)\nprint(date &gt; current_date)       # False (if today is after Jan 15, 2024) \nprint(date == current_date)      # True (if today is Jan 15, 2024)\n\n# Between dates using comparison operators\nstart = Date(2024, 1, 10)\nend = Date(2024, 1, 20)\nprint(start &lt;= date &lt;= end)  # True\n</code></pre>"},{"location":"guide/date/#date-specific-comparisons","title":"Date-Specific Comparisons","text":"<pre><code>from carbonic import Date\n\ndate = Date(2024, 3, 15)\n\n# Same period checks\nmarch_1 = Date(2024, 3, 1)\napril_15 = Date(2024, 4, 15)\nnext_year = Date(2025, 3, 15)\n\nprint(date.month == march_1.month)    # True\nprint(date.month == april_15.month)   # False\nprint(date.year == next_year.year)   # False\n\n# Quarter checks\nprint((date.month - 1) // 3 == (march_1.month - 1) // 3)  # True (both in Q1)\n</code></pre>"},{"location":"guide/date/#formatting-and-output","title":"Formatting and Output","text":""},{"location":"guide/date/#built-in-formats","title":"Built-in Formats","text":"<pre><code>from carbonic import Date\n\ndate = Date(2024, 1, 15)\n\n# Standard formats\nprint(date.to_iso_string())      # \"2024-01-15\"\nprint(str(date))                 # \"2024-01-15\"\n\n# Alternative formats using format method\nprint(date.format(\"Y-m-d\"))   # \"2024-01-15\"\nprint(date.format(\"d/m/Y\"))   # \"15/01/2024\"\nprint(date.format(\"F j, Y\")) # \"January 15, 2024\"\n</code></pre>"},{"location":"guide/date/#custom-formatting","title":"Custom Formatting","text":"<pre><code>from carbonic import Date\n\ndate = Date(2024, 1, 15)\n\n# Carbon-style formatting\nprint(date.format(\"Y-m-d\"))       # \"2024-01-15\"\nprint(date.format(\"d/m/Y\"))       # \"15/01/2024\"\nprint(date.format(\"l, F j, Y\"))   # \"Monday, January 15, 2024\"\nprint(date.format(\"D M j, Y\"))    # \"Mon Jan 15, 2024\"\n\n# Python strftime (also supported)\nprint(date.strftime(\"%Y-%m-%d\"))       # \"2024-01-15\"\nprint(date.strftime(\"%B %d, %Y\"))      # \"January 15, 2024\"\nprint(date.strftime(\"%A, %b %d\"))      # \"Monday, Jan 15\"\n</code></pre>"},{"location":"guide/date/#format-tokens-for-dates","title":"Format Tokens for Dates","text":"Token Description Example <code>Y</code> 4-digit year 2024 <code>y</code> 2-digit year 24 <code>m</code> Month (01-12) 01 <code>n</code> Month (1-12) 1 <code>M</code> Short month name Jan <code>F</code> Full month name January <code>d</code> Day (01-31) 15 <code>j</code> Day (1-31) 15 <code>D</code> Short day name Mon <code>l</code> Full day name Monday <code>S</code> Ordinal suffix st, nd, rd, th <code>w</code> Day of week (0=Sunday) 1 <code>N</code> Day of week (1=Monday) 1"},{"location":"guide/date/#conversion-methods","title":"Conversion Methods","text":""},{"location":"guide/date/#to-other-types","title":"To Other Types","text":"<pre><code>from carbonic import Date\n\ndate = Date(2024, 1, 15)\n\n# To Python date object\nstdlib_date = date.to_date()\nprint(type(stdlib_date))  # &lt;class 'datetime.date'&gt;\n\n# To datetime.datetime object (with timezone)\ndt_utc = date.to_datetime(\"UTC\")\ndt_local = date.to_datetime(\"America/New_York\")\n\nprint(dt_utc)    # 2024-01-15 00:00:00+00:00\nprint(dt_local)  # 2024-01-15 00:00:00-05:00\n\n# To timestamp (convert via datetime)\ntimestamp_utc = dt_utc.timestamp()\nprint(timestamp_utc)  # Unix timestamp for midnight UTC\n</code></pre>"},{"location":"guide/date/#string-representations","title":"String Representations","text":"<pre><code>from carbonic import Date\n\ndate = Date(2024, 1, 15)\n\n# String representations\nprint(str(date))   # \"2024-01-15\"\nprint(repr(date))  # \"Date(2024, 1, 15)\"\n\n# ISO format\nprint(date.to_iso_string())  # \"2024-01-15\"\n</code></pre>"},{"location":"guide/date/#property-access","title":"Property Access","text":""},{"location":"guide/date/#date-components","title":"Date Components","text":"<pre><code>from carbonic import Date\n\ndate = Date(2024, 1, 15)\n\n# Basic properties\nprint(date.year)         # 2024\nprint(date.month)        # 1\nprint(date.day)          # 15\n\n# Derived properties  \nprint(date.to_date().weekday())      # 0 (Monday = 0, Sunday = 6)\nprint(date.to_date().timetuple().tm_yday)  # 15 (day of year)\nprint(date.to_date().isocalendar().week)  # 3 (week of year)\nprint((date.month - 1) // 3 + 1)      # 1 (calculate quarter)\n\n# Month information\nprint(date.end_of(\"month\").day)  # 31 (days in month via end_of method)\nprint(date.format(\"F\"))     # \"January\" (month name)\nprint(date.format(\"M\"))     # \"Jan\" (month abbreviation)\n\n# Week information  \nprint(date.format(\"l\"))   # \"Monday\" (weekday name)\nprint(date.format(\"D\"))   # \"Mon\" (weekday abbreviation)\n</code></pre>"},{"location":"guide/date/#calendar-information_1","title":"Calendar Information","text":"<pre><code>from carbonic import Date\n\ndate = Date(2024, 2, 15)  # February in a leap year\n\n# Year information\nimport calendar\nprint(calendar.isleap(date.year))    # True (2024 is a leap year)\nprint(366 if calendar.isleap(date.year) else 365)  # 366\n\n# Month information\nprint(date.end_of(\"month\").day)     # 29 (February in leap year)\n\n# Quarter information\nprint((date.month - 1) // 3 + 1)           # 1 (Q1: Jan-Mar)\nprint(date.start_of(\"quarter\")) # 2024-01-01\n</code></pre>"},{"location":"guide/date/#common-use-cases","title":"Common Use Cases","text":""},{"location":"guide/date/#age-calculations","title":"Age Calculations","text":"<pre><code>from carbonic import Date, today\n\nbirthday = Date(1990, 5, 15)\ntoday_date = today()\n\n# Calculate age in years using manual calculation\nage_years = today_date.year - birthday.year\n# Adjust if birthday hasn't occurred this year\nif (today_date.month, today_date.day) &lt; (birthday.month, birthday.day):\n    age_years -= 1\nprint(f\"Age: {age_years} years\")\n\n# More precise age calculation\ndef calculate_age(birth_date, reference_date=None):\n    if reference_date is None:\n        reference_date = today()\n\n    years = reference_date.year - birth_date.year\n\n    # Adjust if birthday hasn't occurred this year\n    if (reference_date.month, reference_date.day) &lt; (birth_date.month, birth_date.day):\n        years -= 1\n\n    return years\n\nprecise_age = calculate_age(birthday)\nprint(f\"Precise age: {precise_age} years\")\n</code></pre>"},{"location":"guide/date/#holiday-and-event-management","title":"Holiday and Event Management","text":"<pre><code>from carbonic import Date, Period\n\nyear = 2024\n\n# Fixed holidays\nnew_years = Date(year, 1, 1)\nindependence_day = Date(year, 7, 4)\nchristmas = Date(year, 12, 25)\n\n# Calculated holidays (examples - simplified)\n# Martin Luther King Jr. Day (3rd Monday in January)\n# This is a simplified example - real calculation would be more complex\nmlk_day = Date(year, 1, 21)  # Approximate date for 3rd Monday\n\n# Memorial Day (last Monday in May) \n# Simplified - actual calculation would find the last Monday\nmemorial_day = Date(year, 5, 27)  # Approximate date\n\nholidays = [\n    (\"New Year's Day\", new_years),\n    (\"MLK Jr. Day\", mlk_day),\n    (\"Memorial Day\", memorial_day),\n    (\"Independence Day\", independence_day),\n    (\"Christmas\", christmas),\n]\n\nprint(\"2024 Holidays:\")\nfor name, date in holidays:\n    print(f\"{name}: {date.format('l, F j')}\")\n</code></pre>"},{"location":"guide/date/#project-planning","title":"Project Planning","text":"<pre><code>from carbonic import Date, today\n\n# Project timeline\nproject_start = today()\nproject_duration_days = 45\n\n# Calculate milestones\nmilestone_1 = project_start.add_business_days(10)  # 2 weeks\nmilestone_2 = project_start.add_business_days(25)  # 5 weeks\nproject_end = project_start.add_business_days(project_duration_days)\n\nprint(f\"Project Start: {project_start}\")\nprint(f\"Milestone 1: {milestone_1}\")\nprint(f\"Milestone 2: {milestone_2}\")\nprint(f\"Project End: {project_end}\")\n\n# Check if project ends on a weekend\nif project_end.is_weekend():\n    # Move to next Monday\n    days_to_add = 7 - project_end.weekday if project_end.weekday != 6 else 1\n    project_end = project_end.add(days=days_to_add)\n    print(f\"Adjusted End (Monday): {project_end}\")\n</code></pre>"},{"location":"guide/date/#date-ranges-and-iterations","title":"Date Ranges and Iterations","text":"<pre><code>from carbonic import Date\n\nstart_date = Date(2024, 1, 1)\nend_date = Date(2024, 1, 31)\n\n# Generate date range\ndef date_range(start, end):\n    current = start\n    while current &lt;= end:\n        yield current\n        current = current.add(days=1)\n\n# All dates in January 2024\njanuary_dates = list(date_range(start_date, end_date))\nprint(f\"January has {len(january_dates)} days\")\n\n# Only business days\nbusiness_days = [d for d in january_dates if d.is_weekday()]\nprint(f\"January has {len(business_days)} business days\")\n\n# Only weekends\nweekends = [d for d in january_dates if d.is_weekend()]\nprint(f\"January has {len(weekends)} weekend days\")\n</code></pre>"},{"location":"guide/date/#scheduling-and-recurrence","title":"Scheduling and Recurrence","text":"<pre><code>from carbonic import Date, Period\n\n# Meeting every Tuesday\nstart_date = Date(2024, 1, 2)  # First Tuesday of 2024\nmeeting_dates = []\n\ncurrent_date = start_date\nfor week in range(8):  # Next 8 weeks\n    meeting_dates.append(current_date)\n    current_date = current_date.add(days=7)  # Use days=7 instead of weeks=1\n\nprint(\"Weekly Tuesday meetings:\")\nfor date in meeting_dates:\n    print(f\"  {date.format('l, F j')}\")\n\n# Monthly meetings (first Friday of each month)\nmonthly_meetings = []\n\nfor month in range(1, 7):  # Next 6 months\n    first_of_month = Date(2024, month, 1)\n    # Find first Friday (weekday 4)\n    days_until_friday = (4 - first_of_month.weekday) % 7\n    first_friday = first_of_month.add(days=days_until_friday)\n    monthly_meetings.append(first_friday)\n\nprint(\"\\nMonthly first Friday meetings:\")\nfor date in monthly_meetings:\n    print(f\"  {date.format('F j, Y')}\")\n</code></pre>"},{"location":"guide/date/#best-practices","title":"Best Practices","text":""},{"location":"guide/date/#always-consider-time-zones-for-conversions","title":"Always Consider Time Zones for Conversions","text":"<pre><code>from carbonic import Date\n\ndate = Date(2024, 1, 15)\n\n# Good - explicit timezone when converting to DateTime\nutc_dt = date.to_datetime(tz=\"UTC\")\nlocal_dt = date.to_datetime(tz=\"America/New_York\")\n\n# This creates different moments in time:\nprint(utc_dt)    # 2024-01-15T00:00:00+00:00\nprint(local_dt)  # 2024-01-15T00:00:00-05:00\n</code></pre>"},{"location":"guide/date/#use-date-for-date-only-operations","title":"Use Date for Date-Only Operations","text":"<pre><code>from carbonic import Date, DateTime\n\n# Good - use Date for date-centric logic\nbirthday = Date(1990, 5, 15)\ntoday_date = Date.today()\n# Calculate age using manual calculation\nage = today_date.year - birthday.year\nif (today_date.month, today_date.day) &lt; (birthday.month, birthday.day):\n    age -= 1\n\n# Avoid - using DateTime for date-only operations\nbirthday_dt = DateTime(1990, 5, 15, tz=\"UTC\")  # Unnecessary complexity\n</code></pre>"},{"location":"guide/date/#handle-month-overflow-carefully","title":"Handle Month Overflow Carefully","text":"<pre><code>from carbonic import Date\n\n# Be aware of month overflow behavior\njan_31 = Date(2024, 1, 31)\n\n# Adding months can overflow\nfeb_result = jan_31.add(months=1)\nprint(feb_result)  # 2024-02-29 (leap year) or 2024-02-28\n\n# This is usually desired behavior, but be aware\nmar_result = jan_31.add(months=2)\nprint(mar_result)  # 2024-03-31 (back to 31st)\n</code></pre>"},{"location":"guide/date/#use-business-day-methods-for-work-schedules","title":"Use Business Day Methods for Work Schedules","text":"<pre><code>from carbonic import Date\n\n# Good - use business day methods for work-related dates\nproject_start = Date.today()\ndeadline = project_start.add_business_days(20)  # 4 work weeks\n\n# Avoid - manual weekend checking\nmanual_deadline = project_start.add(days=28)  # Includes weekends\n</code></pre>"},{"location":"guide/datetime/","title":"DateTime","text":"<p>The <code>DateTime</code> class is the heart of Carbonic, providing a comprehensive, immutable datetime object with timezone support and a fluent API.</p>"},{"location":"guide/datetime/#overview","title":"Overview","text":"<p>The <code>DateTime</code> class wraps Python's standard <code>datetime.datetime</code> while providing additional functionality and a more intuitive interface. Every <code>DateTime</code> object is immutable, meaning all operations return new instances.</p> <pre><code>from carbonic import DateTime\n\n# Create a DateTime instance\ndt = DateTime(2024, 1, 15, 14, 30, 0, tz=\"UTC\")\nprint(dt)  # 2024-01-15T14:30:00+00:00\n</code></pre>"},{"location":"guide/datetime/#get-current-time","title":"Get current time","text":"<p>current = now()  # UTC by default local = now(\"America/New_York\") <pre><code>## Creating DateTime Objects\n\n### Constructor\n\n```python\nfrom carbonic import DateTime\n\n# Full specification\ndt = DateTime(\n    year=2024,\n    month=1,\n    day=15,\n    hour=14,\n    minute=30,\n    second=45,\n    microsecond=123456,\n    tz=\"UTC\"\n)\n\n# Minimal specification (defaults to midnight UTC)\ndt = DateTime(2024, 1, 15)  # 2024-01-15T00:00:00+00:00\n\n# Without timezone (naive - not recommended)\nnaive = DateTime(2024, 1, 15, tz=None)\n</code></pre></p>"},{"location":"guide/datetime/#factory-methods","title":"Factory Methods","text":"<pre><code>import datetime\nfrom carbonic import DateTime\n\n# Current time\nnow_utc = DateTime.now()  # UTC by default\nnow_local = DateTime.now(\"America/New_York\")\n\n# From standard library datetime\nstdlib_dt = datetime.datetime(2024, 1, 15, 14, 30, tzinfo=datetime.timezone.utc)\ncarbonic_dt = DateTime.from_datetime(stdlib_dt)\n\n# From ISO string\niso_dt = DateTime.parse(\"2024-01-15T14:30:00Z\")\n\n# From custom format\ncustom_dt = DateTime.parse(\"15/01/2024 14:30\", \"d/m/Y H:i\")\n\n# Relative date/time functions\ntoday_dt = DateTime.today()       # Today at midnight UTC\ntomorrow_dt = DateTime.tomorrow() # Tomorrow at midnight UTC\nyesterday_dt = DateTime.yesterday() # Yesterday at midnight UTC\n\n# Future dates/times\nnext_hour = DateTime.next(\"hour\")        # 1 hour from now\nnext_day = DateTime.next(\"day\")          # 1 day from now (tomorrow)\nnext_week = DateTime.next(\"week\", 2)     # 2 weeks from now\nnext_month = DateTime.next(\"month\")      # 1 month from now\nnext_quarter = DateTime.next(\"quarter\")  # 3 months from now\n\n# Past dates/times\nprev_minute = DateTime.previous(\"minute\", 30)  # 30 minutes ago\nprev_day = DateTime.previous(\"day\")             # 1 day ago (yesterday)\nprev_week = DateTime.previous(\"week\")           # 1 week ago\nprev_month = DateTime.previous(\"month\", 3)      # 3 months ago\n</code></pre>"},{"location":"guide/datetime/#date-and-time-arithmetic","title":"Date and Time Arithmetic","text":""},{"location":"guide/datetime/#adding-time","title":"Adding Time","text":"<pre><code>from carbonic import DateTime, Duration\n\ndt = DateTime(2024, 1, 15, 10, 0)\n\n# Using fluent methods\nfuture = dt.add(years=1).add(months=2).add(days=3).add(hours=4)\n\n# Using Duration objects\nduration = Duration(days=7, hours=12, minutes=30)\nfuture = dt + duration\n\n# Specific unit methods\nnext_hour = dt.add(hours=1)\nnext_day = dt.add(days=1)\nnext_month = dt.add(months=1)\nnext_year = dt.add(years=1)\n</code></pre>"},{"location":"guide/datetime/#subtracting-time","title":"Subtracting Time","text":"<pre><code>from carbonic import DateTime, Duration\n\ndt = DateTime(2024, 1, 15, 10, 0)\n\n# Using fluent methods\npast = dt.subtract(days=5).subtract(hours=2)\n\n# Using Duration objects\nduration = Duration(days=3, hours=6)\npast = dt - duration\n\n# Specific unit methods\nlast_hour = dt.subtract(hours=1)\nyesterday = dt.subtract(days=1)\nlast_month = dt.subtract(months=1)\nlast_year = dt.subtract(years=1)\n</code></pre>"},{"location":"guide/datetime/#date-boundaries-and-navigation","title":"Date Boundaries and Navigation","text":""},{"location":"guide/datetime/#start-and-end-points","title":"Start and End Points","text":"<pre><code>from carbonic import DateTime\n\ndt = DateTime(2024, 3, 15, 14, 30, 45)\n\n# Day boundaries\nstart_of_day = dt.start_of(\"day\")        # 2024-03-15T00:00:00+00:00\nend_of_day = dt.end_of(\"day\")            # 2024-03-15T23:59:59.999999+00:00\n\n# Week boundaries\nstart_of_week = dt.start_of(\"week\")      # Previous Monday\nend_of_week = dt.end_of(\"week\")          # Next Sunday\n\n# Month boundaries\nstart_of_month = dt.start_of(\"month\")    # 2024-03-01T00:00:00+00:00\nend_of_month = dt.end_of(\"month\")        # 2024-03-31T23:59:59.999999+00:00\n\n# Quarter boundaries\nstart_of_quarter = dt.start_of(\"quarter\") # 2024-01-01T00:00:00+00:00\nend_of_quarter = dt.end_of(\"quarter\")     # 2024-03-31T23:59:59.999999+00:00\n\n# Year boundaries\nstart_of_year = dt.start_of(\"year\")      # 2024-01-01T00:00:00+00:00\nend_of_year = dt.end_of(\"year\")          # 2024-12-31T23:59:59.999999+00:00\n</code></pre>"},{"location":"guide/datetime/#navigation-by-weekday","title":"Navigation by Weekday","text":"<pre><code>from carbonic import DateTime\nimport datetime\n\ndt = DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")  # Monday\n\n# Check current weekday (Monday=0, Sunday=6)\nweekday = dt.to_datetime().weekday()\nprint(f\"Weekday: {weekday}\")  # 0 (Monday)\n\n# Calculate next Friday (4 is Friday)\ndays_until_friday = (4 - weekday) % 7\nif days_until_friday == 0:  # If today is Friday, get next Friday\n    days_until_friday = 7\nnext_friday = dt.add(days=days_until_friday)\n\n# Calculate next Monday\ndays_until_monday = (0 - weekday) % 7  # 0 is Monday\nif days_until_monday == 0:  # If today is Monday, get next Monday\n    days_until_monday = 7\nnext_monday = dt.add(days=days_until_monday)\n\n# Weekday checks using datetime methods\nprint(dt.to_datetime().weekday() == 0)     # True (Monday)\nprint(dt.to_datetime().weekday() == 4)     # False (Friday)\nprint(dt.to_datetime().weekday() &gt;= 5)     # False (not weekend)\nprint(dt.to_datetime().weekday() &lt; 5)      # True (is weekday)\n</code></pre>"},{"location":"guide/datetime/#business-day-operations","title":"Business Day Operations","text":"<pre><code>from carbonic import DateTime\n\ndt = DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")  # Monday\n\n# Business day checks using weekday\ndef is_business_day(dt):\n    return dt.to_datetime().weekday() &lt; 5  # Monday=0 to Friday=4\n\ndef add_business_days(dt, days):\n    current = dt\n    added = 0\n    while added &lt; days:\n        current = current.add(days=1)\n        if is_business_day(current):\n            added += 1\n    return current\n\n# Business day navigation\nprint(f\"Is business day: {is_business_day(dt)}\")  # True (Monday)\n\n# Add 5 business days\nfive_business_days_later = add_business_days(dt, 5)\nprint(f\"5 business days later: {five_business_days_later}\")\n\n# Count business days between dates\nstart_date = DateTime(2024, 1, 10, tz=\"UTC\")  # Wednesday\nend_date = DateTime(2024, 1, 20, tz=\"UTC\")    # Saturday\ncurrent = start_date\nbusiness_days = 0\nwhile current &lt;= end_date:\n    if is_business_day(current):\n        business_days += 1\n    current = current.add(days=1)\nprint(f\"Business days: {business_days}\")\n</code></pre>"},{"location":"guide/datetime/#timezone-operations","title":"Timezone Operations","text":""},{"location":"guide/datetime/#creating-with-timezones","title":"Creating with Timezones","text":"<pre><code>from carbonic import DateTime\n\n# Different timezone formats\nutc_dt = DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")\nny_dt = DateTime(2024, 1, 15, 14, 30, tz=\"America/New_York\")\nlondon_dt = DateTime(2024, 1, 15, 14, 30, tz=\"Europe/London\")\n\nprint(f\"UTC: {utc_dt}\")\nprint(f\"New York: {ny_dt}\")\nprint(f\"London: {london_dt}\")\n</code></pre>"},{"location":"guide/datetime/#using-timezone-objects","title":"Using Timezone Objects","text":"<pre><code># Using timezone objects\nfrom carbonic import DateTime\nfrom zoneinfo import ZoneInfo\n\n# Create with timezone string (DateTime internally creates ZoneInfo)\ntokyo_dt = DateTime(2024, 1, 15, 14, 30, tz=\"Asia/Tokyo\")\nprint(f\"Tokyo: {tokyo_dt}\")\n\n# Or use ZoneInfo for other operations\ntokyo_tz = ZoneInfo(\"Asia/Tokyo\")\nprint(f\"Timezone object: {tokyo_tz}\")\n</code></pre>"},{"location":"guide/datetime/#converting-timezones","title":"Converting Timezones","text":"<pre><code>from carbonic import DateTime\nfrom zoneinfo import ZoneInfo\n\n# Create in one timezone\nparis_time = DateTime(2024, 1, 15, 15, 30, tz=\"Europe/Paris\")\nprint(paris_time)  # 2024-01-15T15:30:00+01:00\n\n# Convert to different timezones by creating new instances\nutc_time = DateTime.from_datetime(paris_time.to_datetime().astimezone(ZoneInfo(\"UTC\")))\ntokyo_time = DateTime.from_datetime(paris_time.to_datetime().astimezone(ZoneInfo(\"Asia/Tokyo\")))\nny_time = DateTime.from_datetime(paris_time.to_datetime().astimezone(ZoneInfo(\"America/New_York\")))\n\nprint(f\"UTC:   {utc_time}\")    # 2024-01-15T14:30:00+00:00\nprint(f\"Tokyo: {tokyo_time}\")  # 2024-01-15T23:30:00+09:00\nprint(f\"NY:    {ny_time}\")     # 2024-01-15T09:30:00-05:00\n</code></pre>"},{"location":"guide/datetime/#working-with-naive-datetimes","title":"Working with Naive Datetimes","text":"<pre><code>from carbonic import DateTime\n\n# Naive datetime (no timezone)\nnaive = DateTime(2024, 1, 15, 14, 30, tz=None)\nprint(naive.tzinfo)  # None\n\n# Convert naive to timezone-aware by creating new instance\naware = DateTime(naive.year, naive.month, naive.day, naive.hour, \n                naive.minute, naive.second, naive.microsecond, tz=\"UTC\")\nprint(aware.tzinfo)  # &lt;ZoneInfo 'UTC'&gt;\n\n# Check if naive using tzinfo\nprint(naive.tzinfo is None)   # True (is naive)\nprint(aware.tzinfo is not None)   # True (is aware)\n</code></pre>"},{"location":"guide/datetime/#comparisons","title":"Comparisons","text":""},{"location":"guide/datetime/#basic-comparisons","title":"Basic Comparisons","text":"<pre><code>from carbonic import DateTime\n\ndt1 = DateTime(2024, 1, 15, 10, 0, tz=\"UTC\")\ndt2 = DateTime(2024, 1, 15, 14, 0, tz=\"UTC\")\ndt3 = DateTime(2024, 1, 16, 10, 0, tz=\"UTC\")\n\n# Standard operators\nprint(dt1 &lt; dt2)   # True\nprint(dt2 &gt; dt3)   # False\nprint(dt1 == dt1)  # True\nprint(dt1 != dt2)  # True\n\n# Using comparison operators instead of fluent methods\nprint(dt1 &lt; dt2)               # is_before equivalent: True\nprint(dt2 &gt; dt1)               # is_after equivalent: True\nprint(dt1 == dt1)              # is_same_instant equivalent: True\n</code></pre>"},{"location":"guide/datetime/#date-level-comparisons","title":"Date-Level Comparisons","text":"<pre><code>from carbonic import DateTime\n\ndt1 = DateTime(2024, 1, 15, 10, 0, tz=\"UTC\")\ndt2 = DateTime(2024, 1, 15, 20, 0, tz=\"UTC\")  # Same day, different time\ndt3 = DateTime(2024, 1, 16, 5, 0, tz=\"UTC\")   # Different day\n\n# Same date checks using date properties\nprint(dt1.to_date() == dt2.to_date())  # is_same_day equivalent: True\nprint(dt1.to_date() == dt3.to_date())  # is_same_day equivalent: False\n\nprint(dt1.year == dt2.year and dt1.month == dt2.month)  # is_same_month equivalent: True\nprint(dt1.year == dt2.year)  # is_same_year equivalent: True\n\n# Timezone-aware comparisons\nny_time = DateTime(2024, 1, 15, 5, 0, tz=\"America/New_York\")  # Same as 10:00 UTC\nprint(dt1 == ny_time)  # is_same_instant equivalent: True\n# For same day comparison, convert to same timezone first\nny_utc = DateTime.from_datetime(ny_time.to_datetime().astimezone())\nprint(dt1.to_date() == ny_utc.to_date())  # Different local dates check\n</code></pre>"},{"location":"guide/datetime/#temporal-relationships","title":"Temporal Relationships","text":"<pre><code>from carbonic import DateTime\n\ndt = DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")\ncurrent = DateTime.now(\"UTC\")\n\n# Relative to current time using comparison operators\nprint(dt &lt; current)       # is_past equivalent: True (if current time is after)\nprint(dt &gt; current)       # is_future equivalent: False (if current time is after)\n\n# Between dates using comparison operators\nstart = DateTime(2024, 1, 10, tz=\"UTC\")\nend = DateTime(2024, 1, 20, tz=\"UTC\")\nprint(start &lt;= dt &lt;= end)  # is_between equivalent: True\n</code></pre>"},{"location":"guide/datetime/#differences-and-durations","title":"Differences and Durations","text":""},{"location":"guide/datetime/#calculating-differences","title":"Calculating Differences","text":"<pre><code>from carbonic import DateTime\n\nstart = DateTime(2024, 1, 15, 10, 0, tz=\"UTC\")\nend = DateTime(2024, 1, 17, 14, 30, tz=\"UTC\")\n\n# Get Duration object\nduration = end - start\nprint(duration)  # Duration(days=2, hours=4, minutes=30)\n\n# Get difference using the diff method (returns Duration)\nduration = start.diff(end)\n\n# Access duration properties\nprint(f\"Days: {duration.in_days()}\")\nprint(f\"Hours: {duration.in_hours()}\")\nprint(f\"Minutes: {duration.in_minutes()}\")\nprint(f\"Seconds: {duration.in_seconds()}\")\n</code></pre>"},{"location":"guide/datetime/#working-with-durations","title":"Working with Durations","text":"<pre><code>from carbonic import DateTime\n\ndt = DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")\ncurrent = DateTime.now(\"UTC\")\n\n# Get duration object\nduration = current.diff(dt)\n\n# Access duration properties for humanization\ndays = duration.in_days()\nif abs(days) &gt;= 1:\n    if days &gt; 0:\n        human = f\"{int(days)} days ago\"\n    else:\n        human = f\"in {int(abs(days))} days\"\nelse:\n    hours = duration.in_hours()\n    if hours &gt; 0:\n        human = f\"{int(hours)} hours ago\"\n    else:\n        human = f\"in {int(abs(hours))} hours\"\n\nprint(human)\n</code></pre>"},{"location":"guide/datetime/#formatting-and-output","title":"Formatting and Output","text":""},{"location":"guide/datetime/#built-in-formats","title":"Built-in Formats","text":"<pre><code>from carbonic import DateTime\n\ndt = DateTime(2024, 1, 15, 14, 30, 45, 123456, tz=\"UTC\")\n\n# Standard formats\nprint(dt.to_iso_string())      # \"2024-01-15T14:30:45.123456+00:00\"\nprint(dt.to_date_string())     # \"2024-01-15\"\nprint(dt.to_time_string())     # \"14:30:45\"\nprint(dt.to_datetime_string()) # \"2024-01-15 14:30:45\"\n\n# With timezone conversion\nfrom zoneinfo import ZoneInfo\nny_dt = DateTime.from_datetime(dt.to_datetime().astimezone(ZoneInfo(\"America/New_York\")))\nprint(ny_dt.to_iso_string())   # \"2024-01-15T09:30:45.123456-05:00\"\n</code></pre>"},{"location":"guide/datetime/#custom-formatting","title":"Custom Formatting","text":"<pre><code>from carbonic import DateTime\n\ndt = DateTime(2024, 1, 15, 14, 30, 45, tz=\"UTC\")\n\n# Carbon-style formatting\nprint(dt.format(\"Y-m-d H:i:s\"))     # \"2024-01-15 14:30:45\"\nprint(dt.format(\"l, F j, Y\"))       # \"Monday, January 15, 2024\"\nprint(dt.format(\"D M j G:i A\"))     # \"Mon Jan 15 14:30 PM\"\n\n# Python strftime (also supported)\nprint(dt.strftime(\"%Y-%m-%d %H:%M:%S\"))  # \"2024-01-15 14:30:45\"\nprint(dt.strftime(\"%A, %B %d, %Y\"))      # \"Monday, January 15, 2024\"\n</code></pre>"},{"location":"guide/datetime/#format-tokens","title":"Format Tokens","text":"<p>Carbonic supports Carbon-style format tokens:</p> Token Description Example <code>Y</code> 4-digit year 2024 <code>y</code> 2-digit year 24 <code>m</code> Month (01-12) 01 <code>n</code> Month (1-12) 1 <code>M</code> Short month name Jan <code>F</code> Full month name January <code>d</code> Day (01-31) 15 <code>j</code> Day (1-31) 15 <code>D</code> Short day name Mon <code>l</code> Full day name Monday <code>H</code> Hour 24-format (00-23) 14 <code>G</code> Hour 24-format (0-23) 14 <code>h</code> Hour 12-format (01-12) 02 <code>g</code> Hour 12-format (1-12) 2 <code>i</code> Minutes (00-59) 30 <code>s</code> Seconds (00-59) 45 <code>A</code> AM/PM PM <code>a</code> am/pm pm"},{"location":"guide/datetime/#conversion-methods","title":"Conversion Methods","text":""},{"location":"guide/datetime/#to-other-types","title":"To Other Types","text":"<pre><code>from carbonic import DateTime\n\ndt = DateTime(2024, 1, 15, 14, 30, 45, tz=\"UTC\")\n\n# To Python datetime\nstdlib_dt = dt.to_datetime()\nprint(type(stdlib_dt))  # &lt;class 'datetime.datetime'&gt;\n\n# To Date object\ndate_obj = dt.to_date()\nprint(date_obj)  # 2024-01-15\n\n# To timestamp\ntimestamp = dt.to_datetime().timestamp()\nprint(timestamp)  # 1705330245.0\n\n# To naive datetime (removes timezone)\nnaive_dt = dt.to_datetime().replace(tzinfo=None)\nprint(naive_dt.tzinfo)  # None\n</code></pre>"},{"location":"guide/datetime/#string-representations","title":"String Representations","text":"<pre><code>from carbonic import DateTime\n\ndt = DateTime(2024, 1, 15, 14, 30, 45, tz=\"UTC\")\n\n# Default string representation\nprint(str(dt))   # \"2024-01-15T14:30:45+00:00\"\nprint(repr(dt))  # \"DateTime(2024, 1, 15, 14, 30, 45, tz='UTC')\"\n\n# For debugging - convert to standard datetime if needed\nprint(str(dt.to_datetime()))  # Shows as standard datetime format\n</code></pre>"},{"location":"guide/datetime/#property-access","title":"Property Access","text":""},{"location":"guide/datetime/#date-components","title":"Date Components","text":"<pre><code>from carbonic import DateTime\n\ndt = DateTime(2024, 1, 15, 14, 30, 45, 123456, tz=\"UTC\")\n\n# Date properties\nprint(dt.year)         # 2024\nprint(dt.month)        # 1\nprint(dt.day)          # 15\nprint(dt.to_datetime().weekday())  # 0\nprint(dt.to_datetime().timetuple().tm_yday)  # 15\nprint(dt.to_datetime().isocalendar().week)  # 3\n\n# Time properties\nprint(dt.hour)         # 14\nprint(dt.minute)       # 30\nprint(dt.second)       # 45\nprint(dt.microsecond)  # 123456\n\n# Timezone properties\nprint(dt.tzinfo)       # &lt;ZoneInfo 'UTC'&gt;\nprint(dt.to_datetime().utcoffset())  # datetime.timedelta(0)\n</code></pre>"},{"location":"guide/datetime/#derived-properties","title":"Derived Properties","text":"<pre><code>from carbonic import DateTime\n\ndt = DateTime(2024, 1, 15, 14, 30, 45, tz=\"UTC\")\n\n# Calculate quarter information\nquarter = (dt.month - 1) // 3 + 1\nprint(f\"Quarter: {quarter}\")  # 1\n\n# Week information using underlying datetime\nprint(f\"Week of year: {dt.to_datetime().isocalendar().week}\")  # 3\n\n# Month information using calendar module\nimport calendar\nprint(f\"Days in month: {calendar.monthrange(dt.year, dt.month)[1]}\")  # 31\n\n# Timezone information\nprint(f\"Timezone: {dt.tzinfo}\")  # UTC\n</code></pre>"},{"location":"guide/datetime/#best-practices","title":"Best Practices","text":""},{"location":"guide/datetime/#always-use-timezones","title":"Always Use Timezones","text":"<pre><code>from carbonic import DateTime\n\n# Good - explicit timezone\ndt = DateTime(2024, 1, 15, 14, 30, tz=\"UTC\")\n\n# Better - use factory methods for current time\ncurrent = DateTime.now(\"America/New_York\")\n\n# Avoid - naive datetime can cause bugs\nnaive = DateTime(2024, 1, 15, 14, 30, tz=None)\n</code></pre>"},{"location":"guide/datetime/#chain-operations-fluently","title":"Chain Operations Fluently","text":"<pre><code>from carbonic import DateTime\nfrom zoneinfo import ZoneInfo\n\n# Good - readable chains\nresult = (DateTime.now()\n    .add(days=1)\n    .start_of(\"day\")\n    .format(\"Y-m-d H:i:s\")\n)\n\n# For timezone conversion, create a new instance\nny_dt = DateTime.from_datetime(\n    DateTime.now().add(days=1).start_of(\"day\").to_datetime().astimezone(ZoneInfo(\"America/New_York\"))\n)\nresult = ny_dt.format(\"Y-m-d H:i:s\")\n\n# Also good - intermediate variables for clarity\ntomorrow = DateTime.now().add(days=1)\nstart_of_tomorrow = tomorrow.start_of(\"day\")\nny_time = DateTime.from_datetime(start_of_tomorrow.to_datetime().astimezone(ZoneInfo(\"America/New_York\")))\nformatted = ny_time.format(\"Y-m-d H:i:s\")\n</code></pre>"},{"location":"guide/datetime/#handle-edge-cases","title":"Handle Edge Cases","text":"<pre><code>from carbonic import DateTime\nfrom zoneinfo import ZoneInfo\n\n# Handle invalid dates\ntry:\n    invalid = DateTime(2024, 2, 30, tz=\"UTC\")  # February 30th\nexcept ValueError as e:\n    print(f\"Invalid date: {e}\")\n\n# Handle timezone conversions carefully\ndt = DateTime(2024, 3, 31, 2, 30, tz=\"America/New_York\")  # During DST transition\nutc_time = DateTime.from_datetime(dt.to_datetime().astimezone(ZoneInfo(\"UTC\")))  # This works correctly\n</code></pre>"},{"location":"guide/datetime/#performance-tips","title":"Performance Tips","text":""},{"location":"guide/datetime/#reuse-base-objects","title":"Reuse Base Objects","text":"<pre><code>from carbonic import DateTime\n\n# Create a base and derive from it\nbase = DateTime(2024, 1, 1, tz=\"UTC\")\ndates = [base.add(days=i) for i in range(365)]  # Efficient\n</code></pre>"},{"location":"guide/datetime/#use-appropriate-methods","title":"Use Appropriate Methods","text":"<pre><code>from carbonic import DateTime\n\ndt = DateTime.now()\n\n# Efficient - single operation\ntomorrow = dt.add(days=1)\n\n# Less efficient - multiple object creations\ntomorrow = dt.add(hours=24)  # Still one operation, but conceptually less clear\n</code></pre>"},{"location":"guide/datetime/#leverage-iso-parsing-for-performance","title":"Leverage ISO Parsing for Performance","text":"<pre><code># Install with: pip install carbonic[fast]\nfrom carbonic import DateTime\n\n# Fast ISO parsing with ciso8601 (if installed)\ndt = DateTime.parse(\"2024-01-15T14:30:00Z\")  # Very fast\n\n# Custom parsing with format string\ndt = DateTime.parse(\"2024-01-15 14:30:00\", \"Y-m-d H:i:s\")  # Custom format parsing\n</code></pre>"},{"location":"guide/duration/","title":"Duration","text":"<p>The <code>Duration</code> class represents a span of time - the difference between two moments. It provides a rich API for creating, manipulating, and working with time intervals.</p>"},{"location":"guide/duration/#overview","title":"Overview","text":"<p>Duration objects are immutable and represent exact amounts of time that can be added to or subtracted from datetime objects. Unlike periods (which are calendar-based), durations represent fixed amounts of time.</p> <pre><code>from carbonic import Duration, DateTime\n\n# Create a duration\nduration = Duration(days=2, hours=3, minutes=30)\nprint(duration)  # Duration(days=2, hours=3, minutes=30)\n\n# Use with DateTime\ndt = DateTime(2024, 1, 15, 10, 0, tz=\"UTC\")\nfuture = dt + duration\nprint(future)  # 2024-01-17T13:30:00+00:00\n</code></pre>"},{"location":"guide/duration/#creating-duration-objects","title":"Creating Duration Objects","text":""},{"location":"guide/duration/#constructor","title":"Constructor","text":"<pre><code>from carbonic import Duration\n\n# All units are optional\nduration = Duration(\n    days=7,\n    hours=12,\n    minutes=30,\n    seconds=45,\n    microseconds=123456\n)\n\n# Common patterns\none_hour = Duration(hours=1)\nhalf_day = Duration(hours=12)\nthree_days = Duration(days=3)\nmixed = Duration(days=1, hours=2, minutes=30)\n</code></pre>"},{"location":"guide/duration/#from-total-units","title":"From Total Units","text":"<pre><code>from carbonic import Duration\n\n# Create from total values\nfrom_seconds = Duration(seconds=3661)     # 1 hour, 1 minute, 1 second\nfrom_minutes = Duration(minutes=90)       # 1 hour, 30 minutes\nfrom_hours = Duration(hours=25)           # 25 hours\nfrom_days = Duration(days=1, hours=12)    # 1 day, 12 hours\n\n# From microseconds\nfrom_microseconds = Duration(microseconds=1500000)  # 1.5 seconds\n</code></pre>"},{"location":"guide/duration/#from-timedelta","title":"From Timedelta","text":"<pre><code>from carbonic import Duration\nimport datetime\n\n# Convert from Python's timedelta\ntd = datetime.timedelta(days=3, hours=2, minutes=15)\nduration = Duration(seconds=int(td.total_seconds()))\nprint(duration)  # 3.0 days, 2.0 hours, and 15.0 minutes\n</code></pre>"},{"location":"guide/duration/#zero-duration","title":"Zero Duration","text":"<pre><code>from carbonic import Duration\n\n# Zero duration\nzero = Duration()\nprint(zero)  # 0 seconds\n\n# Alternative - explicit zero values\nzero_alt = Duration(days=0, hours=0, minutes=0, seconds=0)\nprint(zero_alt)  # 0 seconds\n</code></pre>"},{"location":"guide/duration/#duration-arithmetic","title":"Duration Arithmetic","text":""},{"location":"guide/duration/#adding-durations","title":"Adding Durations","text":"<pre><code>from carbonic import Duration\n\nd1 = Duration(hours=2, minutes=30)\nd2 = Duration(hours=1, minutes=45)\n\n# Add durations\ntotal = d1 + d2\nprint(total)  # Duration(hours=4, minutes=15)\n\n# Chain additions\nresult = (Duration(hours=1) +\n    Duration(minutes=30) +\n    Duration(seconds=45)\n)\nprint(result)  # 1 hour, 30 minutes, and 45 seconds\n</code></pre>"},{"location":"guide/duration/#subtracting-durations","title":"Subtracting Durations","text":"<pre><code>from carbonic import Duration\n\nd1 = Duration(hours=3, minutes=30)\nd2 = Duration(hours=1, minutes=15)\n\n# Subtract durations\ndifference = d1 - d2\nprint(difference)  # Duration(hours=2, minutes=15)\n\n# Same result using operator\nresult = d1 - d2\nprint(result)  # 2 hours and 15 minutes\n</code></pre>"},{"location":"guide/duration/#multiplication-and-division","title":"Multiplication and Division","text":"<pre><code>from carbonic import Duration\n\nbase = Duration(hours=2, minutes=30)\n\n# Multiply by scalar\ndoubled = base * 2\nprint(doubled)  # 5 hours\n\n# Division not directly supported, but can create new duration\nhalf_seconds = base.total_seconds() / 2\nhalved = Duration(seconds=int(half_seconds))\nprint(halved)  # Duration for half the time\n</code></pre>"},{"location":"guide/duration/#negation-and-absolute-value","title":"Negation and Absolute Value","text":"<pre><code>from carbonic import Duration\n\nduration = Duration(hours=2, minutes=30)\n\n# Negate\nnegative = -duration\nprint(negative)  # Duration(days=0, hours=-2, minutes=-30)\n\n# Absolute value\nabs_duration = abs(negative)\nprint(abs_duration)  # Duration(hours=2, minutes=30)\n\n# Check if negative\nprint(duration &lt; Duration())   # False\nprint(negative &lt; Duration())   # True\nprint(duration &gt; Duration())   # True\n</code></pre>"},{"location":"guide/duration/#using-durations-with-datetime","title":"Using Durations with DateTime","text":""},{"location":"guide/duration/#adding-to-datetime","title":"Adding to DateTime","text":"<pre><code>from carbonic import DateTime, Duration\n\ndt = DateTime(2024, 1, 15, 10, 0, tz=\"UTC\")\nduration = Duration(days=3, hours=2, minutes=30)\n\n# Add duration to datetime\nfuture = dt + duration\nprint(future)  # 2024-01-18T12:30:00+00:00\n\n# Alternative syntax\nfuture_alt = dt.add_duration(duration)\nprint(future_alt)  # Same result\n</code></pre>"},{"location":"guide/duration/#subtracting-from-datetime","title":"Subtracting from DateTime","text":"<pre><code>from carbonic import DateTime, Duration\n\ndt = DateTime(2024, 1, 15, 10, 0, tz=\"UTC\")\nduration = Duration(days=2, hours=1)\n\n# Subtract duration from datetime\npast = dt - duration\nprint(past)  # 2024-01-13T09:00:00+00:00\n\n# Alternative syntax\npast_alt = dt.subtract_duration(duration)\nprint(past_alt)  # Same result\n</code></pre>"},{"location":"guide/duration/#datetime-differences-result-in-durations","title":"DateTime Differences Result in Durations","text":"<pre><code>from carbonic import DateTime\n\nstart = DateTime(2024, 1, 15, 10, 0, tz=\"UTC\")\nend = DateTime(2024, 1, 17, 14, 30, tz=\"UTC\")\n\n# Get duration between datetimes\nduration = end - start\nprint(duration)  # Duration(days=2, hours=4, minutes=30)\nprint(type(duration))  # &lt;class 'carbonic.core.duration.Duration'&gt;\n</code></pre>"},{"location":"guide/duration/#conversion-and-access","title":"Conversion and Access","text":""},{"location":"guide/duration/#total-values","title":"Total Values","text":"<pre><code>from carbonic import Duration\n\nduration = Duration(days=2, hours=3, minutes=30, seconds=45)\n\n# Get total values in different units\nprint(duration.total_seconds())      # 183045.0\nprint(duration.in_minutes())      # 3050.75\nprint(duration.in_hours())        # 50.845833333333336\nprint(duration.in_days())         # 2.118576388888889\n\n# Get individual components\nprint(duration.days)                    # 2\ntotal_seconds = duration.storage_seconds\nremaining_hours = (total_seconds // 3600) % 24\nremaining_minutes = (total_seconds // 60) % 60\nremaining_seconds = total_seconds % 60\nprint(f\"Remaining hours: {remaining_hours}\")    # 3 (remaining after days)\nprint(f\"Remaining minutes: {remaining_minutes}\") # 30 (remaining after hours)\nprint(f\"Remaining seconds: {remaining_seconds}\") # 45 (remaining after minutes)\nprint(duration.microseconds)           # 0\n</code></pre>"},{"location":"guide/duration/#component-access","title":"Component Access","text":"<pre><code>from carbonic import Duration\n\nduration = Duration(days=5, hours=25, minutes=90)  # Overflow handled\n\nprint(f\"Days: {duration.days}\")           # 6 (25 hours = 1 day + 1 hour)\n# Calculate remaining components\ntotal_seconds = duration.storage_seconds\nremaining_hours = (total_seconds // 3600) % 24\nremaining_minutes = (total_seconds // 60) % 60\nremaining_seconds = total_seconds % 60\nprint(f\"Remaining hours: {remaining_hours}\")    # 1 hour remaining after days\nprint(f\"Remaining minutes: {remaining_minutes}\") # 30 minutes remaining\nprint(f\"Remaining seconds: {remaining_seconds}\") # 0 seconds\n</code></pre>"},{"location":"guide/duration/#to-python-timedelta","title":"To Python Timedelta","text":"<pre><code>from carbonic import Duration\n\nduration = Duration(days=3, hours=2, minutes=15)\n\n# Convert to timedelta\nimport datetime\ntd = datetime.timedelta(seconds=duration.total_seconds())\nprint(type(td))  # &lt;class 'datetime.timedelta'&gt;\nprint(td)        # 3 days, 2:15:00\n</code></pre>"},{"location":"guide/duration/#comparisons","title":"Comparisons","text":""},{"location":"guide/duration/#basic-comparisons","title":"Basic Comparisons","text":"<pre><code>from carbonic import Duration\n\nd1 = Duration(hours=2)\nd2 = Duration(minutes=120)  # Same as 2 hours\nd3 = Duration(hours=3)\n\n# Equality\nprint(d1 == d2)  # True (same duration)\nprint(d1 == d3)  # False\n\n# Ordering\nprint(d1 &lt; d3)   # True\nprint(d3 &gt; d1)   # True\nprint(d1 &lt;= d2)  # True\nprint(d3 &gt;= d2)  # True\n</code></pre>"},{"location":"guide/duration/#fluent-comparison-methods","title":"Fluent Comparison Methods","text":"<pre><code>from carbonic import Duration\n\nd1 = Duration(hours=2, minutes=30)\nd2 = Duration(hours=3)\n\n# Standard comparison operators\nprint(d1 == d2)      # False\nprint(d1 &lt; d2)       # True\nprint(d1 &gt; d2)       # False\n# Check if d1 is between two durations\nprint(Duration(hours=2) &lt;= d1 &lt;= Duration(hours=3))  # True\n</code></pre>"},{"location":"guide/duration/#zero-and-sign-checks","title":"Zero and Sign Checks","text":"<pre><code>from carbonic import Duration\n\nzero = Duration()\npositive = Duration(hours=1)\nnegative = Duration(hours=-1)\n\n# Zero checks\nprint(zero == Duration())        # True\nprint(positive == Duration())    # False\n\n# Sign checks\nprint(positive &gt; Duration())  # True\nprint(negative &lt; Duration())  # True\nprint(zero &gt; Duration())      # False\nprint(zero &lt; Duration())      # False\n</code></pre>"},{"location":"guide/duration/#formatting-and-display","title":"Formatting and Display","text":""},{"location":"guide/duration/#string-representation","title":"String Representation","text":"<pre><code>from carbonic import Duration\n\n# Various durations\nd1 = Duration(days=3, hours=2, minutes=30)\nd2 = Duration(hours=1, seconds=45)\nd3 = Duration(minutes=90)\n\nprint(str(d1))   # \"Duration(days=3, hours=2, minutes=30)\"\nprint(str(d2))   # \"Duration(hours=1, seconds=45)\"\nprint(str(d3))   # \"Duration(hours=1, minutes=30)\"  # Normalized\n\nprint(repr(d1))  # Shows full constructor call\n</code></pre>"},{"location":"guide/duration/#human-readable-format","title":"Human-Readable Format","text":"<pre><code>from carbonic import Duration\n\nduration = Duration(days=2, hours=3, minutes=30)\n\n# Human readable string (basic implementation)\ndef humanize_duration(d):\n    parts = []\n    total_seconds = d.storage_seconds\n\n    days = d.days\n    remaining_hours = (total_seconds // 3600) % 24\n    remaining_minutes = (total_seconds // 60) % 60\n    remaining_seconds = total_seconds % 60\n\n    if days:\n        parts.append(f\"{days} day{'s' if days != 1 else ''}\")\n    if remaining_hours:\n        parts.append(f\"{remaining_hours} hour{'s' if remaining_hours != 1 else ''}\")\n    if remaining_minutes:\n        parts.append(f\"{remaining_minutes} minute{'s' if remaining_minutes != 1 else ''}\")\n    if remaining_seconds:\n        parts.append(f\"{remaining_seconds} second{'s' if remaining_seconds != 1 else ''}\")\n\n    return \", \".join(parts) if parts else \"0 seconds\"\n\nprint(humanize_duration(duration))  # \"2 days, 3 hours, 30 minutes\"\n</code></pre>"},{"location":"guide/duration/#iso-duration-format","title":"ISO Duration Format","text":"<pre><code>from carbonic import Duration\n\nduration = Duration(days=3, hours=2, minutes=30, seconds=45)\n\n# ISO 8601 duration format (PT2H30M for 2 hours 30 minutes)\ndef to_iso_duration(d):\n    parts = [\"P\"]\n    total_seconds = d.storage_seconds\n\n    days = d.days\n    remaining_hours = (total_seconds // 3600) % 24\n    remaining_minutes = (total_seconds // 60) % 60\n    remaining_seconds = total_seconds % 60\n\n    if days:\n        parts.append(f\"{days}D\")\n\n    time_parts = []\n    if remaining_hours:\n        time_parts.append(f\"{remaining_hours}H\")\n    if remaining_minutes:\n        time_parts.append(f\"{remaining_minutes}M\")\n    if remaining_seconds or d.microseconds:\n        if d.microseconds:\n            total_secs = remaining_seconds + d.microseconds / 1_000_000\n            time_parts.append(f\"{total_secs}S\")\n        else:\n            time_parts.append(f\"{remaining_seconds}S\")\n\n    if time_parts:\n        parts.append(\"T\")\n        parts.extend(time_parts)\n\n    return \"\".join(parts) if len(parts) &gt; 1 else \"PT0S\"\n\nprint(to_iso_duration(duration))  # \"P3DT2H30M45S\"\n</code></pre>"},{"location":"guide/duration/#common-use-cases","title":"Common Use Cases","text":""},{"location":"guide/duration/#timeouts-and-intervals","title":"Timeouts and Intervals","text":"<pre><code>from carbonic import Duration, DateTime\n\n# Define timeouts\nshort_timeout = Duration(seconds=30)\nlong_timeout = Duration(minutes=5)\nsession_timeout = Duration(hours=2)\n\n# Check if timeout exceeded\nstart_time = DateTime.now()\n# ... some operation ...\ncurrent_time = DateTime.now()\nelapsed = current_time - start_time\n\nif elapsed &gt; short_timeout:\n    print(\"Operation timed out!\")\n</code></pre>"},{"location":"guide/duration/#scheduling-and-delays","title":"Scheduling and Delays","text":"<pre><code>from carbonic import Duration, DateTime\n\n# Schedule regular intervals\nnow = DateTime.now()\nintervals = [\n    Duration(minutes=15),   # Every 15 minutes\n    Duration(hours=1),      # Every hour\n    Duration(days=1),       # Daily\n    Duration(days=7),       # Weekly\n]\n\n# Calculate next occurrences\nnext_times = [now + interval for interval in intervals]\nfor next_time in next_times:\n    print(f\"Next: {next_time}\")\n</code></pre>"},{"location":"guide/duration/#duration-calculations","title":"Duration Calculations","text":"<pre><code>from carbonic import Duration\n\n# Work day duration\nwork_day = Duration(hours=8)\nlunch_break = Duration(minutes=30)\nactual_work = work_day - lunch_break\n\nprint(f\"Actual work time: {actual_work}\")  # 7 hours 30 minutes\n\n# Calculate pay periods\nhourly_wage = 25  # dollars\nweekly_hours = work_day * 5  # 5 work days\nmonthly_hours = weekly_hours * 4  # 4 weeks\n\nweekly_pay = hourly_wage * weekly_hours.in_hours()\nmonthly_pay = hourly_wage * monthly_hours.in_hours()\n\nprint(f\"Weekly pay: ${weekly_pay}\")\nprint(f\"Monthly pay: ${monthly_pay}\")\n</code></pre>"},{"location":"guide/duration/#measuring-performance","title":"Measuring Performance","text":"<pre><code>from carbonic import Duration, DateTime\nimport time\n\n# Measure operation duration\nstart = DateTime.now()\n\n# Some operation\ntime.sleep(0.1)  # Simulate work\n\nend = DateTime.now()\nduration = end - start\n\nprint(f\"Operation took: {duration.total_seconds():.3f} seconds\")\n\n# Performance budget\nmax_duration = Duration(milliseconds=100)\nif duration &gt; max_duration:\n    print(\"Performance budget exceeded!\")\n</code></pre>"},{"location":"guide/duration/#advanced-features","title":"Advanced Features","text":""},{"location":"guide/duration/#duration-rounding","title":"Duration Rounding","text":"<pre><code>from carbonic import Duration\n\n# Create duration with fractional seconds\nduration = Duration(seconds=45, microseconds=750000)  # 45.75 seconds\n\n# Round to nearest second\nrounded_seconds = Duration(seconds=round(duration.total_seconds()))\nprint(rounded_seconds)  # Duration(seconds=46)\n\n# Round to nearest minute\nrounded_minutes = Duration(minutes=round(duration.in_minutes()))\nprint(rounded_minutes)  # Duration(minutes=1)\n</code></pre>"},{"location":"guide/duration/#duration-normalization","title":"Duration Normalization","text":"<pre><code>from carbonic import Duration\n\n# Durations are automatically normalized\nduration = Duration(hours=25, minutes=90, seconds=120)\nprint(duration)  # Duration(days=1, hours=2, minutes=32)\n\n# Manual normalization example\ndef normalize_duration(days=0, hours=0, minutes=0, seconds=0, microseconds=0):\n    total_microseconds = (\n        microseconds +\n        seconds * 1_000_000 +\n        minutes * 60 * 1_000_000 +\n        hours * 60 * 60 * 1_000_000 +\n        days * 24 * 60 * 60 * 1_000_000\n    )\n    return Duration(microseconds=total_microseconds)\n</code></pre>"},{"location":"guide/duration/#working-with-different-precisions","title":"Working with Different Precisions","text":"<pre><code>from carbonic import Duration\n\n# High precision duration\nprecise = Duration(microseconds=123456)\nprint(f\"Microseconds: {precise.microseconds}\")\n\n# Convert to different precisions\nmilliseconds = precise.total_seconds() * 1000\nprint(f\"Milliseconds: {milliseconds}\")\n\n# Round to millisecond precision\nms_duration = Duration(seconds=round(milliseconds / 1000, 3))\nprint(ms_duration)\n</code></pre>"},{"location":"guide/duration/#best-practices","title":"Best Practices","text":""},{"location":"guide/duration/#choose-appropriate-units","title":"Choose Appropriate Units","text":"<pre><code>from carbonic import Duration\n\n# Good - use natural units\nmeeting_duration = Duration(hours=1, minutes=30)\ncoffee_break = Duration(minutes=15)\nproject_deadline = Duration(days=30)\n\n# Avoid - unnecessarily complex\nmeeting_duration_bad = Duration(seconds=5400)  # Hard to read\n</code></pre>"},{"location":"guide/duration/#use-constants-for-common-durations","title":"Use Constants for Common Durations","text":"<pre><code>from carbonic import Duration\n\n# Define common durations as constants\nMINUTE = Duration(minutes=1)\nHOUR = Duration(hours=1)\nDAY = Duration(days=1)\nWEEK = Duration(days=7)\n\n# Use in calculations\nmeeting_time = HOUR + Duration(minutes=30)\nproject_duration = WEEK * 4\n</code></pre>"},{"location":"guide/duration/#handle-edge-cases","title":"Handle Edge Cases","text":"<pre><code>from carbonic import Duration\n\n# Be careful with zero durations\nzero = Duration()\nprint(zero == Duration())  # True\n\n# Handle negative durations appropriately\nnegative = Duration(hours=-2)\nprint(negative &lt; Duration())  # True\n\n# Consider absolute values when needed\nabsolute = abs(negative)\n</code></pre>"},{"location":"guide/duration/#performance-considerations","title":"Performance Considerations","text":"<pre><code>from carbonic import Duration\n\n# Efficient - create once, reuse\nbase_interval = Duration(minutes=15)\nintervals = [base_interval * i for i in range(1, 10)]\n\n# Less efficient - create many Duration objects\nintervals_bad = [Duration(minutes=15 * i) for i in range(1, 10)]\n</code></pre>"},{"location":"guide/pydantic/","title":"Pydantic Integration","text":"<p>Carbonic provides seamless integration with Pydantic for data validation and serialization. This allows you to use Carbonic's datetime classes in Pydantic models with automatic validation and JSON serialization.</p>"},{"location":"guide/pydantic/#installation","title":"Installation","text":"<p>To use Pydantic integration, install Carbonic with the pydantic extra:</p> <pre><code>pip install carbonic[pydantic]\n</code></pre>"},{"location":"guide/pydantic/#available-field-types","title":"Available Field Types","text":"<p>Carbonic provides custom Pydantic field types for all core classes:</p> <ul> <li><code>DateField</code> - for <code>carbonic.Date</code> objects</li> <li><code>DateTimeField</code> - for <code>carbonic.DateTime</code> objects</li> <li><code>DurationField</code> - for <code>carbonic.Duration</code> objects</li> <li><code>IntervalField</code> - for <code>carbonic.Interval</code> objects</li> <li><code>PeriodField</code> - for <code>carbonic.Period</code> objects</li> </ul>"},{"location":"guide/pydantic/#basic-usage","title":"Basic Usage","text":""},{"location":"guide/pydantic/#simple-model-example","title":"Simple Model Example","text":"<pre><code>from pydantic import BaseModel\nfrom carbonic.integrations.pydantic import DateField, DateTimeField, DurationField\n\nclass Event(BaseModel):\n    name: str\n    date: DateField\n    start_time: DateTimeField\n    duration: DurationField\n\n# Create an event\nevent = Event(\n    name=\"Team Meeting\",\n    date=\"2024-01-15\",\n    start_time=\"2024-01-15T14:00:00Z\",\n    duration=\"PT2H\"\n)\n\nprint(event.date)        # Date(2024, 1, 15)\nprint(event.start_time)  # DateTime(2024, 1, 15, 14, 0, 0, tz='UTC')\nprint(event.duration)    # Duration(days=0, storage_seconds=7200, ...)\n</code></pre>"},{"location":"guide/pydantic/#json-serialization","title":"JSON Serialization","text":"<p>Carbonic field types automatically serialize to appropriate JSON formats:</p> <pre><code>from pydantic import BaseModel\nfrom carbonic.integrations.pydantic import DateField, DateTimeField, DurationField\n\nclass Event(BaseModel):\n    name: str\n    date: DateField\n    start_time: DateTimeField\n    duration: DurationField\n\n# Create an event\nevent = Event(\n    name=\"Team Meeting\",\n    date=\"2024-01-15\",\n    start_time=\"2024-01-15T14:00:00Z\",\n    duration=\"PT2H\"\n)\n\n# Serialize to JSON\njson_data = event.model_dump_json()\nprint(json_data)\n# {\"name\":\"Team Meeting\",\"date\":\"2024-01-15\",\"start_time\":\"2024-01-15T14:00:00+00:00\",\"duration\":\"PT2H\"}\n\n# Deserialize from JSON\nimport json\nevent_data = json.loads(json_data)\nnew_event = Event(**event_data)\nassert new_event.name == event.name\nassert new_event.date == event.date\n</code></pre>"},{"location":"guide/pydantic/#field-type-details","title":"Field Type Details","text":""},{"location":"guide/pydantic/#datefield","title":"DateField","text":"<p>Accepts and validates: - <code>Date</code> instances - ISO 8601 date strings (<code>\"2024-01-15\"</code>) - Dictionaries with date components</p> <pre><code>from pydantic import BaseModel\nfrom carbonic import Date\nfrom carbonic.integrations.pydantic import DateField\n\nclass Task(BaseModel):\n    due_date: DateField\n\n# All these work:\nTask(due_date=Date(2024, 1, 15))\nTask(due_date=\"2024-01-15\")\nTask(due_date={\"year\": 2024, \"month\": 1, \"day\": 15})\n</code></pre>"},{"location":"guide/pydantic/#datetimefield","title":"DateTimeField","text":"<p>Accepts and validates: - <code>DateTime</code> instances - ISO 8601 datetime strings with timezone - Dictionaries with datetime components</p> <pre><code>from pydantic import BaseModel\nfrom carbonic.integrations.pydantic import DateTimeField\n\nclass Meeting(BaseModel):\n    start_time: DateTimeField\n    end_time: DateTimeField\n\n# All these work:\nmeeting = Meeting(\n    start_time=\"2024-01-15T14:00:00Z\",\n    end_time=\"2024-01-15T16:00:00+02:00\"\n)\n</code></pre>"},{"location":"guide/pydantic/#durationfield","title":"DurationField","text":"<p>Accepts and validates: - <code>Duration</code> instances - ISO 8601 duration strings (<code>\"PT2H30M\"</code>) - Numbers (interpreted as seconds) - Dictionaries with duration components</p> <pre><code>from pydantic import BaseModel\nfrom carbonic.integrations.pydantic import DurationField\n\nclass Task(BaseModel):\n    estimated_duration: DurationField\n\n# All these work:\nTask(estimated_duration=\"PT2H30M\")      # ISO 8601\nTask(estimated_duration=9000)           # 2.5 hours in seconds\nTask(estimated_duration={\"hours\": 2, \"minutes\": 30})\n</code></pre>"},{"location":"guide/pydantic/#intervalfield","title":"IntervalField","text":"<p>Accepts and validates: - <code>Interval</code> instances - Dictionaries with <code>start</code> and <code>end</code> keys - Tuples/lists with <code>[start, end]</code> elements</p> <pre><code>from pydantic import BaseModel\nfrom carbonic.integrations.pydantic import IntervalField\n\nclass Booking(BaseModel):\n    time_slot: IntervalField\n\n# All these work:\nBooking(time_slot={\n    \"start\": \"2024-01-15T14:00:00Z\",\n    \"end\": \"2024-01-15T16:00:00Z\"\n})\n\nBooking(time_slot=[\n    \"2024-01-15T14:00:00Z\",\n    \"2024-01-15T16:00:00Z\"\n])\n</code></pre>"},{"location":"guide/pydantic/#periodfield","title":"PeriodField","text":"<p>Accepts and validates: - <code>Period</code> instances - Period name strings (<code>\"DAY\"</code>, <code>\"WEEK\"</code>, <code>\"MONTH\"</code>, etc.)</p> <pre><code>from pydantic import BaseModel\nfrom carbonic import Period\nfrom carbonic.integrations.pydantic import PeriodField\n\nclass Schedule(BaseModel):\n    frequency: PeriodField\n\n# All these work:\nSchedule(frequency=Period.WEEK)\nSchedule(frequency=\"WEEK\")\nSchedule(frequency=\"week\")  # Case insensitive\n</code></pre>"},{"location":"guide/pydantic/#advanced-examples","title":"Advanced Examples","text":""},{"location":"guide/pydantic/#complex-event-management-system","title":"Complex Event Management System","text":"<pre><code>from pydantic import BaseModel, Field\nfrom typing import List, Optional\nfrom carbonic.integrations.pydantic import (\n    DateField, DateTimeField, DurationField,\n    IntervalField, PeriodField\n)\n\nclass Attendee(BaseModel):\n    name: str\n    email: str\n    confirmed_at: Optional[DateTimeField] = None\n\nclass RecurringEvent(BaseModel):\n    id: int\n    title: str\n    description: str\n    start_date: DateField\n    time_slot: IntervalField\n    duration: DurationField\n    recurrence: PeriodField\n    attendees: List[Attendee] = Field(default_factory=list)\n    created_at: DateTimeField\n    updated_at: Optional[DateTimeField] = None\n\n# Create a recurring meeting\nmeeting = RecurringEvent(\n    id=1,\n    title=\"Weekly Standup\",\n    description=\"Team synchronization meeting\",\n    start_date=\"2024-01-15\",\n    time_slot={\n        \"start\": \"2024-01-15T09:00:00Z\",\n        \"end\": \"2024-01-15T10:00:00Z\"\n    },\n    duration=\"PT1H\",\n    recurrence=\"WEEK\",\n    attendees=[\n        {\"name\": \"Alice\", \"email\": \"alice@example.com\"},\n        {\"name\": \"Bob\", \"email\": \"bob@example.com\"}\n    ],\n    created_at=\"2024-01-10T12:00:00Z\"\n)\n\n# JSON serialization maintains all datetime information\njson_output = meeting.model_dump_json(indent=2)\nprint(json_output)\n</code></pre>"},{"location":"guide/pydantic/#validation-and-error-handling","title":"Validation and Error Handling","text":"<pre><code>from pydantic import BaseModel, ValidationError\nfrom carbonic.integrations.pydantic import DateField, DurationField\n\nclass Event(BaseModel):\n    name: str\n    date: DateField\n    duration: DurationField\n\ntry:\n    # This will raise a validation error\n    event = Event(\n        name=\"Invalid Event\",\n        date=\"not-a-date\",\n        duration=\"invalid-duration\"\n    )\nexcept ValidationError as e:\n    print(\"Validation errors:\")\n    for error in e.errors():\n        print(f\"- {error['loc'][0]}: {error['msg']}\")\n</code></pre>"},{"location":"guide/pydantic/#custom-validators","title":"Custom Validators","text":"<p>You can combine Carbonic field types with Pydantic's custom validators:</p> <pre><code>from pydantic import BaseModel, field_validator, ValidationError\nfrom carbonic import Date\nfrom carbonic.integrations.pydantic import DateField\n\nclass FutureEvent(BaseModel):\n    name: str\n    date: DateField\n\n    @field_validator('date')\n    @classmethod\n    def date_must_be_future(cls, v: Date) -&gt; Date:\n        if v &lt;= Date.today():\n            raise ValueError('Event date must be in the future')\n        return v\n\n# This works\nevent = FutureEvent(name=\"Future Event\", date=\"2026-01-15\")\n\n# This raises validation error\ntry:\n    past_event = FutureEvent(name=\"Past Event\", date=\"2020-01-15\")\nexcept ValidationError:\n    print(\"Cannot create event in the past!\")\n</code></pre>"},{"location":"guide/pydantic/#type-aliases","title":"Type Aliases","text":"<p>For convenience, Carbonic also provides type aliases:</p> <pre><code>from pydantic import BaseModel\nfrom carbonic.integrations.pydantic import (\n    CarbonicDate,      # alias for DateField\n    CarbonicDateTime,  # alias for DateTimeField\n    CarbonicDuration,  # alias for DurationField\n    CarbonicInterval,  # alias for IntervalField\n    CarbonicPeriod,    # alias for PeriodField\n)\n\nclass Event(BaseModel):\n    date: CarbonicDate\n    start_time: CarbonicDateTime\n    duration: CarbonicDuration\n</code></pre>"},{"location":"guide/pydantic/#json-schema-generation","title":"JSON Schema Generation","text":"<p>Carbonic field types automatically generate appropriate JSON schemas for OpenAPI documentation:</p> <pre><code>from pydantic import BaseModel\nfrom carbonic.integrations.pydantic import DateField, DateTimeField\n\nclass Event(BaseModel):\n    date: DateField\n    start_time: DateTimeField\n\n# Generate JSON schema\nschema = Event.model_json_schema()\nprint(schema['properties']['date'])\n</code></pre> <p>This integration makes Carbonic datetime classes work seamlessly with FastAPI, SQLModel, and other Pydantic-based frameworks, providing robust datetime validation and serialization out of the box.</p>"}]}