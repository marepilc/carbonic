name: Deploy Documentation

on:
  push:
    branches: [master]
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'  # Deploy docs for all releases (x.y.z)
  workflow_dispatch:

permissions:
  contents: write  # Need write access to push to gh-pages branch
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy-docs:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for mike versioning

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: |
        uv sync
        uv add mkdocs-material mike

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Determine version strategy
      id: version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          # Tagged release - extract version from tag (remove 'v' prefix)
          FULL_VERSION=${GITHUB_REF#refs/tags/v}

          # For 1.0.x releases, display as "1.0" (strip patch version)
          if [[ "$FULL_VERSION" =~ ^1\.0\.[0-9]+$ ]]; then
            VERSION="1.0"
          else
            # For other versions, use the full version
            VERSION="$FULL_VERSION"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "full_version=$FULL_VERSION" >> $GITHUB_OUTPUT
          echo "is_release=true" >> $GITHUB_OUTPUT
        else
          # Push to master - deploy as 'dev'
          echo "version=dev" >> $GITHUB_OUTPUT
          echo "is_release=false" >> $GITHUB_OUTPUT
        fi

    - name: Deploy versioned docs (feature release)
      if: steps.version.outputs.is_release == 'true'
      run: |
        uv run mike deploy ${{ steps.version.outputs.version }} latest --update-aliases --push
        uv run mike set-default latest --push

    - name: Deploy development docs
      if: steps.version.outputs.is_release == 'false'
      run: |
        uv run mike deploy dev --push
        # Don't change the default - keep existing release as default
